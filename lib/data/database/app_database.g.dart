// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'app_database.dart';

// ignore_for_file: type=lint
class $FamilyMemberProfilesTable extends FamilyMemberProfiles
    with TableInfo<$FamilyMemberProfilesTable, FamilyMemberProfile> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $FamilyMemberProfilesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _firstNameMeta = const VerificationMeta(
    'firstName',
  );
  @override
  late final GeneratedColumn<String> firstName = GeneratedColumn<String>(
    'first_name',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 50,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _lastNameMeta = const VerificationMeta(
    'lastName',
  );
  @override
  late final GeneratedColumn<String> lastName = GeneratedColumn<String>(
    'last_name',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 50,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _middleNameMeta = const VerificationMeta(
    'middleName',
  );
  @override
  late final GeneratedColumn<String> middleName = GeneratedColumn<String>(
    'middle_name',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 50,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dateOfBirthMeta = const VerificationMeta(
    'dateOfBirth',
  );
  @override
  late final GeneratedColumn<DateTime> dateOfBirth = GeneratedColumn<DateTime>(
    'date_of_birth',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _genderMeta = const VerificationMeta('gender');
  @override
  late final GeneratedColumn<String> gender = GeneratedColumn<String>(
    'gender',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _bloodTypeMeta = const VerificationMeta(
    'bloodType',
  );
  @override
  late final GeneratedColumn<String> bloodType = GeneratedColumn<String>(
    'blood_type',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _heightMeta = const VerificationMeta('height');
  @override
  late final GeneratedColumn<double> height = GeneratedColumn<double>(
    'height',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _weightMeta = const VerificationMeta('weight');
  @override
  late final GeneratedColumn<double> weight = GeneratedColumn<double>(
    'weight',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emergencyContactMeta = const VerificationMeta(
    'emergencyContact',
  );
  @override
  late final GeneratedColumn<String> emergencyContact = GeneratedColumn<String>(
    'emergency_contact',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _insuranceInfoMeta = const VerificationMeta(
    'insuranceInfo',
  );
  @override
  late final GeneratedColumn<String> insuranceInfo = GeneratedColumn<String>(
    'insurance_info',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _profileImagePathMeta = const VerificationMeta(
    'profileImagePath',
  );
  @override
  late final GeneratedColumn<String> profileImagePath = GeneratedColumn<String>(
    'profile_image_path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _relationshipMeta = const VerificationMeta(
    'relationship',
  );
  @override
  late final GeneratedColumn<String> relationship = GeneratedColumn<String>(
    'relationship',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _phoneMeta = const VerificationMeta('phone');
  @override
  late final GeneratedColumn<String> phone = GeneratedColumn<String>(
    'phone',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _addressMeta = const VerificationMeta(
    'address',
  );
  @override
  late final GeneratedColumn<String> address = GeneratedColumn<String>(
    'address',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _medicalConditionsMeta = const VerificationMeta(
    'medicalConditions',
  );
  @override
  late final GeneratedColumn<String> medicalConditions =
      GeneratedColumn<String>(
        'medical_conditions',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _allergiesMeta = const VerificationMeta(
    'allergies',
  );
  @override
  late final GeneratedColumn<String> allergies = GeneratedColumn<String>(
    'allergies',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    firstName,
    lastName,
    middleName,
    dateOfBirth,
    gender,
    bloodType,
    height,
    weight,
    emergencyContact,
    insuranceInfo,
    profileImagePath,
    relationship,
    phone,
    email,
    address,
    medicalConditions,
    allergies,
    createdAt,
    updatedAt,
    isActive,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'family_member_profiles';
  @override
  VerificationContext validateIntegrity(
    Insertable<FamilyMemberProfile> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('first_name')) {
      context.handle(
        _firstNameMeta,
        firstName.isAcceptableOrUnknown(data['first_name']!, _firstNameMeta),
      );
    } else if (isInserting) {
      context.missing(_firstNameMeta);
    }
    if (data.containsKey('last_name')) {
      context.handle(
        _lastNameMeta,
        lastName.isAcceptableOrUnknown(data['last_name']!, _lastNameMeta),
      );
    } else if (isInserting) {
      context.missing(_lastNameMeta);
    }
    if (data.containsKey('middle_name')) {
      context.handle(
        _middleNameMeta,
        middleName.isAcceptableOrUnknown(data['middle_name']!, _middleNameMeta),
      );
    }
    if (data.containsKey('date_of_birth')) {
      context.handle(
        _dateOfBirthMeta,
        dateOfBirth.isAcceptableOrUnknown(
          data['date_of_birth']!,
          _dateOfBirthMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_dateOfBirthMeta);
    }
    if (data.containsKey('gender')) {
      context.handle(
        _genderMeta,
        gender.isAcceptableOrUnknown(data['gender']!, _genderMeta),
      );
    } else if (isInserting) {
      context.missing(_genderMeta);
    }
    if (data.containsKey('blood_type')) {
      context.handle(
        _bloodTypeMeta,
        bloodType.isAcceptableOrUnknown(data['blood_type']!, _bloodTypeMeta),
      );
    }
    if (data.containsKey('height')) {
      context.handle(
        _heightMeta,
        height.isAcceptableOrUnknown(data['height']!, _heightMeta),
      );
    }
    if (data.containsKey('weight')) {
      context.handle(
        _weightMeta,
        weight.isAcceptableOrUnknown(data['weight']!, _weightMeta),
      );
    }
    if (data.containsKey('emergency_contact')) {
      context.handle(
        _emergencyContactMeta,
        emergencyContact.isAcceptableOrUnknown(
          data['emergency_contact']!,
          _emergencyContactMeta,
        ),
      );
    }
    if (data.containsKey('insurance_info')) {
      context.handle(
        _insuranceInfoMeta,
        insuranceInfo.isAcceptableOrUnknown(
          data['insurance_info']!,
          _insuranceInfoMeta,
        ),
      );
    }
    if (data.containsKey('profile_image_path')) {
      context.handle(
        _profileImagePathMeta,
        profileImagePath.isAcceptableOrUnknown(
          data['profile_image_path']!,
          _profileImagePathMeta,
        ),
      );
    }
    if (data.containsKey('relationship')) {
      context.handle(
        _relationshipMeta,
        relationship.isAcceptableOrUnknown(
          data['relationship']!,
          _relationshipMeta,
        ),
      );
    }
    if (data.containsKey('phone')) {
      context.handle(
        _phoneMeta,
        phone.isAcceptableOrUnknown(data['phone']!, _phoneMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('address')) {
      context.handle(
        _addressMeta,
        address.isAcceptableOrUnknown(data['address']!, _addressMeta),
      );
    }
    if (data.containsKey('medical_conditions')) {
      context.handle(
        _medicalConditionsMeta,
        medicalConditions.isAcceptableOrUnknown(
          data['medical_conditions']!,
          _medicalConditionsMeta,
        ),
      );
    }
    if (data.containsKey('allergies')) {
      context.handle(
        _allergiesMeta,
        allergies.isAcceptableOrUnknown(data['allergies']!, _allergiesMeta),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FamilyMemberProfile map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return FamilyMemberProfile(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      firstName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}first_name'],
      )!,
      lastName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}last_name'],
      )!,
      middleName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}middle_name'],
      ),
      dateOfBirth: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}date_of_birth'],
      )!,
      gender: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}gender'],
      )!,
      bloodType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}blood_type'],
      ),
      height: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}height'],
      ),
      weight: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}weight'],
      ),
      emergencyContact: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}emergency_contact'],
      ),
      insuranceInfo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}insurance_info'],
      ),
      profileImagePath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_image_path'],
      ),
      relationship: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}relationship'],
      ),
      phone: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}phone'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      address: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}address'],
      ),
      medicalConditions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}medical_conditions'],
      ),
      allergies: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}allergies'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
    );
  }

  @override
  $FamilyMemberProfilesTable createAlias(String alias) {
    return $FamilyMemberProfilesTable(attachedDatabase, alias);
  }
}

class FamilyMemberProfile extends DataClass
    implements Insertable<FamilyMemberProfile> {
  final String id;
  final String firstName;
  final String lastName;
  final String? middleName;
  final DateTime dateOfBirth;
  final String gender;
  final String? bloodType;
  final double? height;
  final double? weight;
  final String? emergencyContact;
  final String? insuranceInfo;
  final String? profileImagePath;
  final String? relationship;
  final String? phone;
  final String? email;
  final String? address;
  final String? medicalConditions;
  final String? allergies;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  const FamilyMemberProfile({
    required this.id,
    required this.firstName,
    required this.lastName,
    this.middleName,
    required this.dateOfBirth,
    required this.gender,
    this.bloodType,
    this.height,
    this.weight,
    this.emergencyContact,
    this.insuranceInfo,
    this.profileImagePath,
    this.relationship,
    this.phone,
    this.email,
    this.address,
    this.medicalConditions,
    this.allergies,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['first_name'] = Variable<String>(firstName);
    map['last_name'] = Variable<String>(lastName);
    if (!nullToAbsent || middleName != null) {
      map['middle_name'] = Variable<String>(middleName);
    }
    map['date_of_birth'] = Variable<DateTime>(dateOfBirth);
    map['gender'] = Variable<String>(gender);
    if (!nullToAbsent || bloodType != null) {
      map['blood_type'] = Variable<String>(bloodType);
    }
    if (!nullToAbsent || height != null) {
      map['height'] = Variable<double>(height);
    }
    if (!nullToAbsent || weight != null) {
      map['weight'] = Variable<double>(weight);
    }
    if (!nullToAbsent || emergencyContact != null) {
      map['emergency_contact'] = Variable<String>(emergencyContact);
    }
    if (!nullToAbsent || insuranceInfo != null) {
      map['insurance_info'] = Variable<String>(insuranceInfo);
    }
    if (!nullToAbsent || profileImagePath != null) {
      map['profile_image_path'] = Variable<String>(profileImagePath);
    }
    if (!nullToAbsent || relationship != null) {
      map['relationship'] = Variable<String>(relationship);
    }
    if (!nullToAbsent || phone != null) {
      map['phone'] = Variable<String>(phone);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || address != null) {
      map['address'] = Variable<String>(address);
    }
    if (!nullToAbsent || medicalConditions != null) {
      map['medical_conditions'] = Variable<String>(medicalConditions);
    }
    if (!nullToAbsent || allergies != null) {
      map['allergies'] = Variable<String>(allergies);
    }
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    return map;
  }

  FamilyMemberProfilesCompanion toCompanion(bool nullToAbsent) {
    return FamilyMemberProfilesCompanion(
      id: Value(id),
      firstName: Value(firstName),
      lastName: Value(lastName),
      middleName: middleName == null && nullToAbsent
          ? const Value.absent()
          : Value(middleName),
      dateOfBirth: Value(dateOfBirth),
      gender: Value(gender),
      bloodType: bloodType == null && nullToAbsent
          ? const Value.absent()
          : Value(bloodType),
      height: height == null && nullToAbsent
          ? const Value.absent()
          : Value(height),
      weight: weight == null && nullToAbsent
          ? const Value.absent()
          : Value(weight),
      emergencyContact: emergencyContact == null && nullToAbsent
          ? const Value.absent()
          : Value(emergencyContact),
      insuranceInfo: insuranceInfo == null && nullToAbsent
          ? const Value.absent()
          : Value(insuranceInfo),
      profileImagePath: profileImagePath == null && nullToAbsent
          ? const Value.absent()
          : Value(profileImagePath),
      relationship: relationship == null && nullToAbsent
          ? const Value.absent()
          : Value(relationship),
      phone: phone == null && nullToAbsent
          ? const Value.absent()
          : Value(phone),
      email: email == null && nullToAbsent
          ? const Value.absent()
          : Value(email),
      address: address == null && nullToAbsent
          ? const Value.absent()
          : Value(address),
      medicalConditions: medicalConditions == null && nullToAbsent
          ? const Value.absent()
          : Value(medicalConditions),
      allergies: allergies == null && nullToAbsent
          ? const Value.absent()
          : Value(allergies),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
    );
  }

  factory FamilyMemberProfile.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FamilyMemberProfile(
      id: serializer.fromJson<String>(json['id']),
      firstName: serializer.fromJson<String>(json['firstName']),
      lastName: serializer.fromJson<String>(json['lastName']),
      middleName: serializer.fromJson<String?>(json['middleName']),
      dateOfBirth: serializer.fromJson<DateTime>(json['dateOfBirth']),
      gender: serializer.fromJson<String>(json['gender']),
      bloodType: serializer.fromJson<String?>(json['bloodType']),
      height: serializer.fromJson<double?>(json['height']),
      weight: serializer.fromJson<double?>(json['weight']),
      emergencyContact: serializer.fromJson<String?>(json['emergencyContact']),
      insuranceInfo: serializer.fromJson<String?>(json['insuranceInfo']),
      profileImagePath: serializer.fromJson<String?>(json['profileImagePath']),
      relationship: serializer.fromJson<String?>(json['relationship']),
      phone: serializer.fromJson<String?>(json['phone']),
      email: serializer.fromJson<String?>(json['email']),
      address: serializer.fromJson<String?>(json['address']),
      medicalConditions: serializer.fromJson<String?>(
        json['medicalConditions'],
      ),
      allergies: serializer.fromJson<String?>(json['allergies']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'firstName': serializer.toJson<String>(firstName),
      'lastName': serializer.toJson<String>(lastName),
      'middleName': serializer.toJson<String?>(middleName),
      'dateOfBirth': serializer.toJson<DateTime>(dateOfBirth),
      'gender': serializer.toJson<String>(gender),
      'bloodType': serializer.toJson<String?>(bloodType),
      'height': serializer.toJson<double?>(height),
      'weight': serializer.toJson<double?>(weight),
      'emergencyContact': serializer.toJson<String?>(emergencyContact),
      'insuranceInfo': serializer.toJson<String?>(insuranceInfo),
      'profileImagePath': serializer.toJson<String?>(profileImagePath),
      'relationship': serializer.toJson<String?>(relationship),
      'phone': serializer.toJson<String?>(phone),
      'email': serializer.toJson<String?>(email),
      'address': serializer.toJson<String?>(address),
      'medicalConditions': serializer.toJson<String?>(medicalConditions),
      'allergies': serializer.toJson<String?>(allergies),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
    };
  }

  FamilyMemberProfile copyWith({
    String? id,
    String? firstName,
    String? lastName,
    Value<String?> middleName = const Value.absent(),
    DateTime? dateOfBirth,
    String? gender,
    Value<String?> bloodType = const Value.absent(),
    Value<double?> height = const Value.absent(),
    Value<double?> weight = const Value.absent(),
    Value<String?> emergencyContact = const Value.absent(),
    Value<String?> insuranceInfo = const Value.absent(),
    Value<String?> profileImagePath = const Value.absent(),
    Value<String?> relationship = const Value.absent(),
    Value<String?> phone = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> address = const Value.absent(),
    Value<String?> medicalConditions = const Value.absent(),
    Value<String?> allergies = const Value.absent(),
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
  }) => FamilyMemberProfile(
    id: id ?? this.id,
    firstName: firstName ?? this.firstName,
    lastName: lastName ?? this.lastName,
    middleName: middleName.present ? middleName.value : this.middleName,
    dateOfBirth: dateOfBirth ?? this.dateOfBirth,
    gender: gender ?? this.gender,
    bloodType: bloodType.present ? bloodType.value : this.bloodType,
    height: height.present ? height.value : this.height,
    weight: weight.present ? weight.value : this.weight,
    emergencyContact: emergencyContact.present
        ? emergencyContact.value
        : this.emergencyContact,
    insuranceInfo: insuranceInfo.present
        ? insuranceInfo.value
        : this.insuranceInfo,
    profileImagePath: profileImagePath.present
        ? profileImagePath.value
        : this.profileImagePath,
    relationship: relationship.present ? relationship.value : this.relationship,
    phone: phone.present ? phone.value : this.phone,
    email: email.present ? email.value : this.email,
    address: address.present ? address.value : this.address,
    medicalConditions: medicalConditions.present
        ? medicalConditions.value
        : this.medicalConditions,
    allergies: allergies.present ? allergies.value : this.allergies,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
  );
  FamilyMemberProfile copyWithCompanion(FamilyMemberProfilesCompanion data) {
    return FamilyMemberProfile(
      id: data.id.present ? data.id.value : this.id,
      firstName: data.firstName.present ? data.firstName.value : this.firstName,
      lastName: data.lastName.present ? data.lastName.value : this.lastName,
      middleName: data.middleName.present
          ? data.middleName.value
          : this.middleName,
      dateOfBirth: data.dateOfBirth.present
          ? data.dateOfBirth.value
          : this.dateOfBirth,
      gender: data.gender.present ? data.gender.value : this.gender,
      bloodType: data.bloodType.present ? data.bloodType.value : this.bloodType,
      height: data.height.present ? data.height.value : this.height,
      weight: data.weight.present ? data.weight.value : this.weight,
      emergencyContact: data.emergencyContact.present
          ? data.emergencyContact.value
          : this.emergencyContact,
      insuranceInfo: data.insuranceInfo.present
          ? data.insuranceInfo.value
          : this.insuranceInfo,
      profileImagePath: data.profileImagePath.present
          ? data.profileImagePath.value
          : this.profileImagePath,
      relationship: data.relationship.present
          ? data.relationship.value
          : this.relationship,
      phone: data.phone.present ? data.phone.value : this.phone,
      email: data.email.present ? data.email.value : this.email,
      address: data.address.present ? data.address.value : this.address,
      medicalConditions: data.medicalConditions.present
          ? data.medicalConditions.value
          : this.medicalConditions,
      allergies: data.allergies.present ? data.allergies.value : this.allergies,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
    );
  }

  @override
  String toString() {
    return (StringBuffer('FamilyMemberProfile(')
          ..write('id: $id, ')
          ..write('firstName: $firstName, ')
          ..write('lastName: $lastName, ')
          ..write('middleName: $middleName, ')
          ..write('dateOfBirth: $dateOfBirth, ')
          ..write('gender: $gender, ')
          ..write('bloodType: $bloodType, ')
          ..write('height: $height, ')
          ..write('weight: $weight, ')
          ..write('emergencyContact: $emergencyContact, ')
          ..write('insuranceInfo: $insuranceInfo, ')
          ..write('profileImagePath: $profileImagePath, ')
          ..write('relationship: $relationship, ')
          ..write('phone: $phone, ')
          ..write('email: $email, ')
          ..write('address: $address, ')
          ..write('medicalConditions: $medicalConditions, ')
          ..write('allergies: $allergies, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    firstName,
    lastName,
    middleName,
    dateOfBirth,
    gender,
    bloodType,
    height,
    weight,
    emergencyContact,
    insuranceInfo,
    profileImagePath,
    relationship,
    phone,
    email,
    address,
    medicalConditions,
    allergies,
    createdAt,
    updatedAt,
    isActive,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FamilyMemberProfile &&
          other.id == this.id &&
          other.firstName == this.firstName &&
          other.lastName == this.lastName &&
          other.middleName == this.middleName &&
          other.dateOfBirth == this.dateOfBirth &&
          other.gender == this.gender &&
          other.bloodType == this.bloodType &&
          other.height == this.height &&
          other.weight == this.weight &&
          other.emergencyContact == this.emergencyContact &&
          other.insuranceInfo == this.insuranceInfo &&
          other.profileImagePath == this.profileImagePath &&
          other.relationship == this.relationship &&
          other.phone == this.phone &&
          other.email == this.email &&
          other.address == this.address &&
          other.medicalConditions == this.medicalConditions &&
          other.allergies == this.allergies &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive);
}

class FamilyMemberProfilesCompanion
    extends UpdateCompanion<FamilyMemberProfile> {
  final Value<String> id;
  final Value<String> firstName;
  final Value<String> lastName;
  final Value<String?> middleName;
  final Value<DateTime> dateOfBirth;
  final Value<String> gender;
  final Value<String?> bloodType;
  final Value<double?> height;
  final Value<double?> weight;
  final Value<String?> emergencyContact;
  final Value<String?> insuranceInfo;
  final Value<String?> profileImagePath;
  final Value<String?> relationship;
  final Value<String?> phone;
  final Value<String?> email;
  final Value<String?> address;
  final Value<String?> medicalConditions;
  final Value<String?> allergies;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<int> rowid;
  const FamilyMemberProfilesCompanion({
    this.id = const Value.absent(),
    this.firstName = const Value.absent(),
    this.lastName = const Value.absent(),
    this.middleName = const Value.absent(),
    this.dateOfBirth = const Value.absent(),
    this.gender = const Value.absent(),
    this.bloodType = const Value.absent(),
    this.height = const Value.absent(),
    this.weight = const Value.absent(),
    this.emergencyContact = const Value.absent(),
    this.insuranceInfo = const Value.absent(),
    this.profileImagePath = const Value.absent(),
    this.relationship = const Value.absent(),
    this.phone = const Value.absent(),
    this.email = const Value.absent(),
    this.address = const Value.absent(),
    this.medicalConditions = const Value.absent(),
    this.allergies = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  FamilyMemberProfilesCompanion.insert({
    required String id,
    required String firstName,
    required String lastName,
    this.middleName = const Value.absent(),
    required DateTime dateOfBirth,
    required String gender,
    this.bloodType = const Value.absent(),
    this.height = const Value.absent(),
    this.weight = const Value.absent(),
    this.emergencyContact = const Value.absent(),
    this.insuranceInfo = const Value.absent(),
    this.profileImagePath = const Value.absent(),
    this.relationship = const Value.absent(),
    this.phone = const Value.absent(),
    this.email = const Value.absent(),
    this.address = const Value.absent(),
    this.medicalConditions = const Value.absent(),
    this.allergies = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       firstName = Value(firstName),
       lastName = Value(lastName),
       dateOfBirth = Value(dateOfBirth),
       gender = Value(gender);
  static Insertable<FamilyMemberProfile> custom({
    Expression<String>? id,
    Expression<String>? firstName,
    Expression<String>? lastName,
    Expression<String>? middleName,
    Expression<DateTime>? dateOfBirth,
    Expression<String>? gender,
    Expression<String>? bloodType,
    Expression<double>? height,
    Expression<double>? weight,
    Expression<String>? emergencyContact,
    Expression<String>? insuranceInfo,
    Expression<String>? profileImagePath,
    Expression<String>? relationship,
    Expression<String>? phone,
    Expression<String>? email,
    Expression<String>? address,
    Expression<String>? medicalConditions,
    Expression<String>? allergies,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (middleName != null) 'middle_name': middleName,
      if (dateOfBirth != null) 'date_of_birth': dateOfBirth,
      if (gender != null) 'gender': gender,
      if (bloodType != null) 'blood_type': bloodType,
      if (height != null) 'height': height,
      if (weight != null) 'weight': weight,
      if (emergencyContact != null) 'emergency_contact': emergencyContact,
      if (insuranceInfo != null) 'insurance_info': insuranceInfo,
      if (profileImagePath != null) 'profile_image_path': profileImagePath,
      if (relationship != null) 'relationship': relationship,
      if (phone != null) 'phone': phone,
      if (email != null) 'email': email,
      if (address != null) 'address': address,
      if (medicalConditions != null) 'medical_conditions': medicalConditions,
      if (allergies != null) 'allergies': allergies,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (rowid != null) 'rowid': rowid,
    });
  }

  FamilyMemberProfilesCompanion copyWith({
    Value<String>? id,
    Value<String>? firstName,
    Value<String>? lastName,
    Value<String?>? middleName,
    Value<DateTime>? dateOfBirth,
    Value<String>? gender,
    Value<String?>? bloodType,
    Value<double?>? height,
    Value<double?>? weight,
    Value<String?>? emergencyContact,
    Value<String?>? insuranceInfo,
    Value<String?>? profileImagePath,
    Value<String?>? relationship,
    Value<String?>? phone,
    Value<String?>? email,
    Value<String?>? address,
    Value<String?>? medicalConditions,
    Value<String?>? allergies,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<int>? rowid,
  }) {
    return FamilyMemberProfilesCompanion(
      id: id ?? this.id,
      firstName: firstName ?? this.firstName,
      lastName: lastName ?? this.lastName,
      middleName: middleName ?? this.middleName,
      dateOfBirth: dateOfBirth ?? this.dateOfBirth,
      gender: gender ?? this.gender,
      bloodType: bloodType ?? this.bloodType,
      height: height ?? this.height,
      weight: weight ?? this.weight,
      emergencyContact: emergencyContact ?? this.emergencyContact,
      insuranceInfo: insuranceInfo ?? this.insuranceInfo,
      profileImagePath: profileImagePath ?? this.profileImagePath,
      relationship: relationship ?? this.relationship,
      phone: phone ?? this.phone,
      email: email ?? this.email,
      address: address ?? this.address,
      medicalConditions: medicalConditions ?? this.medicalConditions,
      allergies: allergies ?? this.allergies,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (firstName.present) {
      map['first_name'] = Variable<String>(firstName.value);
    }
    if (lastName.present) {
      map['last_name'] = Variable<String>(lastName.value);
    }
    if (middleName.present) {
      map['middle_name'] = Variable<String>(middleName.value);
    }
    if (dateOfBirth.present) {
      map['date_of_birth'] = Variable<DateTime>(dateOfBirth.value);
    }
    if (gender.present) {
      map['gender'] = Variable<String>(gender.value);
    }
    if (bloodType.present) {
      map['blood_type'] = Variable<String>(bloodType.value);
    }
    if (height.present) {
      map['height'] = Variable<double>(height.value);
    }
    if (weight.present) {
      map['weight'] = Variable<double>(weight.value);
    }
    if (emergencyContact.present) {
      map['emergency_contact'] = Variable<String>(emergencyContact.value);
    }
    if (insuranceInfo.present) {
      map['insurance_info'] = Variable<String>(insuranceInfo.value);
    }
    if (profileImagePath.present) {
      map['profile_image_path'] = Variable<String>(profileImagePath.value);
    }
    if (relationship.present) {
      map['relationship'] = Variable<String>(relationship.value);
    }
    if (phone.present) {
      map['phone'] = Variable<String>(phone.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (address.present) {
      map['address'] = Variable<String>(address.value);
    }
    if (medicalConditions.present) {
      map['medical_conditions'] = Variable<String>(medicalConditions.value);
    }
    if (allergies.present) {
      map['allergies'] = Variable<String>(allergies.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FamilyMemberProfilesCompanion(')
          ..write('id: $id, ')
          ..write('firstName: $firstName, ')
          ..write('lastName: $lastName, ')
          ..write('middleName: $middleName, ')
          ..write('dateOfBirth: $dateOfBirth, ')
          ..write('gender: $gender, ')
          ..write('bloodType: $bloodType, ')
          ..write('height: $height, ')
          ..write('weight: $weight, ')
          ..write('emergencyContact: $emergencyContact, ')
          ..write('insuranceInfo: $insuranceInfo, ')
          ..write('profileImagePath: $profileImagePath, ')
          ..write('relationship: $relationship, ')
          ..write('phone: $phone, ')
          ..write('email: $email, ')
          ..write('address: $address, ')
          ..write('medicalConditions: $medicalConditions, ')
          ..write('allergies: $allergies, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $MedicalRecordsTable extends MedicalRecords
    with TableInfo<$MedicalRecordsTable, MedicalRecord> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MedicalRecordsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'medical_records';
  @override
  VerificationContext validateIntegrity(
    Insertable<MedicalRecord> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    } else if (isInserting) {
      context.missing(_recordTypeMeta);
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  MedicalRecord map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return MedicalRecord(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
    );
  }

  @override
  $MedicalRecordsTable createAlias(String alias) {
    return $MedicalRecordsTable(attachedDatabase, alias);
  }
}

class MedicalRecord extends DataClass implements Insertable<MedicalRecord> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  const MedicalRecord({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    return map;
  }

  MedicalRecordsCompanion toCompanion(bool nullToAbsent) {
    return MedicalRecordsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
    );
  }

  factory MedicalRecord.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return MedicalRecord(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
    };
  }

  MedicalRecord copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
  }) => MedicalRecord(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
  );
  MedicalRecord copyWithCompanion(MedicalRecordsCompanion data) {
    return MedicalRecord(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
    );
  }

  @override
  String toString() {
    return (StringBuffer('MedicalRecord(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is MedicalRecord &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive);
}

class MedicalRecordsCompanion extends UpdateCompanion<MedicalRecord> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<int> rowid;
  const MedicalRecordsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  MedicalRecordsCompanion.insert({
    required String id,
    required String profileId,
    required String recordType,
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       recordType = Value(recordType),
       title = Value(title),
       recordDate = Value(recordDate);
  static Insertable<MedicalRecord> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (rowid != null) 'rowid': rowid,
    });
  }

  MedicalRecordsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<int>? rowid,
  }) {
    return MedicalRecordsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MedicalRecordsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $PrescriptionsTable extends Prescriptions
    with TableInfo<$PrescriptionsTable, Prescription> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PrescriptionsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('prescription'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _prescriptionTypeMeta = const VerificationMeta(
    'prescriptionType',
  );
  @override
  late final GeneratedColumn<String> prescriptionType = GeneratedColumn<String>(
    'prescription_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _medicationNameMeta = const VerificationMeta(
    'medicationName',
  );
  @override
  late final GeneratedColumn<String> medicationName = GeneratedColumn<String>(
    'medication_name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dosageMeta = const VerificationMeta('dosage');
  @override
  late final GeneratedColumn<String> dosage = GeneratedColumn<String>(
    'dosage',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _frequencyMeta = const VerificationMeta(
    'frequency',
  );
  @override
  late final GeneratedColumn<String> frequency = GeneratedColumn<String>(
    'frequency',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _instructionsMeta = const VerificationMeta(
    'instructions',
  );
  @override
  late final GeneratedColumn<String> instructions = GeneratedColumn<String>(
    'instructions',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _prescribingDoctorMeta = const VerificationMeta(
    'prescribingDoctor',
  );
  @override
  late final GeneratedColumn<String> prescribingDoctor =
      GeneratedColumn<String>(
        'prescribing_doctor',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _pharmacyMeta = const VerificationMeta(
    'pharmacy',
  );
  @override
  late final GeneratedColumn<String> pharmacy = GeneratedColumn<String>(
    'pharmacy',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _startDateMeta = const VerificationMeta(
    'startDate',
  );
  @override
  late final GeneratedColumn<DateTime> startDate = GeneratedColumn<DateTime>(
    'start_date',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _endDateMeta = const VerificationMeta(
    'endDate',
  );
  @override
  late final GeneratedColumn<DateTime> endDate = GeneratedColumn<DateTime>(
    'end_date',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _refillsRemainingMeta = const VerificationMeta(
    'refillsRemaining',
  );
  @override
  late final GeneratedColumn<int> refillsRemaining = GeneratedColumn<int>(
    'refills_remaining',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _isPrescriptionActiveMeta =
      const VerificationMeta('isPrescriptionActive');
  @override
  late final GeneratedColumn<bool> isPrescriptionActive = GeneratedColumn<bool>(
    'is_prescription_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_prescription_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _appointmentDateMeta = const VerificationMeta(
    'appointmentDate',
  );
  @override
  late final GeneratedColumn<DateTime> appointmentDate =
      GeneratedColumn<DateTime>(
        'appointment_date',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _appointmentTimeMeta = const VerificationMeta(
    'appointmentTime',
  );
  @override
  late final GeneratedColumn<String> appointmentTime = GeneratedColumn<String>(
    'appointment_time',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _doctorNameMeta = const VerificationMeta(
    'doctorName',
  );
  @override
  late final GeneratedColumn<String> doctorName = GeneratedColumn<String>(
    'doctor_name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _specialtyMeta = const VerificationMeta(
    'specialty',
  );
  @override
  late final GeneratedColumn<String> specialty = GeneratedColumn<String>(
    'specialty',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _clinicNameMeta = const VerificationMeta(
    'clinicName',
  );
  @override
  late final GeneratedColumn<String> clinicName = GeneratedColumn<String>(
    'clinic_name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _clinicAddressMeta = const VerificationMeta(
    'clinicAddress',
  );
  @override
  late final GeneratedColumn<String> clinicAddress = GeneratedColumn<String>(
    'clinic_address',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _appointmentTypeMeta = const VerificationMeta(
    'appointmentType',
  );
  @override
  late final GeneratedColumn<String> appointmentType = GeneratedColumn<String>(
    'appointment_type',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _reasonForVisitMeta = const VerificationMeta(
    'reasonForVisit',
  );
  @override
  late final GeneratedColumn<String> reasonForVisit = GeneratedColumn<String>(
    'reason_for_visit',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _appointmentStatusMeta = const VerificationMeta(
    'appointmentStatus',
  );
  @override
  late final GeneratedColumn<String> appointmentStatus =
      GeneratedColumn<String>(
        'appointment_status',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _appointmentNotesMeta = const VerificationMeta(
    'appointmentNotes',
  );
  @override
  late final GeneratedColumn<String> appointmentNotes = GeneratedColumn<String>(
    'appointment_notes',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _reminderSetMeta = const VerificationMeta(
    'reminderSet',
  );
  @override
  late final GeneratedColumn<bool> reminderSet = GeneratedColumn<bool>(
    'reminder_set',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("reminder_set" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  static const VerificationMeta _reminderMinutesMeta = const VerificationMeta(
    'reminderMinutes',
  );
  @override
  late final GeneratedColumn<int> reminderMinutes = GeneratedColumn<int>(
    'reminder_minutes',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    prescriptionType,
    medicationName,
    dosage,
    frequency,
    instructions,
    prescribingDoctor,
    pharmacy,
    startDate,
    endDate,
    refillsRemaining,
    isPrescriptionActive,
    appointmentDate,
    appointmentTime,
    doctorName,
    specialty,
    clinicName,
    clinicAddress,
    appointmentType,
    reasonForVisit,
    appointmentStatus,
    appointmentNotes,
    reminderSet,
    reminderMinutes,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'prescriptions';
  @override
  VerificationContext validateIntegrity(
    Insertable<Prescription> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('prescription_type')) {
      context.handle(
        _prescriptionTypeMeta,
        prescriptionType.isAcceptableOrUnknown(
          data['prescription_type']!,
          _prescriptionTypeMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_prescriptionTypeMeta);
    }
    if (data.containsKey('medication_name')) {
      context.handle(
        _medicationNameMeta,
        medicationName.isAcceptableOrUnknown(
          data['medication_name']!,
          _medicationNameMeta,
        ),
      );
    }
    if (data.containsKey('dosage')) {
      context.handle(
        _dosageMeta,
        dosage.isAcceptableOrUnknown(data['dosage']!, _dosageMeta),
      );
    }
    if (data.containsKey('frequency')) {
      context.handle(
        _frequencyMeta,
        frequency.isAcceptableOrUnknown(data['frequency']!, _frequencyMeta),
      );
    }
    if (data.containsKey('instructions')) {
      context.handle(
        _instructionsMeta,
        instructions.isAcceptableOrUnknown(
          data['instructions']!,
          _instructionsMeta,
        ),
      );
    }
    if (data.containsKey('prescribing_doctor')) {
      context.handle(
        _prescribingDoctorMeta,
        prescribingDoctor.isAcceptableOrUnknown(
          data['prescribing_doctor']!,
          _prescribingDoctorMeta,
        ),
      );
    }
    if (data.containsKey('pharmacy')) {
      context.handle(
        _pharmacyMeta,
        pharmacy.isAcceptableOrUnknown(data['pharmacy']!, _pharmacyMeta),
      );
    }
    if (data.containsKey('start_date')) {
      context.handle(
        _startDateMeta,
        startDate.isAcceptableOrUnknown(data['start_date']!, _startDateMeta),
      );
    }
    if (data.containsKey('end_date')) {
      context.handle(
        _endDateMeta,
        endDate.isAcceptableOrUnknown(data['end_date']!, _endDateMeta),
      );
    }
    if (data.containsKey('refills_remaining')) {
      context.handle(
        _refillsRemainingMeta,
        refillsRemaining.isAcceptableOrUnknown(
          data['refills_remaining']!,
          _refillsRemainingMeta,
        ),
      );
    }
    if (data.containsKey('is_prescription_active')) {
      context.handle(
        _isPrescriptionActiveMeta,
        isPrescriptionActive.isAcceptableOrUnknown(
          data['is_prescription_active']!,
          _isPrescriptionActiveMeta,
        ),
      );
    }
    if (data.containsKey('appointment_date')) {
      context.handle(
        _appointmentDateMeta,
        appointmentDate.isAcceptableOrUnknown(
          data['appointment_date']!,
          _appointmentDateMeta,
        ),
      );
    }
    if (data.containsKey('appointment_time')) {
      context.handle(
        _appointmentTimeMeta,
        appointmentTime.isAcceptableOrUnknown(
          data['appointment_time']!,
          _appointmentTimeMeta,
        ),
      );
    }
    if (data.containsKey('doctor_name')) {
      context.handle(
        _doctorNameMeta,
        doctorName.isAcceptableOrUnknown(data['doctor_name']!, _doctorNameMeta),
      );
    }
    if (data.containsKey('specialty')) {
      context.handle(
        _specialtyMeta,
        specialty.isAcceptableOrUnknown(data['specialty']!, _specialtyMeta),
      );
    }
    if (data.containsKey('clinic_name')) {
      context.handle(
        _clinicNameMeta,
        clinicName.isAcceptableOrUnknown(data['clinic_name']!, _clinicNameMeta),
      );
    }
    if (data.containsKey('clinic_address')) {
      context.handle(
        _clinicAddressMeta,
        clinicAddress.isAcceptableOrUnknown(
          data['clinic_address']!,
          _clinicAddressMeta,
        ),
      );
    }
    if (data.containsKey('appointment_type')) {
      context.handle(
        _appointmentTypeMeta,
        appointmentType.isAcceptableOrUnknown(
          data['appointment_type']!,
          _appointmentTypeMeta,
        ),
      );
    }
    if (data.containsKey('reason_for_visit')) {
      context.handle(
        _reasonForVisitMeta,
        reasonForVisit.isAcceptableOrUnknown(
          data['reason_for_visit']!,
          _reasonForVisitMeta,
        ),
      );
    }
    if (data.containsKey('appointment_status')) {
      context.handle(
        _appointmentStatusMeta,
        appointmentStatus.isAcceptableOrUnknown(
          data['appointment_status']!,
          _appointmentStatusMeta,
        ),
      );
    }
    if (data.containsKey('appointment_notes')) {
      context.handle(
        _appointmentNotesMeta,
        appointmentNotes.isAcceptableOrUnknown(
          data['appointment_notes']!,
          _appointmentNotesMeta,
        ),
      );
    }
    if (data.containsKey('reminder_set')) {
      context.handle(
        _reminderSetMeta,
        reminderSet.isAcceptableOrUnknown(
          data['reminder_set']!,
          _reminderSetMeta,
        ),
      );
    }
    if (data.containsKey('reminder_minutes')) {
      context.handle(
        _reminderMinutesMeta,
        reminderMinutes.isAcceptableOrUnknown(
          data['reminder_minutes']!,
          _reminderMinutesMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Prescription map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return Prescription(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      prescriptionType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}prescription_type'],
      )!,
      medicationName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}medication_name'],
      ),
      dosage: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}dosage'],
      ),
      frequency: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}frequency'],
      ),
      instructions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}instructions'],
      ),
      prescribingDoctor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}prescribing_doctor'],
      ),
      pharmacy: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pharmacy'],
      ),
      startDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}start_date'],
      ),
      endDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}end_date'],
      ),
      refillsRemaining: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}refills_remaining'],
      ),
      isPrescriptionActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_prescription_active'],
      )!,
      appointmentDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}appointment_date'],
      ),
      appointmentTime: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}appointment_time'],
      ),
      doctorName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}doctor_name'],
      ),
      specialty: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}specialty'],
      ),
      clinicName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}clinic_name'],
      ),
      clinicAddress: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}clinic_address'],
      ),
      appointmentType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}appointment_type'],
      ),
      reasonForVisit: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}reason_for_visit'],
      ),
      appointmentStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}appointment_status'],
      ),
      appointmentNotes: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}appointment_notes'],
      ),
      reminderSet: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}reminder_set'],
      )!,
      reminderMinutes: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}reminder_minutes'],
      ),
    );
  }

  @override
  $PrescriptionsTable createAlias(String alias) {
    return $PrescriptionsTable(attachedDatabase, alias);
  }
}

class Prescription extends DataClass implements Insertable<Prescription> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String prescriptionType;
  final String? medicationName;
  final String? dosage;
  final String? frequency;
  final String? instructions;
  final String? prescribingDoctor;
  final String? pharmacy;
  final DateTime? startDate;
  final DateTime? endDate;
  final int? refillsRemaining;
  final bool isPrescriptionActive;
  final DateTime? appointmentDate;
  final String? appointmentTime;
  final String? doctorName;
  final String? specialty;
  final String? clinicName;
  final String? clinicAddress;
  final String? appointmentType;
  final String? reasonForVisit;
  final String? appointmentStatus;
  final String? appointmentNotes;
  final bool reminderSet;
  final int? reminderMinutes;
  const Prescription({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.prescriptionType,
    this.medicationName,
    this.dosage,
    this.frequency,
    this.instructions,
    this.prescribingDoctor,
    this.pharmacy,
    this.startDate,
    this.endDate,
    this.refillsRemaining,
    required this.isPrescriptionActive,
    this.appointmentDate,
    this.appointmentTime,
    this.doctorName,
    this.specialty,
    this.clinicName,
    this.clinicAddress,
    this.appointmentType,
    this.reasonForVisit,
    this.appointmentStatus,
    this.appointmentNotes,
    required this.reminderSet,
    this.reminderMinutes,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['prescription_type'] = Variable<String>(prescriptionType);
    if (!nullToAbsent || medicationName != null) {
      map['medication_name'] = Variable<String>(medicationName);
    }
    if (!nullToAbsent || dosage != null) {
      map['dosage'] = Variable<String>(dosage);
    }
    if (!nullToAbsent || frequency != null) {
      map['frequency'] = Variable<String>(frequency);
    }
    if (!nullToAbsent || instructions != null) {
      map['instructions'] = Variable<String>(instructions);
    }
    if (!nullToAbsent || prescribingDoctor != null) {
      map['prescribing_doctor'] = Variable<String>(prescribingDoctor);
    }
    if (!nullToAbsent || pharmacy != null) {
      map['pharmacy'] = Variable<String>(pharmacy);
    }
    if (!nullToAbsent || startDate != null) {
      map['start_date'] = Variable<DateTime>(startDate);
    }
    if (!nullToAbsent || endDate != null) {
      map['end_date'] = Variable<DateTime>(endDate);
    }
    if (!nullToAbsent || refillsRemaining != null) {
      map['refills_remaining'] = Variable<int>(refillsRemaining);
    }
    map['is_prescription_active'] = Variable<bool>(isPrescriptionActive);
    if (!nullToAbsent || appointmentDate != null) {
      map['appointment_date'] = Variable<DateTime>(appointmentDate);
    }
    if (!nullToAbsent || appointmentTime != null) {
      map['appointment_time'] = Variable<String>(appointmentTime);
    }
    if (!nullToAbsent || doctorName != null) {
      map['doctor_name'] = Variable<String>(doctorName);
    }
    if (!nullToAbsent || specialty != null) {
      map['specialty'] = Variable<String>(specialty);
    }
    if (!nullToAbsent || clinicName != null) {
      map['clinic_name'] = Variable<String>(clinicName);
    }
    if (!nullToAbsent || clinicAddress != null) {
      map['clinic_address'] = Variable<String>(clinicAddress);
    }
    if (!nullToAbsent || appointmentType != null) {
      map['appointment_type'] = Variable<String>(appointmentType);
    }
    if (!nullToAbsent || reasonForVisit != null) {
      map['reason_for_visit'] = Variable<String>(reasonForVisit);
    }
    if (!nullToAbsent || appointmentStatus != null) {
      map['appointment_status'] = Variable<String>(appointmentStatus);
    }
    if (!nullToAbsent || appointmentNotes != null) {
      map['appointment_notes'] = Variable<String>(appointmentNotes);
    }
    map['reminder_set'] = Variable<bool>(reminderSet);
    if (!nullToAbsent || reminderMinutes != null) {
      map['reminder_minutes'] = Variable<int>(reminderMinutes);
    }
    return map;
  }

  PrescriptionsCompanion toCompanion(bool nullToAbsent) {
    return PrescriptionsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      prescriptionType: Value(prescriptionType),
      medicationName: medicationName == null && nullToAbsent
          ? const Value.absent()
          : Value(medicationName),
      dosage: dosage == null && nullToAbsent
          ? const Value.absent()
          : Value(dosage),
      frequency: frequency == null && nullToAbsent
          ? const Value.absent()
          : Value(frequency),
      instructions: instructions == null && nullToAbsent
          ? const Value.absent()
          : Value(instructions),
      prescribingDoctor: prescribingDoctor == null && nullToAbsent
          ? const Value.absent()
          : Value(prescribingDoctor),
      pharmacy: pharmacy == null && nullToAbsent
          ? const Value.absent()
          : Value(pharmacy),
      startDate: startDate == null && nullToAbsent
          ? const Value.absent()
          : Value(startDate),
      endDate: endDate == null && nullToAbsent
          ? const Value.absent()
          : Value(endDate),
      refillsRemaining: refillsRemaining == null && nullToAbsent
          ? const Value.absent()
          : Value(refillsRemaining),
      isPrescriptionActive: Value(isPrescriptionActive),
      appointmentDate: appointmentDate == null && nullToAbsent
          ? const Value.absent()
          : Value(appointmentDate),
      appointmentTime: appointmentTime == null && nullToAbsent
          ? const Value.absent()
          : Value(appointmentTime),
      doctorName: doctorName == null && nullToAbsent
          ? const Value.absent()
          : Value(doctorName),
      specialty: specialty == null && nullToAbsent
          ? const Value.absent()
          : Value(specialty),
      clinicName: clinicName == null && nullToAbsent
          ? const Value.absent()
          : Value(clinicName),
      clinicAddress: clinicAddress == null && nullToAbsent
          ? const Value.absent()
          : Value(clinicAddress),
      appointmentType: appointmentType == null && nullToAbsent
          ? const Value.absent()
          : Value(appointmentType),
      reasonForVisit: reasonForVisit == null && nullToAbsent
          ? const Value.absent()
          : Value(reasonForVisit),
      appointmentStatus: appointmentStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(appointmentStatus),
      appointmentNotes: appointmentNotes == null && nullToAbsent
          ? const Value.absent()
          : Value(appointmentNotes),
      reminderSet: Value(reminderSet),
      reminderMinutes: reminderMinutes == null && nullToAbsent
          ? const Value.absent()
          : Value(reminderMinutes),
    );
  }

  factory Prescription.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Prescription(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      prescriptionType: serializer.fromJson<String>(json['prescriptionType']),
      medicationName: serializer.fromJson<String?>(json['medicationName']),
      dosage: serializer.fromJson<String?>(json['dosage']),
      frequency: serializer.fromJson<String?>(json['frequency']),
      instructions: serializer.fromJson<String?>(json['instructions']),
      prescribingDoctor: serializer.fromJson<String?>(
        json['prescribingDoctor'],
      ),
      pharmacy: serializer.fromJson<String?>(json['pharmacy']),
      startDate: serializer.fromJson<DateTime?>(json['startDate']),
      endDate: serializer.fromJson<DateTime?>(json['endDate']),
      refillsRemaining: serializer.fromJson<int?>(json['refillsRemaining']),
      isPrescriptionActive: serializer.fromJson<bool>(
        json['isPrescriptionActive'],
      ),
      appointmentDate: serializer.fromJson<DateTime?>(json['appointmentDate']),
      appointmentTime: serializer.fromJson<String?>(json['appointmentTime']),
      doctorName: serializer.fromJson<String?>(json['doctorName']),
      specialty: serializer.fromJson<String?>(json['specialty']),
      clinicName: serializer.fromJson<String?>(json['clinicName']),
      clinicAddress: serializer.fromJson<String?>(json['clinicAddress']),
      appointmentType: serializer.fromJson<String?>(json['appointmentType']),
      reasonForVisit: serializer.fromJson<String?>(json['reasonForVisit']),
      appointmentStatus: serializer.fromJson<String?>(
        json['appointmentStatus'],
      ),
      appointmentNotes: serializer.fromJson<String?>(json['appointmentNotes']),
      reminderSet: serializer.fromJson<bool>(json['reminderSet']),
      reminderMinutes: serializer.fromJson<int?>(json['reminderMinutes']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'prescriptionType': serializer.toJson<String>(prescriptionType),
      'medicationName': serializer.toJson<String?>(medicationName),
      'dosage': serializer.toJson<String?>(dosage),
      'frequency': serializer.toJson<String?>(frequency),
      'instructions': serializer.toJson<String?>(instructions),
      'prescribingDoctor': serializer.toJson<String?>(prescribingDoctor),
      'pharmacy': serializer.toJson<String?>(pharmacy),
      'startDate': serializer.toJson<DateTime?>(startDate),
      'endDate': serializer.toJson<DateTime?>(endDate),
      'refillsRemaining': serializer.toJson<int?>(refillsRemaining),
      'isPrescriptionActive': serializer.toJson<bool>(isPrescriptionActive),
      'appointmentDate': serializer.toJson<DateTime?>(appointmentDate),
      'appointmentTime': serializer.toJson<String?>(appointmentTime),
      'doctorName': serializer.toJson<String?>(doctorName),
      'specialty': serializer.toJson<String?>(specialty),
      'clinicName': serializer.toJson<String?>(clinicName),
      'clinicAddress': serializer.toJson<String?>(clinicAddress),
      'appointmentType': serializer.toJson<String?>(appointmentType),
      'reasonForVisit': serializer.toJson<String?>(reasonForVisit),
      'appointmentStatus': serializer.toJson<String?>(appointmentStatus),
      'appointmentNotes': serializer.toJson<String?>(appointmentNotes),
      'reminderSet': serializer.toJson<bool>(reminderSet),
      'reminderMinutes': serializer.toJson<int?>(reminderMinutes),
    };
  }

  Prescription copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? prescriptionType,
    Value<String?> medicationName = const Value.absent(),
    Value<String?> dosage = const Value.absent(),
    Value<String?> frequency = const Value.absent(),
    Value<String?> instructions = const Value.absent(),
    Value<String?> prescribingDoctor = const Value.absent(),
    Value<String?> pharmacy = const Value.absent(),
    Value<DateTime?> startDate = const Value.absent(),
    Value<DateTime?> endDate = const Value.absent(),
    Value<int?> refillsRemaining = const Value.absent(),
    bool? isPrescriptionActive,
    Value<DateTime?> appointmentDate = const Value.absent(),
    Value<String?> appointmentTime = const Value.absent(),
    Value<String?> doctorName = const Value.absent(),
    Value<String?> specialty = const Value.absent(),
    Value<String?> clinicName = const Value.absent(),
    Value<String?> clinicAddress = const Value.absent(),
    Value<String?> appointmentType = const Value.absent(),
    Value<String?> reasonForVisit = const Value.absent(),
    Value<String?> appointmentStatus = const Value.absent(),
    Value<String?> appointmentNotes = const Value.absent(),
    bool? reminderSet,
    Value<int?> reminderMinutes = const Value.absent(),
  }) => Prescription(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    prescriptionType: prescriptionType ?? this.prescriptionType,
    medicationName: medicationName.present
        ? medicationName.value
        : this.medicationName,
    dosage: dosage.present ? dosage.value : this.dosage,
    frequency: frequency.present ? frequency.value : this.frequency,
    instructions: instructions.present ? instructions.value : this.instructions,
    prescribingDoctor: prescribingDoctor.present
        ? prescribingDoctor.value
        : this.prescribingDoctor,
    pharmacy: pharmacy.present ? pharmacy.value : this.pharmacy,
    startDate: startDate.present ? startDate.value : this.startDate,
    endDate: endDate.present ? endDate.value : this.endDate,
    refillsRemaining: refillsRemaining.present
        ? refillsRemaining.value
        : this.refillsRemaining,
    isPrescriptionActive: isPrescriptionActive ?? this.isPrescriptionActive,
    appointmentDate: appointmentDate.present
        ? appointmentDate.value
        : this.appointmentDate,
    appointmentTime: appointmentTime.present
        ? appointmentTime.value
        : this.appointmentTime,
    doctorName: doctorName.present ? doctorName.value : this.doctorName,
    specialty: specialty.present ? specialty.value : this.specialty,
    clinicName: clinicName.present ? clinicName.value : this.clinicName,
    clinicAddress: clinicAddress.present
        ? clinicAddress.value
        : this.clinicAddress,
    appointmentType: appointmentType.present
        ? appointmentType.value
        : this.appointmentType,
    reasonForVisit: reasonForVisit.present
        ? reasonForVisit.value
        : this.reasonForVisit,
    appointmentStatus: appointmentStatus.present
        ? appointmentStatus.value
        : this.appointmentStatus,
    appointmentNotes: appointmentNotes.present
        ? appointmentNotes.value
        : this.appointmentNotes,
    reminderSet: reminderSet ?? this.reminderSet,
    reminderMinutes: reminderMinutes.present
        ? reminderMinutes.value
        : this.reminderMinutes,
  );
  Prescription copyWithCompanion(PrescriptionsCompanion data) {
    return Prescription(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      prescriptionType: data.prescriptionType.present
          ? data.prescriptionType.value
          : this.prescriptionType,
      medicationName: data.medicationName.present
          ? data.medicationName.value
          : this.medicationName,
      dosage: data.dosage.present ? data.dosage.value : this.dosage,
      frequency: data.frequency.present ? data.frequency.value : this.frequency,
      instructions: data.instructions.present
          ? data.instructions.value
          : this.instructions,
      prescribingDoctor: data.prescribingDoctor.present
          ? data.prescribingDoctor.value
          : this.prescribingDoctor,
      pharmacy: data.pharmacy.present ? data.pharmacy.value : this.pharmacy,
      startDate: data.startDate.present ? data.startDate.value : this.startDate,
      endDate: data.endDate.present ? data.endDate.value : this.endDate,
      refillsRemaining: data.refillsRemaining.present
          ? data.refillsRemaining.value
          : this.refillsRemaining,
      isPrescriptionActive: data.isPrescriptionActive.present
          ? data.isPrescriptionActive.value
          : this.isPrescriptionActive,
      appointmentDate: data.appointmentDate.present
          ? data.appointmentDate.value
          : this.appointmentDate,
      appointmentTime: data.appointmentTime.present
          ? data.appointmentTime.value
          : this.appointmentTime,
      doctorName: data.doctorName.present
          ? data.doctorName.value
          : this.doctorName,
      specialty: data.specialty.present ? data.specialty.value : this.specialty,
      clinicName: data.clinicName.present
          ? data.clinicName.value
          : this.clinicName,
      clinicAddress: data.clinicAddress.present
          ? data.clinicAddress.value
          : this.clinicAddress,
      appointmentType: data.appointmentType.present
          ? data.appointmentType.value
          : this.appointmentType,
      reasonForVisit: data.reasonForVisit.present
          ? data.reasonForVisit.value
          : this.reasonForVisit,
      appointmentStatus: data.appointmentStatus.present
          ? data.appointmentStatus.value
          : this.appointmentStatus,
      appointmentNotes: data.appointmentNotes.present
          ? data.appointmentNotes.value
          : this.appointmentNotes,
      reminderSet: data.reminderSet.present
          ? data.reminderSet.value
          : this.reminderSet,
      reminderMinutes: data.reminderMinutes.present
          ? data.reminderMinutes.value
          : this.reminderMinutes,
    );
  }

  @override
  String toString() {
    return (StringBuffer('Prescription(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('prescriptionType: $prescriptionType, ')
          ..write('medicationName: $medicationName, ')
          ..write('dosage: $dosage, ')
          ..write('frequency: $frequency, ')
          ..write('instructions: $instructions, ')
          ..write('prescribingDoctor: $prescribingDoctor, ')
          ..write('pharmacy: $pharmacy, ')
          ..write('startDate: $startDate, ')
          ..write('endDate: $endDate, ')
          ..write('refillsRemaining: $refillsRemaining, ')
          ..write('isPrescriptionActive: $isPrescriptionActive, ')
          ..write('appointmentDate: $appointmentDate, ')
          ..write('appointmentTime: $appointmentTime, ')
          ..write('doctorName: $doctorName, ')
          ..write('specialty: $specialty, ')
          ..write('clinicName: $clinicName, ')
          ..write('clinicAddress: $clinicAddress, ')
          ..write('appointmentType: $appointmentType, ')
          ..write('reasonForVisit: $reasonForVisit, ')
          ..write('appointmentStatus: $appointmentStatus, ')
          ..write('appointmentNotes: $appointmentNotes, ')
          ..write('reminderSet: $reminderSet, ')
          ..write('reminderMinutes: $reminderMinutes')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    prescriptionType,
    medicationName,
    dosage,
    frequency,
    instructions,
    prescribingDoctor,
    pharmacy,
    startDate,
    endDate,
    refillsRemaining,
    isPrescriptionActive,
    appointmentDate,
    appointmentTime,
    doctorName,
    specialty,
    clinicName,
    clinicAddress,
    appointmentType,
    reasonForVisit,
    appointmentStatus,
    appointmentNotes,
    reminderSet,
    reminderMinutes,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Prescription &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.prescriptionType == this.prescriptionType &&
          other.medicationName == this.medicationName &&
          other.dosage == this.dosage &&
          other.frequency == this.frequency &&
          other.instructions == this.instructions &&
          other.prescribingDoctor == this.prescribingDoctor &&
          other.pharmacy == this.pharmacy &&
          other.startDate == this.startDate &&
          other.endDate == this.endDate &&
          other.refillsRemaining == this.refillsRemaining &&
          other.isPrescriptionActive == this.isPrescriptionActive &&
          other.appointmentDate == this.appointmentDate &&
          other.appointmentTime == this.appointmentTime &&
          other.doctorName == this.doctorName &&
          other.specialty == this.specialty &&
          other.clinicName == this.clinicName &&
          other.clinicAddress == this.clinicAddress &&
          other.appointmentType == this.appointmentType &&
          other.reasonForVisit == this.reasonForVisit &&
          other.appointmentStatus == this.appointmentStatus &&
          other.appointmentNotes == this.appointmentNotes &&
          other.reminderSet == this.reminderSet &&
          other.reminderMinutes == this.reminderMinutes);
}

class PrescriptionsCompanion extends UpdateCompanion<Prescription> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> prescriptionType;
  final Value<String?> medicationName;
  final Value<String?> dosage;
  final Value<String?> frequency;
  final Value<String?> instructions;
  final Value<String?> prescribingDoctor;
  final Value<String?> pharmacy;
  final Value<DateTime?> startDate;
  final Value<DateTime?> endDate;
  final Value<int?> refillsRemaining;
  final Value<bool> isPrescriptionActive;
  final Value<DateTime?> appointmentDate;
  final Value<String?> appointmentTime;
  final Value<String?> doctorName;
  final Value<String?> specialty;
  final Value<String?> clinicName;
  final Value<String?> clinicAddress;
  final Value<String?> appointmentType;
  final Value<String?> reasonForVisit;
  final Value<String?> appointmentStatus;
  final Value<String?> appointmentNotes;
  final Value<bool> reminderSet;
  final Value<int?> reminderMinutes;
  final Value<int> rowid;
  const PrescriptionsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.prescriptionType = const Value.absent(),
    this.medicationName = const Value.absent(),
    this.dosage = const Value.absent(),
    this.frequency = const Value.absent(),
    this.instructions = const Value.absent(),
    this.prescribingDoctor = const Value.absent(),
    this.pharmacy = const Value.absent(),
    this.startDate = const Value.absent(),
    this.endDate = const Value.absent(),
    this.refillsRemaining = const Value.absent(),
    this.isPrescriptionActive = const Value.absent(),
    this.appointmentDate = const Value.absent(),
    this.appointmentTime = const Value.absent(),
    this.doctorName = const Value.absent(),
    this.specialty = const Value.absent(),
    this.clinicName = const Value.absent(),
    this.clinicAddress = const Value.absent(),
    this.appointmentType = const Value.absent(),
    this.reasonForVisit = const Value.absent(),
    this.appointmentStatus = const Value.absent(),
    this.appointmentNotes = const Value.absent(),
    this.reminderSet = const Value.absent(),
    this.reminderMinutes = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  PrescriptionsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String prescriptionType,
    this.medicationName = const Value.absent(),
    this.dosage = const Value.absent(),
    this.frequency = const Value.absent(),
    this.instructions = const Value.absent(),
    this.prescribingDoctor = const Value.absent(),
    this.pharmacy = const Value.absent(),
    this.startDate = const Value.absent(),
    this.endDate = const Value.absent(),
    this.refillsRemaining = const Value.absent(),
    this.isPrescriptionActive = const Value.absent(),
    this.appointmentDate = const Value.absent(),
    this.appointmentTime = const Value.absent(),
    this.doctorName = const Value.absent(),
    this.specialty = const Value.absent(),
    this.clinicName = const Value.absent(),
    this.clinicAddress = const Value.absent(),
    this.appointmentType = const Value.absent(),
    this.reasonForVisit = const Value.absent(),
    this.appointmentStatus = const Value.absent(),
    this.appointmentNotes = const Value.absent(),
    this.reminderSet = const Value.absent(),
    this.reminderMinutes = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       prescriptionType = Value(prescriptionType);
  static Insertable<Prescription> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? prescriptionType,
    Expression<String>? medicationName,
    Expression<String>? dosage,
    Expression<String>? frequency,
    Expression<String>? instructions,
    Expression<String>? prescribingDoctor,
    Expression<String>? pharmacy,
    Expression<DateTime>? startDate,
    Expression<DateTime>? endDate,
    Expression<int>? refillsRemaining,
    Expression<bool>? isPrescriptionActive,
    Expression<DateTime>? appointmentDate,
    Expression<String>? appointmentTime,
    Expression<String>? doctorName,
    Expression<String>? specialty,
    Expression<String>? clinicName,
    Expression<String>? clinicAddress,
    Expression<String>? appointmentType,
    Expression<String>? reasonForVisit,
    Expression<String>? appointmentStatus,
    Expression<String>? appointmentNotes,
    Expression<bool>? reminderSet,
    Expression<int>? reminderMinutes,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (prescriptionType != null) 'prescription_type': prescriptionType,
      if (medicationName != null) 'medication_name': medicationName,
      if (dosage != null) 'dosage': dosage,
      if (frequency != null) 'frequency': frequency,
      if (instructions != null) 'instructions': instructions,
      if (prescribingDoctor != null) 'prescribing_doctor': prescribingDoctor,
      if (pharmacy != null) 'pharmacy': pharmacy,
      if (startDate != null) 'start_date': startDate,
      if (endDate != null) 'end_date': endDate,
      if (refillsRemaining != null) 'refills_remaining': refillsRemaining,
      if (isPrescriptionActive != null)
        'is_prescription_active': isPrescriptionActive,
      if (appointmentDate != null) 'appointment_date': appointmentDate,
      if (appointmentTime != null) 'appointment_time': appointmentTime,
      if (doctorName != null) 'doctor_name': doctorName,
      if (specialty != null) 'specialty': specialty,
      if (clinicName != null) 'clinic_name': clinicName,
      if (clinicAddress != null) 'clinic_address': clinicAddress,
      if (appointmentType != null) 'appointment_type': appointmentType,
      if (reasonForVisit != null) 'reason_for_visit': reasonForVisit,
      if (appointmentStatus != null) 'appointment_status': appointmentStatus,
      if (appointmentNotes != null) 'appointment_notes': appointmentNotes,
      if (reminderSet != null) 'reminder_set': reminderSet,
      if (reminderMinutes != null) 'reminder_minutes': reminderMinutes,
      if (rowid != null) 'rowid': rowid,
    });
  }

  PrescriptionsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? prescriptionType,
    Value<String?>? medicationName,
    Value<String?>? dosage,
    Value<String?>? frequency,
    Value<String?>? instructions,
    Value<String?>? prescribingDoctor,
    Value<String?>? pharmacy,
    Value<DateTime?>? startDate,
    Value<DateTime?>? endDate,
    Value<int?>? refillsRemaining,
    Value<bool>? isPrescriptionActive,
    Value<DateTime?>? appointmentDate,
    Value<String?>? appointmentTime,
    Value<String?>? doctorName,
    Value<String?>? specialty,
    Value<String?>? clinicName,
    Value<String?>? clinicAddress,
    Value<String?>? appointmentType,
    Value<String?>? reasonForVisit,
    Value<String?>? appointmentStatus,
    Value<String?>? appointmentNotes,
    Value<bool>? reminderSet,
    Value<int?>? reminderMinutes,
    Value<int>? rowid,
  }) {
    return PrescriptionsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      prescriptionType: prescriptionType ?? this.prescriptionType,
      medicationName: medicationName ?? this.medicationName,
      dosage: dosage ?? this.dosage,
      frequency: frequency ?? this.frequency,
      instructions: instructions ?? this.instructions,
      prescribingDoctor: prescribingDoctor ?? this.prescribingDoctor,
      pharmacy: pharmacy ?? this.pharmacy,
      startDate: startDate ?? this.startDate,
      endDate: endDate ?? this.endDate,
      refillsRemaining: refillsRemaining ?? this.refillsRemaining,
      isPrescriptionActive: isPrescriptionActive ?? this.isPrescriptionActive,
      appointmentDate: appointmentDate ?? this.appointmentDate,
      appointmentTime: appointmentTime ?? this.appointmentTime,
      doctorName: doctorName ?? this.doctorName,
      specialty: specialty ?? this.specialty,
      clinicName: clinicName ?? this.clinicName,
      clinicAddress: clinicAddress ?? this.clinicAddress,
      appointmentType: appointmentType ?? this.appointmentType,
      reasonForVisit: reasonForVisit ?? this.reasonForVisit,
      appointmentStatus: appointmentStatus ?? this.appointmentStatus,
      appointmentNotes: appointmentNotes ?? this.appointmentNotes,
      reminderSet: reminderSet ?? this.reminderSet,
      reminderMinutes: reminderMinutes ?? this.reminderMinutes,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (prescriptionType.present) {
      map['prescription_type'] = Variable<String>(prescriptionType.value);
    }
    if (medicationName.present) {
      map['medication_name'] = Variable<String>(medicationName.value);
    }
    if (dosage.present) {
      map['dosage'] = Variable<String>(dosage.value);
    }
    if (frequency.present) {
      map['frequency'] = Variable<String>(frequency.value);
    }
    if (instructions.present) {
      map['instructions'] = Variable<String>(instructions.value);
    }
    if (prescribingDoctor.present) {
      map['prescribing_doctor'] = Variable<String>(prescribingDoctor.value);
    }
    if (pharmacy.present) {
      map['pharmacy'] = Variable<String>(pharmacy.value);
    }
    if (startDate.present) {
      map['start_date'] = Variable<DateTime>(startDate.value);
    }
    if (endDate.present) {
      map['end_date'] = Variable<DateTime>(endDate.value);
    }
    if (refillsRemaining.present) {
      map['refills_remaining'] = Variable<int>(refillsRemaining.value);
    }
    if (isPrescriptionActive.present) {
      map['is_prescription_active'] = Variable<bool>(
        isPrescriptionActive.value,
      );
    }
    if (appointmentDate.present) {
      map['appointment_date'] = Variable<DateTime>(appointmentDate.value);
    }
    if (appointmentTime.present) {
      map['appointment_time'] = Variable<String>(appointmentTime.value);
    }
    if (doctorName.present) {
      map['doctor_name'] = Variable<String>(doctorName.value);
    }
    if (specialty.present) {
      map['specialty'] = Variable<String>(specialty.value);
    }
    if (clinicName.present) {
      map['clinic_name'] = Variable<String>(clinicName.value);
    }
    if (clinicAddress.present) {
      map['clinic_address'] = Variable<String>(clinicAddress.value);
    }
    if (appointmentType.present) {
      map['appointment_type'] = Variable<String>(appointmentType.value);
    }
    if (reasonForVisit.present) {
      map['reason_for_visit'] = Variable<String>(reasonForVisit.value);
    }
    if (appointmentStatus.present) {
      map['appointment_status'] = Variable<String>(appointmentStatus.value);
    }
    if (appointmentNotes.present) {
      map['appointment_notes'] = Variable<String>(appointmentNotes.value);
    }
    if (reminderSet.present) {
      map['reminder_set'] = Variable<bool>(reminderSet.value);
    }
    if (reminderMinutes.present) {
      map['reminder_minutes'] = Variable<int>(reminderMinutes.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PrescriptionsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('prescriptionType: $prescriptionType, ')
          ..write('medicationName: $medicationName, ')
          ..write('dosage: $dosage, ')
          ..write('frequency: $frequency, ')
          ..write('instructions: $instructions, ')
          ..write('prescribingDoctor: $prescribingDoctor, ')
          ..write('pharmacy: $pharmacy, ')
          ..write('startDate: $startDate, ')
          ..write('endDate: $endDate, ')
          ..write('refillsRemaining: $refillsRemaining, ')
          ..write('isPrescriptionActive: $isPrescriptionActive, ')
          ..write('appointmentDate: $appointmentDate, ')
          ..write('appointmentTime: $appointmentTime, ')
          ..write('doctorName: $doctorName, ')
          ..write('specialty: $specialty, ')
          ..write('clinicName: $clinicName, ')
          ..write('clinicAddress: $clinicAddress, ')
          ..write('appointmentType: $appointmentType, ')
          ..write('reasonForVisit: $reasonForVisit, ')
          ..write('appointmentStatus: $appointmentStatus, ')
          ..write('appointmentNotes: $appointmentNotes, ')
          ..write('reminderSet: $reminderSet, ')
          ..write('reminderMinutes: $reminderMinutes, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $LabReportsTable extends LabReports
    with TableInfo<$LabReportsTable, LabReport> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $LabReportsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('lab_report'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _testNameMeta = const VerificationMeta(
    'testName',
  );
  @override
  late final GeneratedColumn<String> testName = GeneratedColumn<String>(
    'test_name',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _testResultsMeta = const VerificationMeta(
    'testResults',
  );
  @override
  late final GeneratedColumn<String> testResults = GeneratedColumn<String>(
    'test_results',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _referenceRangeMeta = const VerificationMeta(
    'referenceRange',
  );
  @override
  late final GeneratedColumn<String> referenceRange = GeneratedColumn<String>(
    'reference_range',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _orderingPhysicianMeta = const VerificationMeta(
    'orderingPhysician',
  );
  @override
  late final GeneratedColumn<String> orderingPhysician =
      GeneratedColumn<String>(
        'ordering_physician',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _labFacilityMeta = const VerificationMeta(
    'labFacility',
  );
  @override
  late final GeneratedColumn<String> labFacility = GeneratedColumn<String>(
    'lab_facility',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _testStatusMeta = const VerificationMeta(
    'testStatus',
  );
  @override
  late final GeneratedColumn<String> testStatus = GeneratedColumn<String>(
    'test_status',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _collectionDateMeta = const VerificationMeta(
    'collectionDate',
  );
  @override
  late final GeneratedColumn<DateTime> collectionDate =
      GeneratedColumn<DateTime>(
        'collection_date',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _isCriticalMeta = const VerificationMeta(
    'isCritical',
  );
  @override
  late final GeneratedColumn<bool> isCritical = GeneratedColumn<bool>(
    'is_critical',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_critical" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    testName,
    testResults,
    referenceRange,
    orderingPhysician,
    labFacility,
    testStatus,
    collectionDate,
    isCritical,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'lab_reports';
  @override
  VerificationContext validateIntegrity(
    Insertable<LabReport> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('test_name')) {
      context.handle(
        _testNameMeta,
        testName.isAcceptableOrUnknown(data['test_name']!, _testNameMeta),
      );
    } else if (isInserting) {
      context.missing(_testNameMeta);
    }
    if (data.containsKey('test_results')) {
      context.handle(
        _testResultsMeta,
        testResults.isAcceptableOrUnknown(
          data['test_results']!,
          _testResultsMeta,
        ),
      );
    }
    if (data.containsKey('reference_range')) {
      context.handle(
        _referenceRangeMeta,
        referenceRange.isAcceptableOrUnknown(
          data['reference_range']!,
          _referenceRangeMeta,
        ),
      );
    }
    if (data.containsKey('ordering_physician')) {
      context.handle(
        _orderingPhysicianMeta,
        orderingPhysician.isAcceptableOrUnknown(
          data['ordering_physician']!,
          _orderingPhysicianMeta,
        ),
      );
    }
    if (data.containsKey('lab_facility')) {
      context.handle(
        _labFacilityMeta,
        labFacility.isAcceptableOrUnknown(
          data['lab_facility']!,
          _labFacilityMeta,
        ),
      );
    }
    if (data.containsKey('test_status')) {
      context.handle(
        _testStatusMeta,
        testStatus.isAcceptableOrUnknown(data['test_status']!, _testStatusMeta),
      );
    } else if (isInserting) {
      context.missing(_testStatusMeta);
    }
    if (data.containsKey('collection_date')) {
      context.handle(
        _collectionDateMeta,
        collectionDate.isAcceptableOrUnknown(
          data['collection_date']!,
          _collectionDateMeta,
        ),
      );
    }
    if (data.containsKey('is_critical')) {
      context.handle(
        _isCriticalMeta,
        isCritical.isAcceptableOrUnknown(data['is_critical']!, _isCriticalMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  LabReport map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return LabReport(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      testName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}test_name'],
      )!,
      testResults: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}test_results'],
      ),
      referenceRange: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}reference_range'],
      ),
      orderingPhysician: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ordering_physician'],
      ),
      labFacility: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}lab_facility'],
      ),
      testStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}test_status'],
      )!,
      collectionDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}collection_date'],
      ),
      isCritical: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_critical'],
      )!,
    );
  }

  @override
  $LabReportsTable createAlias(String alias) {
    return $LabReportsTable(attachedDatabase, alias);
  }
}

class LabReport extends DataClass implements Insertable<LabReport> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String testName;
  final String? testResults;
  final String? referenceRange;
  final String? orderingPhysician;
  final String? labFacility;
  final String testStatus;
  final DateTime? collectionDate;
  final bool isCritical;
  const LabReport({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.testName,
    this.testResults,
    this.referenceRange,
    this.orderingPhysician,
    this.labFacility,
    required this.testStatus,
    this.collectionDate,
    required this.isCritical,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['test_name'] = Variable<String>(testName);
    if (!nullToAbsent || testResults != null) {
      map['test_results'] = Variable<String>(testResults);
    }
    if (!nullToAbsent || referenceRange != null) {
      map['reference_range'] = Variable<String>(referenceRange);
    }
    if (!nullToAbsent || orderingPhysician != null) {
      map['ordering_physician'] = Variable<String>(orderingPhysician);
    }
    if (!nullToAbsent || labFacility != null) {
      map['lab_facility'] = Variable<String>(labFacility);
    }
    map['test_status'] = Variable<String>(testStatus);
    if (!nullToAbsent || collectionDate != null) {
      map['collection_date'] = Variable<DateTime>(collectionDate);
    }
    map['is_critical'] = Variable<bool>(isCritical);
    return map;
  }

  LabReportsCompanion toCompanion(bool nullToAbsent) {
    return LabReportsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      testName: Value(testName),
      testResults: testResults == null && nullToAbsent
          ? const Value.absent()
          : Value(testResults),
      referenceRange: referenceRange == null && nullToAbsent
          ? const Value.absent()
          : Value(referenceRange),
      orderingPhysician: orderingPhysician == null && nullToAbsent
          ? const Value.absent()
          : Value(orderingPhysician),
      labFacility: labFacility == null && nullToAbsent
          ? const Value.absent()
          : Value(labFacility),
      testStatus: Value(testStatus),
      collectionDate: collectionDate == null && nullToAbsent
          ? const Value.absent()
          : Value(collectionDate),
      isCritical: Value(isCritical),
    );
  }

  factory LabReport.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return LabReport(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      testName: serializer.fromJson<String>(json['testName']),
      testResults: serializer.fromJson<String?>(json['testResults']),
      referenceRange: serializer.fromJson<String?>(json['referenceRange']),
      orderingPhysician: serializer.fromJson<String?>(
        json['orderingPhysician'],
      ),
      labFacility: serializer.fromJson<String?>(json['labFacility']),
      testStatus: serializer.fromJson<String>(json['testStatus']),
      collectionDate: serializer.fromJson<DateTime?>(json['collectionDate']),
      isCritical: serializer.fromJson<bool>(json['isCritical']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'testName': serializer.toJson<String>(testName),
      'testResults': serializer.toJson<String?>(testResults),
      'referenceRange': serializer.toJson<String?>(referenceRange),
      'orderingPhysician': serializer.toJson<String?>(orderingPhysician),
      'labFacility': serializer.toJson<String?>(labFacility),
      'testStatus': serializer.toJson<String>(testStatus),
      'collectionDate': serializer.toJson<DateTime?>(collectionDate),
      'isCritical': serializer.toJson<bool>(isCritical),
    };
  }

  LabReport copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? testName,
    Value<String?> testResults = const Value.absent(),
    Value<String?> referenceRange = const Value.absent(),
    Value<String?> orderingPhysician = const Value.absent(),
    Value<String?> labFacility = const Value.absent(),
    String? testStatus,
    Value<DateTime?> collectionDate = const Value.absent(),
    bool? isCritical,
  }) => LabReport(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    testName: testName ?? this.testName,
    testResults: testResults.present ? testResults.value : this.testResults,
    referenceRange: referenceRange.present
        ? referenceRange.value
        : this.referenceRange,
    orderingPhysician: orderingPhysician.present
        ? orderingPhysician.value
        : this.orderingPhysician,
    labFacility: labFacility.present ? labFacility.value : this.labFacility,
    testStatus: testStatus ?? this.testStatus,
    collectionDate: collectionDate.present
        ? collectionDate.value
        : this.collectionDate,
    isCritical: isCritical ?? this.isCritical,
  );
  LabReport copyWithCompanion(LabReportsCompanion data) {
    return LabReport(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      testName: data.testName.present ? data.testName.value : this.testName,
      testResults: data.testResults.present
          ? data.testResults.value
          : this.testResults,
      referenceRange: data.referenceRange.present
          ? data.referenceRange.value
          : this.referenceRange,
      orderingPhysician: data.orderingPhysician.present
          ? data.orderingPhysician.value
          : this.orderingPhysician,
      labFacility: data.labFacility.present
          ? data.labFacility.value
          : this.labFacility,
      testStatus: data.testStatus.present
          ? data.testStatus.value
          : this.testStatus,
      collectionDate: data.collectionDate.present
          ? data.collectionDate.value
          : this.collectionDate,
      isCritical: data.isCritical.present
          ? data.isCritical.value
          : this.isCritical,
    );
  }

  @override
  String toString() {
    return (StringBuffer('LabReport(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('testName: $testName, ')
          ..write('testResults: $testResults, ')
          ..write('referenceRange: $referenceRange, ')
          ..write('orderingPhysician: $orderingPhysician, ')
          ..write('labFacility: $labFacility, ')
          ..write('testStatus: $testStatus, ')
          ..write('collectionDate: $collectionDate, ')
          ..write('isCritical: $isCritical')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    testName,
    testResults,
    referenceRange,
    orderingPhysician,
    labFacility,
    testStatus,
    collectionDate,
    isCritical,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is LabReport &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.testName == this.testName &&
          other.testResults == this.testResults &&
          other.referenceRange == this.referenceRange &&
          other.orderingPhysician == this.orderingPhysician &&
          other.labFacility == this.labFacility &&
          other.testStatus == this.testStatus &&
          other.collectionDate == this.collectionDate &&
          other.isCritical == this.isCritical);
}

class LabReportsCompanion extends UpdateCompanion<LabReport> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> testName;
  final Value<String?> testResults;
  final Value<String?> referenceRange;
  final Value<String?> orderingPhysician;
  final Value<String?> labFacility;
  final Value<String> testStatus;
  final Value<DateTime?> collectionDate;
  final Value<bool> isCritical;
  final Value<int> rowid;
  const LabReportsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.testName = const Value.absent(),
    this.testResults = const Value.absent(),
    this.referenceRange = const Value.absent(),
    this.orderingPhysician = const Value.absent(),
    this.labFacility = const Value.absent(),
    this.testStatus = const Value.absent(),
    this.collectionDate = const Value.absent(),
    this.isCritical = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  LabReportsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String testName,
    this.testResults = const Value.absent(),
    this.referenceRange = const Value.absent(),
    this.orderingPhysician = const Value.absent(),
    this.labFacility = const Value.absent(),
    required String testStatus,
    this.collectionDate = const Value.absent(),
    this.isCritical = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       testName = Value(testName),
       testStatus = Value(testStatus);
  static Insertable<LabReport> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? testName,
    Expression<String>? testResults,
    Expression<String>? referenceRange,
    Expression<String>? orderingPhysician,
    Expression<String>? labFacility,
    Expression<String>? testStatus,
    Expression<DateTime>? collectionDate,
    Expression<bool>? isCritical,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (testName != null) 'test_name': testName,
      if (testResults != null) 'test_results': testResults,
      if (referenceRange != null) 'reference_range': referenceRange,
      if (orderingPhysician != null) 'ordering_physician': orderingPhysician,
      if (labFacility != null) 'lab_facility': labFacility,
      if (testStatus != null) 'test_status': testStatus,
      if (collectionDate != null) 'collection_date': collectionDate,
      if (isCritical != null) 'is_critical': isCritical,
      if (rowid != null) 'rowid': rowid,
    });
  }

  LabReportsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? testName,
    Value<String?>? testResults,
    Value<String?>? referenceRange,
    Value<String?>? orderingPhysician,
    Value<String?>? labFacility,
    Value<String>? testStatus,
    Value<DateTime?>? collectionDate,
    Value<bool>? isCritical,
    Value<int>? rowid,
  }) {
    return LabReportsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      testName: testName ?? this.testName,
      testResults: testResults ?? this.testResults,
      referenceRange: referenceRange ?? this.referenceRange,
      orderingPhysician: orderingPhysician ?? this.orderingPhysician,
      labFacility: labFacility ?? this.labFacility,
      testStatus: testStatus ?? this.testStatus,
      collectionDate: collectionDate ?? this.collectionDate,
      isCritical: isCritical ?? this.isCritical,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (testName.present) {
      map['test_name'] = Variable<String>(testName.value);
    }
    if (testResults.present) {
      map['test_results'] = Variable<String>(testResults.value);
    }
    if (referenceRange.present) {
      map['reference_range'] = Variable<String>(referenceRange.value);
    }
    if (orderingPhysician.present) {
      map['ordering_physician'] = Variable<String>(orderingPhysician.value);
    }
    if (labFacility.present) {
      map['lab_facility'] = Variable<String>(labFacility.value);
    }
    if (testStatus.present) {
      map['test_status'] = Variable<String>(testStatus.value);
    }
    if (collectionDate.present) {
      map['collection_date'] = Variable<DateTime>(collectionDate.value);
    }
    if (isCritical.present) {
      map['is_critical'] = Variable<bool>(isCritical.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('LabReportsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('testName: $testName, ')
          ..write('testResults: $testResults, ')
          ..write('referenceRange: $referenceRange, ')
          ..write('orderingPhysician: $orderingPhysician, ')
          ..write('labFacility: $labFacility, ')
          ..write('testStatus: $testStatus, ')
          ..write('collectionDate: $collectionDate, ')
          ..write('isCritical: $isCritical, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $MedicationsTable extends Medications
    with TableInfo<$MedicationsTable, Medication> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MedicationsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('medication'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _medicationNameMeta = const VerificationMeta(
    'medicationName',
  );
  @override
  late final GeneratedColumn<String> medicationName = GeneratedColumn<String>(
    'medication_name',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _dosageMeta = const VerificationMeta('dosage');
  @override
  late final GeneratedColumn<String> dosage = GeneratedColumn<String>(
    'dosage',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _frequencyMeta = const VerificationMeta(
    'frequency',
  );
  @override
  late final GeneratedColumn<String> frequency = GeneratedColumn<String>(
    'frequency',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _scheduleMeta = const VerificationMeta(
    'schedule',
  );
  @override
  late final GeneratedColumn<String> schedule = GeneratedColumn<String>(
    'schedule',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _startDateMeta = const VerificationMeta(
    'startDate',
  );
  @override
  late final GeneratedColumn<DateTime> startDate = GeneratedColumn<DateTime>(
    'start_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _endDateMeta = const VerificationMeta(
    'endDate',
  );
  @override
  late final GeneratedColumn<DateTime> endDate = GeneratedColumn<DateTime>(
    'end_date',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _instructionsMeta = const VerificationMeta(
    'instructions',
  );
  @override
  late final GeneratedColumn<String> instructions = GeneratedColumn<String>(
    'instructions',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _reminderEnabledMeta = const VerificationMeta(
    'reminderEnabled',
  );
  @override
  late final GeneratedColumn<bool> reminderEnabled = GeneratedColumn<bool>(
    'reminder_enabled',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("reminder_enabled" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _pillCountMeta = const VerificationMeta(
    'pillCount',
  );
  @override
  late final GeneratedColumn<int> pillCount = GeneratedColumn<int>(
    'pill_count',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _statusMeta = const VerificationMeta('status');
  @override
  late final GeneratedColumn<String> status = GeneratedColumn<String>(
    'status',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    medicationName,
    dosage,
    frequency,
    schedule,
    startDate,
    endDate,
    instructions,
    reminderEnabled,
    pillCount,
    status,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'medications';
  @override
  VerificationContext validateIntegrity(
    Insertable<Medication> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('medication_name')) {
      context.handle(
        _medicationNameMeta,
        medicationName.isAcceptableOrUnknown(
          data['medication_name']!,
          _medicationNameMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_medicationNameMeta);
    }
    if (data.containsKey('dosage')) {
      context.handle(
        _dosageMeta,
        dosage.isAcceptableOrUnknown(data['dosage']!, _dosageMeta),
      );
    } else if (isInserting) {
      context.missing(_dosageMeta);
    }
    if (data.containsKey('frequency')) {
      context.handle(
        _frequencyMeta,
        frequency.isAcceptableOrUnknown(data['frequency']!, _frequencyMeta),
      );
    } else if (isInserting) {
      context.missing(_frequencyMeta);
    }
    if (data.containsKey('schedule')) {
      context.handle(
        _scheduleMeta,
        schedule.isAcceptableOrUnknown(data['schedule']!, _scheduleMeta),
      );
    } else if (isInserting) {
      context.missing(_scheduleMeta);
    }
    if (data.containsKey('start_date')) {
      context.handle(
        _startDateMeta,
        startDate.isAcceptableOrUnknown(data['start_date']!, _startDateMeta),
      );
    } else if (isInserting) {
      context.missing(_startDateMeta);
    }
    if (data.containsKey('end_date')) {
      context.handle(
        _endDateMeta,
        endDate.isAcceptableOrUnknown(data['end_date']!, _endDateMeta),
      );
    }
    if (data.containsKey('instructions')) {
      context.handle(
        _instructionsMeta,
        instructions.isAcceptableOrUnknown(
          data['instructions']!,
          _instructionsMeta,
        ),
      );
    }
    if (data.containsKey('reminder_enabled')) {
      context.handle(
        _reminderEnabledMeta,
        reminderEnabled.isAcceptableOrUnknown(
          data['reminder_enabled']!,
          _reminderEnabledMeta,
        ),
      );
    }
    if (data.containsKey('pill_count')) {
      context.handle(
        _pillCountMeta,
        pillCount.isAcceptableOrUnknown(data['pill_count']!, _pillCountMeta),
      );
    }
    if (data.containsKey('status')) {
      context.handle(
        _statusMeta,
        status.isAcceptableOrUnknown(data['status']!, _statusMeta),
      );
    } else if (isInserting) {
      context.missing(_statusMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Medication map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return Medication(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      medicationName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}medication_name'],
      )!,
      dosage: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}dosage'],
      )!,
      frequency: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}frequency'],
      )!,
      schedule: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}schedule'],
      )!,
      startDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}start_date'],
      )!,
      endDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}end_date'],
      ),
      instructions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}instructions'],
      ),
      reminderEnabled: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}reminder_enabled'],
      )!,
      pillCount: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}pill_count'],
      ),
      status: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}status'],
      )!,
    );
  }

  @override
  $MedicationsTable createAlias(String alias) {
    return $MedicationsTable(attachedDatabase, alias);
  }
}

class Medication extends DataClass implements Insertable<Medication> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String medicationName;
  final String dosage;
  final String frequency;
  final String schedule;
  final DateTime startDate;
  final DateTime? endDate;
  final String? instructions;
  final bool reminderEnabled;
  final int? pillCount;
  final String status;
  const Medication({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.medicationName,
    required this.dosage,
    required this.frequency,
    required this.schedule,
    required this.startDate,
    this.endDate,
    this.instructions,
    required this.reminderEnabled,
    this.pillCount,
    required this.status,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['medication_name'] = Variable<String>(medicationName);
    map['dosage'] = Variable<String>(dosage);
    map['frequency'] = Variable<String>(frequency);
    map['schedule'] = Variable<String>(schedule);
    map['start_date'] = Variable<DateTime>(startDate);
    if (!nullToAbsent || endDate != null) {
      map['end_date'] = Variable<DateTime>(endDate);
    }
    if (!nullToAbsent || instructions != null) {
      map['instructions'] = Variable<String>(instructions);
    }
    map['reminder_enabled'] = Variable<bool>(reminderEnabled);
    if (!nullToAbsent || pillCount != null) {
      map['pill_count'] = Variable<int>(pillCount);
    }
    map['status'] = Variable<String>(status);
    return map;
  }

  MedicationsCompanion toCompanion(bool nullToAbsent) {
    return MedicationsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      medicationName: Value(medicationName),
      dosage: Value(dosage),
      frequency: Value(frequency),
      schedule: Value(schedule),
      startDate: Value(startDate),
      endDate: endDate == null && nullToAbsent
          ? const Value.absent()
          : Value(endDate),
      instructions: instructions == null && nullToAbsent
          ? const Value.absent()
          : Value(instructions),
      reminderEnabled: Value(reminderEnabled),
      pillCount: pillCount == null && nullToAbsent
          ? const Value.absent()
          : Value(pillCount),
      status: Value(status),
    );
  }

  factory Medication.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Medication(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      medicationName: serializer.fromJson<String>(json['medicationName']),
      dosage: serializer.fromJson<String>(json['dosage']),
      frequency: serializer.fromJson<String>(json['frequency']),
      schedule: serializer.fromJson<String>(json['schedule']),
      startDate: serializer.fromJson<DateTime>(json['startDate']),
      endDate: serializer.fromJson<DateTime?>(json['endDate']),
      instructions: serializer.fromJson<String?>(json['instructions']),
      reminderEnabled: serializer.fromJson<bool>(json['reminderEnabled']),
      pillCount: serializer.fromJson<int?>(json['pillCount']),
      status: serializer.fromJson<String>(json['status']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'medicationName': serializer.toJson<String>(medicationName),
      'dosage': serializer.toJson<String>(dosage),
      'frequency': serializer.toJson<String>(frequency),
      'schedule': serializer.toJson<String>(schedule),
      'startDate': serializer.toJson<DateTime>(startDate),
      'endDate': serializer.toJson<DateTime?>(endDate),
      'instructions': serializer.toJson<String?>(instructions),
      'reminderEnabled': serializer.toJson<bool>(reminderEnabled),
      'pillCount': serializer.toJson<int?>(pillCount),
      'status': serializer.toJson<String>(status),
    };
  }

  Medication copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? medicationName,
    String? dosage,
    String? frequency,
    String? schedule,
    DateTime? startDate,
    Value<DateTime?> endDate = const Value.absent(),
    Value<String?> instructions = const Value.absent(),
    bool? reminderEnabled,
    Value<int?> pillCount = const Value.absent(),
    String? status,
  }) => Medication(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    medicationName: medicationName ?? this.medicationName,
    dosage: dosage ?? this.dosage,
    frequency: frequency ?? this.frequency,
    schedule: schedule ?? this.schedule,
    startDate: startDate ?? this.startDate,
    endDate: endDate.present ? endDate.value : this.endDate,
    instructions: instructions.present ? instructions.value : this.instructions,
    reminderEnabled: reminderEnabled ?? this.reminderEnabled,
    pillCount: pillCount.present ? pillCount.value : this.pillCount,
    status: status ?? this.status,
  );
  Medication copyWithCompanion(MedicationsCompanion data) {
    return Medication(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      medicationName: data.medicationName.present
          ? data.medicationName.value
          : this.medicationName,
      dosage: data.dosage.present ? data.dosage.value : this.dosage,
      frequency: data.frequency.present ? data.frequency.value : this.frequency,
      schedule: data.schedule.present ? data.schedule.value : this.schedule,
      startDate: data.startDate.present ? data.startDate.value : this.startDate,
      endDate: data.endDate.present ? data.endDate.value : this.endDate,
      instructions: data.instructions.present
          ? data.instructions.value
          : this.instructions,
      reminderEnabled: data.reminderEnabled.present
          ? data.reminderEnabled.value
          : this.reminderEnabled,
      pillCount: data.pillCount.present ? data.pillCount.value : this.pillCount,
      status: data.status.present ? data.status.value : this.status,
    );
  }

  @override
  String toString() {
    return (StringBuffer('Medication(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('medicationName: $medicationName, ')
          ..write('dosage: $dosage, ')
          ..write('frequency: $frequency, ')
          ..write('schedule: $schedule, ')
          ..write('startDate: $startDate, ')
          ..write('endDate: $endDate, ')
          ..write('instructions: $instructions, ')
          ..write('reminderEnabled: $reminderEnabled, ')
          ..write('pillCount: $pillCount, ')
          ..write('status: $status')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    medicationName,
    dosage,
    frequency,
    schedule,
    startDate,
    endDate,
    instructions,
    reminderEnabled,
    pillCount,
    status,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Medication &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.medicationName == this.medicationName &&
          other.dosage == this.dosage &&
          other.frequency == this.frequency &&
          other.schedule == this.schedule &&
          other.startDate == this.startDate &&
          other.endDate == this.endDate &&
          other.instructions == this.instructions &&
          other.reminderEnabled == this.reminderEnabled &&
          other.pillCount == this.pillCount &&
          other.status == this.status);
}

class MedicationsCompanion extends UpdateCompanion<Medication> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> medicationName;
  final Value<String> dosage;
  final Value<String> frequency;
  final Value<String> schedule;
  final Value<DateTime> startDate;
  final Value<DateTime?> endDate;
  final Value<String?> instructions;
  final Value<bool> reminderEnabled;
  final Value<int?> pillCount;
  final Value<String> status;
  final Value<int> rowid;
  const MedicationsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.medicationName = const Value.absent(),
    this.dosage = const Value.absent(),
    this.frequency = const Value.absent(),
    this.schedule = const Value.absent(),
    this.startDate = const Value.absent(),
    this.endDate = const Value.absent(),
    this.instructions = const Value.absent(),
    this.reminderEnabled = const Value.absent(),
    this.pillCount = const Value.absent(),
    this.status = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  MedicationsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String medicationName,
    required String dosage,
    required String frequency,
    required String schedule,
    required DateTime startDate,
    this.endDate = const Value.absent(),
    this.instructions = const Value.absent(),
    this.reminderEnabled = const Value.absent(),
    this.pillCount = const Value.absent(),
    required String status,
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       medicationName = Value(medicationName),
       dosage = Value(dosage),
       frequency = Value(frequency),
       schedule = Value(schedule),
       startDate = Value(startDate),
       status = Value(status);
  static Insertable<Medication> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? medicationName,
    Expression<String>? dosage,
    Expression<String>? frequency,
    Expression<String>? schedule,
    Expression<DateTime>? startDate,
    Expression<DateTime>? endDate,
    Expression<String>? instructions,
    Expression<bool>? reminderEnabled,
    Expression<int>? pillCount,
    Expression<String>? status,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (medicationName != null) 'medication_name': medicationName,
      if (dosage != null) 'dosage': dosage,
      if (frequency != null) 'frequency': frequency,
      if (schedule != null) 'schedule': schedule,
      if (startDate != null) 'start_date': startDate,
      if (endDate != null) 'end_date': endDate,
      if (instructions != null) 'instructions': instructions,
      if (reminderEnabled != null) 'reminder_enabled': reminderEnabled,
      if (pillCount != null) 'pill_count': pillCount,
      if (status != null) 'status': status,
      if (rowid != null) 'rowid': rowid,
    });
  }

  MedicationsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? medicationName,
    Value<String>? dosage,
    Value<String>? frequency,
    Value<String>? schedule,
    Value<DateTime>? startDate,
    Value<DateTime?>? endDate,
    Value<String?>? instructions,
    Value<bool>? reminderEnabled,
    Value<int?>? pillCount,
    Value<String>? status,
    Value<int>? rowid,
  }) {
    return MedicationsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      medicationName: medicationName ?? this.medicationName,
      dosage: dosage ?? this.dosage,
      frequency: frequency ?? this.frequency,
      schedule: schedule ?? this.schedule,
      startDate: startDate ?? this.startDate,
      endDate: endDate ?? this.endDate,
      instructions: instructions ?? this.instructions,
      reminderEnabled: reminderEnabled ?? this.reminderEnabled,
      pillCount: pillCount ?? this.pillCount,
      status: status ?? this.status,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (medicationName.present) {
      map['medication_name'] = Variable<String>(medicationName.value);
    }
    if (dosage.present) {
      map['dosage'] = Variable<String>(dosage.value);
    }
    if (frequency.present) {
      map['frequency'] = Variable<String>(frequency.value);
    }
    if (schedule.present) {
      map['schedule'] = Variable<String>(schedule.value);
    }
    if (startDate.present) {
      map['start_date'] = Variable<DateTime>(startDate.value);
    }
    if (endDate.present) {
      map['end_date'] = Variable<DateTime>(endDate.value);
    }
    if (instructions.present) {
      map['instructions'] = Variable<String>(instructions.value);
    }
    if (reminderEnabled.present) {
      map['reminder_enabled'] = Variable<bool>(reminderEnabled.value);
    }
    if (pillCount.present) {
      map['pill_count'] = Variable<int>(pillCount.value);
    }
    if (status.present) {
      map['status'] = Variable<String>(status.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MedicationsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('medicationName: $medicationName, ')
          ..write('dosage: $dosage, ')
          ..write('frequency: $frequency, ')
          ..write('schedule: $schedule, ')
          ..write('startDate: $startDate, ')
          ..write('endDate: $endDate, ')
          ..write('instructions: $instructions, ')
          ..write('reminderEnabled: $reminderEnabled, ')
          ..write('pillCount: $pillCount, ')
          ..write('status: $status, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $VaccinationsTable extends Vaccinations
    with TableInfo<$VaccinationsTable, Vaccination> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $VaccinationsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('vaccination'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _vaccineNameMeta = const VerificationMeta(
    'vaccineName',
  );
  @override
  late final GeneratedColumn<String> vaccineName = GeneratedColumn<String>(
    'vaccine_name',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _manufacturerMeta = const VerificationMeta(
    'manufacturer',
  );
  @override
  late final GeneratedColumn<String> manufacturer = GeneratedColumn<String>(
    'manufacturer',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _batchNumberMeta = const VerificationMeta(
    'batchNumber',
  );
  @override
  late final GeneratedColumn<String> batchNumber = GeneratedColumn<String>(
    'batch_number',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _administrationDateMeta =
      const VerificationMeta('administrationDate');
  @override
  late final GeneratedColumn<DateTime> administrationDate =
      GeneratedColumn<DateTime>(
        'administration_date',
        aliasedName,
        false,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _administeredByMeta = const VerificationMeta(
    'administeredBy',
  );
  @override
  late final GeneratedColumn<String> administeredBy = GeneratedColumn<String>(
    'administered_by',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _siteMeta = const VerificationMeta('site');
  @override
  late final GeneratedColumn<String> site = GeneratedColumn<String>(
    'site',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nextDueDateMeta = const VerificationMeta(
    'nextDueDate',
  );
  @override
  late final GeneratedColumn<DateTime> nextDueDate = GeneratedColumn<DateTime>(
    'next_due_date',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _doseNumberMeta = const VerificationMeta(
    'doseNumber',
  );
  @override
  late final GeneratedColumn<int> doseNumber = GeneratedColumn<int>(
    'dose_number',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _isCompleteMeta = const VerificationMeta(
    'isComplete',
  );
  @override
  late final GeneratedColumn<bool> isComplete = GeneratedColumn<bool>(
    'is_complete',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_complete" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    vaccineName,
    manufacturer,
    batchNumber,
    administrationDate,
    administeredBy,
    site,
    nextDueDate,
    doseNumber,
    isComplete,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'vaccinations';
  @override
  VerificationContext validateIntegrity(
    Insertable<Vaccination> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('vaccine_name')) {
      context.handle(
        _vaccineNameMeta,
        vaccineName.isAcceptableOrUnknown(
          data['vaccine_name']!,
          _vaccineNameMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_vaccineNameMeta);
    }
    if (data.containsKey('manufacturer')) {
      context.handle(
        _manufacturerMeta,
        manufacturer.isAcceptableOrUnknown(
          data['manufacturer']!,
          _manufacturerMeta,
        ),
      );
    }
    if (data.containsKey('batch_number')) {
      context.handle(
        _batchNumberMeta,
        batchNumber.isAcceptableOrUnknown(
          data['batch_number']!,
          _batchNumberMeta,
        ),
      );
    }
    if (data.containsKey('administration_date')) {
      context.handle(
        _administrationDateMeta,
        administrationDate.isAcceptableOrUnknown(
          data['administration_date']!,
          _administrationDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_administrationDateMeta);
    }
    if (data.containsKey('administered_by')) {
      context.handle(
        _administeredByMeta,
        administeredBy.isAcceptableOrUnknown(
          data['administered_by']!,
          _administeredByMeta,
        ),
      );
    }
    if (data.containsKey('site')) {
      context.handle(
        _siteMeta,
        site.isAcceptableOrUnknown(data['site']!, _siteMeta),
      );
    }
    if (data.containsKey('next_due_date')) {
      context.handle(
        _nextDueDateMeta,
        nextDueDate.isAcceptableOrUnknown(
          data['next_due_date']!,
          _nextDueDateMeta,
        ),
      );
    }
    if (data.containsKey('dose_number')) {
      context.handle(
        _doseNumberMeta,
        doseNumber.isAcceptableOrUnknown(data['dose_number']!, _doseNumberMeta),
      );
    }
    if (data.containsKey('is_complete')) {
      context.handle(
        _isCompleteMeta,
        isComplete.isAcceptableOrUnknown(data['is_complete']!, _isCompleteMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Vaccination map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return Vaccination(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      vaccineName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}vaccine_name'],
      )!,
      manufacturer: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}manufacturer'],
      ),
      batchNumber: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}batch_number'],
      ),
      administrationDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}administration_date'],
      )!,
      administeredBy: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}administered_by'],
      ),
      site: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}site'],
      ),
      nextDueDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}next_due_date'],
      ),
      doseNumber: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}dose_number'],
      ),
      isComplete: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_complete'],
      )!,
    );
  }

  @override
  $VaccinationsTable createAlias(String alias) {
    return $VaccinationsTable(attachedDatabase, alias);
  }
}

class Vaccination extends DataClass implements Insertable<Vaccination> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String vaccineName;
  final String? manufacturer;
  final String? batchNumber;
  final DateTime administrationDate;
  final String? administeredBy;
  final String? site;
  final DateTime? nextDueDate;
  final int? doseNumber;
  final bool isComplete;
  const Vaccination({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.vaccineName,
    this.manufacturer,
    this.batchNumber,
    required this.administrationDate,
    this.administeredBy,
    this.site,
    this.nextDueDate,
    this.doseNumber,
    required this.isComplete,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['vaccine_name'] = Variable<String>(vaccineName);
    if (!nullToAbsent || manufacturer != null) {
      map['manufacturer'] = Variable<String>(manufacturer);
    }
    if (!nullToAbsent || batchNumber != null) {
      map['batch_number'] = Variable<String>(batchNumber);
    }
    map['administration_date'] = Variable<DateTime>(administrationDate);
    if (!nullToAbsent || administeredBy != null) {
      map['administered_by'] = Variable<String>(administeredBy);
    }
    if (!nullToAbsent || site != null) {
      map['site'] = Variable<String>(site);
    }
    if (!nullToAbsent || nextDueDate != null) {
      map['next_due_date'] = Variable<DateTime>(nextDueDate);
    }
    if (!nullToAbsent || doseNumber != null) {
      map['dose_number'] = Variable<int>(doseNumber);
    }
    map['is_complete'] = Variable<bool>(isComplete);
    return map;
  }

  VaccinationsCompanion toCompanion(bool nullToAbsent) {
    return VaccinationsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      vaccineName: Value(vaccineName),
      manufacturer: manufacturer == null && nullToAbsent
          ? const Value.absent()
          : Value(manufacturer),
      batchNumber: batchNumber == null && nullToAbsent
          ? const Value.absent()
          : Value(batchNumber),
      administrationDate: Value(administrationDate),
      administeredBy: administeredBy == null && nullToAbsent
          ? const Value.absent()
          : Value(administeredBy),
      site: site == null && nullToAbsent ? const Value.absent() : Value(site),
      nextDueDate: nextDueDate == null && nullToAbsent
          ? const Value.absent()
          : Value(nextDueDate),
      doseNumber: doseNumber == null && nullToAbsent
          ? const Value.absent()
          : Value(doseNumber),
      isComplete: Value(isComplete),
    );
  }

  factory Vaccination.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Vaccination(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      vaccineName: serializer.fromJson<String>(json['vaccineName']),
      manufacturer: serializer.fromJson<String?>(json['manufacturer']),
      batchNumber: serializer.fromJson<String?>(json['batchNumber']),
      administrationDate: serializer.fromJson<DateTime>(
        json['administrationDate'],
      ),
      administeredBy: serializer.fromJson<String?>(json['administeredBy']),
      site: serializer.fromJson<String?>(json['site']),
      nextDueDate: serializer.fromJson<DateTime?>(json['nextDueDate']),
      doseNumber: serializer.fromJson<int?>(json['doseNumber']),
      isComplete: serializer.fromJson<bool>(json['isComplete']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'vaccineName': serializer.toJson<String>(vaccineName),
      'manufacturer': serializer.toJson<String?>(manufacturer),
      'batchNumber': serializer.toJson<String?>(batchNumber),
      'administrationDate': serializer.toJson<DateTime>(administrationDate),
      'administeredBy': serializer.toJson<String?>(administeredBy),
      'site': serializer.toJson<String?>(site),
      'nextDueDate': serializer.toJson<DateTime?>(nextDueDate),
      'doseNumber': serializer.toJson<int?>(doseNumber),
      'isComplete': serializer.toJson<bool>(isComplete),
    };
  }

  Vaccination copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? vaccineName,
    Value<String?> manufacturer = const Value.absent(),
    Value<String?> batchNumber = const Value.absent(),
    DateTime? administrationDate,
    Value<String?> administeredBy = const Value.absent(),
    Value<String?> site = const Value.absent(),
    Value<DateTime?> nextDueDate = const Value.absent(),
    Value<int?> doseNumber = const Value.absent(),
    bool? isComplete,
  }) => Vaccination(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    vaccineName: vaccineName ?? this.vaccineName,
    manufacturer: manufacturer.present ? manufacturer.value : this.manufacturer,
    batchNumber: batchNumber.present ? batchNumber.value : this.batchNumber,
    administrationDate: administrationDate ?? this.administrationDate,
    administeredBy: administeredBy.present
        ? administeredBy.value
        : this.administeredBy,
    site: site.present ? site.value : this.site,
    nextDueDate: nextDueDate.present ? nextDueDate.value : this.nextDueDate,
    doseNumber: doseNumber.present ? doseNumber.value : this.doseNumber,
    isComplete: isComplete ?? this.isComplete,
  );
  Vaccination copyWithCompanion(VaccinationsCompanion data) {
    return Vaccination(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      vaccineName: data.vaccineName.present
          ? data.vaccineName.value
          : this.vaccineName,
      manufacturer: data.manufacturer.present
          ? data.manufacturer.value
          : this.manufacturer,
      batchNumber: data.batchNumber.present
          ? data.batchNumber.value
          : this.batchNumber,
      administrationDate: data.administrationDate.present
          ? data.administrationDate.value
          : this.administrationDate,
      administeredBy: data.administeredBy.present
          ? data.administeredBy.value
          : this.administeredBy,
      site: data.site.present ? data.site.value : this.site,
      nextDueDate: data.nextDueDate.present
          ? data.nextDueDate.value
          : this.nextDueDate,
      doseNumber: data.doseNumber.present
          ? data.doseNumber.value
          : this.doseNumber,
      isComplete: data.isComplete.present
          ? data.isComplete.value
          : this.isComplete,
    );
  }

  @override
  String toString() {
    return (StringBuffer('Vaccination(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('vaccineName: $vaccineName, ')
          ..write('manufacturer: $manufacturer, ')
          ..write('batchNumber: $batchNumber, ')
          ..write('administrationDate: $administrationDate, ')
          ..write('administeredBy: $administeredBy, ')
          ..write('site: $site, ')
          ..write('nextDueDate: $nextDueDate, ')
          ..write('doseNumber: $doseNumber, ')
          ..write('isComplete: $isComplete')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    vaccineName,
    manufacturer,
    batchNumber,
    administrationDate,
    administeredBy,
    site,
    nextDueDate,
    doseNumber,
    isComplete,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Vaccination &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.vaccineName == this.vaccineName &&
          other.manufacturer == this.manufacturer &&
          other.batchNumber == this.batchNumber &&
          other.administrationDate == this.administrationDate &&
          other.administeredBy == this.administeredBy &&
          other.site == this.site &&
          other.nextDueDate == this.nextDueDate &&
          other.doseNumber == this.doseNumber &&
          other.isComplete == this.isComplete);
}

class VaccinationsCompanion extends UpdateCompanion<Vaccination> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> vaccineName;
  final Value<String?> manufacturer;
  final Value<String?> batchNumber;
  final Value<DateTime> administrationDate;
  final Value<String?> administeredBy;
  final Value<String?> site;
  final Value<DateTime?> nextDueDate;
  final Value<int?> doseNumber;
  final Value<bool> isComplete;
  final Value<int> rowid;
  const VaccinationsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.vaccineName = const Value.absent(),
    this.manufacturer = const Value.absent(),
    this.batchNumber = const Value.absent(),
    this.administrationDate = const Value.absent(),
    this.administeredBy = const Value.absent(),
    this.site = const Value.absent(),
    this.nextDueDate = const Value.absent(),
    this.doseNumber = const Value.absent(),
    this.isComplete = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  VaccinationsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String vaccineName,
    this.manufacturer = const Value.absent(),
    this.batchNumber = const Value.absent(),
    required DateTime administrationDate,
    this.administeredBy = const Value.absent(),
    this.site = const Value.absent(),
    this.nextDueDate = const Value.absent(),
    this.doseNumber = const Value.absent(),
    this.isComplete = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       vaccineName = Value(vaccineName),
       administrationDate = Value(administrationDate);
  static Insertable<Vaccination> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? vaccineName,
    Expression<String>? manufacturer,
    Expression<String>? batchNumber,
    Expression<DateTime>? administrationDate,
    Expression<String>? administeredBy,
    Expression<String>? site,
    Expression<DateTime>? nextDueDate,
    Expression<int>? doseNumber,
    Expression<bool>? isComplete,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (vaccineName != null) 'vaccine_name': vaccineName,
      if (manufacturer != null) 'manufacturer': manufacturer,
      if (batchNumber != null) 'batch_number': batchNumber,
      if (administrationDate != null) 'administration_date': administrationDate,
      if (administeredBy != null) 'administered_by': administeredBy,
      if (site != null) 'site': site,
      if (nextDueDate != null) 'next_due_date': nextDueDate,
      if (doseNumber != null) 'dose_number': doseNumber,
      if (isComplete != null) 'is_complete': isComplete,
      if (rowid != null) 'rowid': rowid,
    });
  }

  VaccinationsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? vaccineName,
    Value<String?>? manufacturer,
    Value<String?>? batchNumber,
    Value<DateTime>? administrationDate,
    Value<String?>? administeredBy,
    Value<String?>? site,
    Value<DateTime?>? nextDueDate,
    Value<int?>? doseNumber,
    Value<bool>? isComplete,
    Value<int>? rowid,
  }) {
    return VaccinationsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      vaccineName: vaccineName ?? this.vaccineName,
      manufacturer: manufacturer ?? this.manufacturer,
      batchNumber: batchNumber ?? this.batchNumber,
      administrationDate: administrationDate ?? this.administrationDate,
      administeredBy: administeredBy ?? this.administeredBy,
      site: site ?? this.site,
      nextDueDate: nextDueDate ?? this.nextDueDate,
      doseNumber: doseNumber ?? this.doseNumber,
      isComplete: isComplete ?? this.isComplete,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (vaccineName.present) {
      map['vaccine_name'] = Variable<String>(vaccineName.value);
    }
    if (manufacturer.present) {
      map['manufacturer'] = Variable<String>(manufacturer.value);
    }
    if (batchNumber.present) {
      map['batch_number'] = Variable<String>(batchNumber.value);
    }
    if (administrationDate.present) {
      map['administration_date'] = Variable<DateTime>(administrationDate.value);
    }
    if (administeredBy.present) {
      map['administered_by'] = Variable<String>(administeredBy.value);
    }
    if (site.present) {
      map['site'] = Variable<String>(site.value);
    }
    if (nextDueDate.present) {
      map['next_due_date'] = Variable<DateTime>(nextDueDate.value);
    }
    if (doseNumber.present) {
      map['dose_number'] = Variable<int>(doseNumber.value);
    }
    if (isComplete.present) {
      map['is_complete'] = Variable<bool>(isComplete.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('VaccinationsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('vaccineName: $vaccineName, ')
          ..write('manufacturer: $manufacturer, ')
          ..write('batchNumber: $batchNumber, ')
          ..write('administrationDate: $administrationDate, ')
          ..write('administeredBy: $administeredBy, ')
          ..write('site: $site, ')
          ..write('nextDueDate: $nextDueDate, ')
          ..write('doseNumber: $doseNumber, ')
          ..write('isComplete: $isComplete, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $AllergiesTable extends Allergies
    with TableInfo<$AllergiesTable, Allergy> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AllergiesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('allergy'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _allergenMeta = const VerificationMeta(
    'allergen',
  );
  @override
  late final GeneratedColumn<String> allergen = GeneratedColumn<String>(
    'allergen',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _severityMeta = const VerificationMeta(
    'severity',
  );
  @override
  late final GeneratedColumn<String> severity = GeneratedColumn<String>(
    'severity',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _symptomsMeta = const VerificationMeta(
    'symptoms',
  );
  @override
  late final GeneratedColumn<String> symptoms = GeneratedColumn<String>(
    'symptoms',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _treatmentMeta = const VerificationMeta(
    'treatment',
  );
  @override
  late final GeneratedColumn<String> treatment = GeneratedColumn<String>(
    'treatment',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _notesMeta = const VerificationMeta('notes');
  @override
  late final GeneratedColumn<String> notes = GeneratedColumn<String>(
    'notes',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _isAllergyActiveMeta = const VerificationMeta(
    'isAllergyActive',
  );
  @override
  late final GeneratedColumn<bool> isAllergyActive = GeneratedColumn<bool>(
    'is_allergy_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_allergy_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _firstReactionMeta = const VerificationMeta(
    'firstReaction',
  );
  @override
  late final GeneratedColumn<DateTime> firstReaction =
      GeneratedColumn<DateTime>(
        'first_reaction',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _lastReactionMeta = const VerificationMeta(
    'lastReaction',
  );
  @override
  late final GeneratedColumn<DateTime> lastReaction = GeneratedColumn<DateTime>(
    'last_reaction',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    allergen,
    severity,
    symptoms,
    treatment,
    notes,
    isAllergyActive,
    firstReaction,
    lastReaction,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'allergies';
  @override
  VerificationContext validateIntegrity(
    Insertable<Allergy> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('allergen')) {
      context.handle(
        _allergenMeta,
        allergen.isAcceptableOrUnknown(data['allergen']!, _allergenMeta),
      );
    } else if (isInserting) {
      context.missing(_allergenMeta);
    }
    if (data.containsKey('severity')) {
      context.handle(
        _severityMeta,
        severity.isAcceptableOrUnknown(data['severity']!, _severityMeta),
      );
    } else if (isInserting) {
      context.missing(_severityMeta);
    }
    if (data.containsKey('symptoms')) {
      context.handle(
        _symptomsMeta,
        symptoms.isAcceptableOrUnknown(data['symptoms']!, _symptomsMeta),
      );
    } else if (isInserting) {
      context.missing(_symptomsMeta);
    }
    if (data.containsKey('treatment')) {
      context.handle(
        _treatmentMeta,
        treatment.isAcceptableOrUnknown(data['treatment']!, _treatmentMeta),
      );
    }
    if (data.containsKey('notes')) {
      context.handle(
        _notesMeta,
        notes.isAcceptableOrUnknown(data['notes']!, _notesMeta),
      );
    }
    if (data.containsKey('is_allergy_active')) {
      context.handle(
        _isAllergyActiveMeta,
        isAllergyActive.isAcceptableOrUnknown(
          data['is_allergy_active']!,
          _isAllergyActiveMeta,
        ),
      );
    }
    if (data.containsKey('first_reaction')) {
      context.handle(
        _firstReactionMeta,
        firstReaction.isAcceptableOrUnknown(
          data['first_reaction']!,
          _firstReactionMeta,
        ),
      );
    }
    if (data.containsKey('last_reaction')) {
      context.handle(
        _lastReactionMeta,
        lastReaction.isAcceptableOrUnknown(
          data['last_reaction']!,
          _lastReactionMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Allergy map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return Allergy(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      allergen: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}allergen'],
      )!,
      severity: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}severity'],
      )!,
      symptoms: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}symptoms'],
      )!,
      treatment: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}treatment'],
      ),
      notes: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}notes'],
      ),
      isAllergyActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_allergy_active'],
      )!,
      firstReaction: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}first_reaction'],
      ),
      lastReaction: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}last_reaction'],
      ),
    );
  }

  @override
  $AllergiesTable createAlias(String alias) {
    return $AllergiesTable(attachedDatabase, alias);
  }
}

class Allergy extends DataClass implements Insertable<Allergy> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String allergen;
  final String severity;
  final String symptoms;
  final String? treatment;
  final String? notes;
  final bool isAllergyActive;
  final DateTime? firstReaction;
  final DateTime? lastReaction;
  const Allergy({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.allergen,
    required this.severity,
    required this.symptoms,
    this.treatment,
    this.notes,
    required this.isAllergyActive,
    this.firstReaction,
    this.lastReaction,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['allergen'] = Variable<String>(allergen);
    map['severity'] = Variable<String>(severity);
    map['symptoms'] = Variable<String>(symptoms);
    if (!nullToAbsent || treatment != null) {
      map['treatment'] = Variable<String>(treatment);
    }
    if (!nullToAbsent || notes != null) {
      map['notes'] = Variable<String>(notes);
    }
    map['is_allergy_active'] = Variable<bool>(isAllergyActive);
    if (!nullToAbsent || firstReaction != null) {
      map['first_reaction'] = Variable<DateTime>(firstReaction);
    }
    if (!nullToAbsent || lastReaction != null) {
      map['last_reaction'] = Variable<DateTime>(lastReaction);
    }
    return map;
  }

  AllergiesCompanion toCompanion(bool nullToAbsent) {
    return AllergiesCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      allergen: Value(allergen),
      severity: Value(severity),
      symptoms: Value(symptoms),
      treatment: treatment == null && nullToAbsent
          ? const Value.absent()
          : Value(treatment),
      notes: notes == null && nullToAbsent
          ? const Value.absent()
          : Value(notes),
      isAllergyActive: Value(isAllergyActive),
      firstReaction: firstReaction == null && nullToAbsent
          ? const Value.absent()
          : Value(firstReaction),
      lastReaction: lastReaction == null && nullToAbsent
          ? const Value.absent()
          : Value(lastReaction),
    );
  }

  factory Allergy.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Allergy(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      allergen: serializer.fromJson<String>(json['allergen']),
      severity: serializer.fromJson<String>(json['severity']),
      symptoms: serializer.fromJson<String>(json['symptoms']),
      treatment: serializer.fromJson<String?>(json['treatment']),
      notes: serializer.fromJson<String?>(json['notes']),
      isAllergyActive: serializer.fromJson<bool>(json['isAllergyActive']),
      firstReaction: serializer.fromJson<DateTime?>(json['firstReaction']),
      lastReaction: serializer.fromJson<DateTime?>(json['lastReaction']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'allergen': serializer.toJson<String>(allergen),
      'severity': serializer.toJson<String>(severity),
      'symptoms': serializer.toJson<String>(symptoms),
      'treatment': serializer.toJson<String?>(treatment),
      'notes': serializer.toJson<String?>(notes),
      'isAllergyActive': serializer.toJson<bool>(isAllergyActive),
      'firstReaction': serializer.toJson<DateTime?>(firstReaction),
      'lastReaction': serializer.toJson<DateTime?>(lastReaction),
    };
  }

  Allergy copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? allergen,
    String? severity,
    String? symptoms,
    Value<String?> treatment = const Value.absent(),
    Value<String?> notes = const Value.absent(),
    bool? isAllergyActive,
    Value<DateTime?> firstReaction = const Value.absent(),
    Value<DateTime?> lastReaction = const Value.absent(),
  }) => Allergy(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    allergen: allergen ?? this.allergen,
    severity: severity ?? this.severity,
    symptoms: symptoms ?? this.symptoms,
    treatment: treatment.present ? treatment.value : this.treatment,
    notes: notes.present ? notes.value : this.notes,
    isAllergyActive: isAllergyActive ?? this.isAllergyActive,
    firstReaction: firstReaction.present
        ? firstReaction.value
        : this.firstReaction,
    lastReaction: lastReaction.present ? lastReaction.value : this.lastReaction,
  );
  Allergy copyWithCompanion(AllergiesCompanion data) {
    return Allergy(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      allergen: data.allergen.present ? data.allergen.value : this.allergen,
      severity: data.severity.present ? data.severity.value : this.severity,
      symptoms: data.symptoms.present ? data.symptoms.value : this.symptoms,
      treatment: data.treatment.present ? data.treatment.value : this.treatment,
      notes: data.notes.present ? data.notes.value : this.notes,
      isAllergyActive: data.isAllergyActive.present
          ? data.isAllergyActive.value
          : this.isAllergyActive,
      firstReaction: data.firstReaction.present
          ? data.firstReaction.value
          : this.firstReaction,
      lastReaction: data.lastReaction.present
          ? data.lastReaction.value
          : this.lastReaction,
    );
  }

  @override
  String toString() {
    return (StringBuffer('Allergy(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('allergen: $allergen, ')
          ..write('severity: $severity, ')
          ..write('symptoms: $symptoms, ')
          ..write('treatment: $treatment, ')
          ..write('notes: $notes, ')
          ..write('isAllergyActive: $isAllergyActive, ')
          ..write('firstReaction: $firstReaction, ')
          ..write('lastReaction: $lastReaction')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    allergen,
    severity,
    symptoms,
    treatment,
    notes,
    isAllergyActive,
    firstReaction,
    lastReaction,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Allergy &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.allergen == this.allergen &&
          other.severity == this.severity &&
          other.symptoms == this.symptoms &&
          other.treatment == this.treatment &&
          other.notes == this.notes &&
          other.isAllergyActive == this.isAllergyActive &&
          other.firstReaction == this.firstReaction &&
          other.lastReaction == this.lastReaction);
}

class AllergiesCompanion extends UpdateCompanion<Allergy> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> allergen;
  final Value<String> severity;
  final Value<String> symptoms;
  final Value<String?> treatment;
  final Value<String?> notes;
  final Value<bool> isAllergyActive;
  final Value<DateTime?> firstReaction;
  final Value<DateTime?> lastReaction;
  final Value<int> rowid;
  const AllergiesCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.allergen = const Value.absent(),
    this.severity = const Value.absent(),
    this.symptoms = const Value.absent(),
    this.treatment = const Value.absent(),
    this.notes = const Value.absent(),
    this.isAllergyActive = const Value.absent(),
    this.firstReaction = const Value.absent(),
    this.lastReaction = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  AllergiesCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String allergen,
    required String severity,
    required String symptoms,
    this.treatment = const Value.absent(),
    this.notes = const Value.absent(),
    this.isAllergyActive = const Value.absent(),
    this.firstReaction = const Value.absent(),
    this.lastReaction = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       allergen = Value(allergen),
       severity = Value(severity),
       symptoms = Value(symptoms);
  static Insertable<Allergy> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? allergen,
    Expression<String>? severity,
    Expression<String>? symptoms,
    Expression<String>? treatment,
    Expression<String>? notes,
    Expression<bool>? isAllergyActive,
    Expression<DateTime>? firstReaction,
    Expression<DateTime>? lastReaction,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (allergen != null) 'allergen': allergen,
      if (severity != null) 'severity': severity,
      if (symptoms != null) 'symptoms': symptoms,
      if (treatment != null) 'treatment': treatment,
      if (notes != null) 'notes': notes,
      if (isAllergyActive != null) 'is_allergy_active': isAllergyActive,
      if (firstReaction != null) 'first_reaction': firstReaction,
      if (lastReaction != null) 'last_reaction': lastReaction,
      if (rowid != null) 'rowid': rowid,
    });
  }

  AllergiesCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? allergen,
    Value<String>? severity,
    Value<String>? symptoms,
    Value<String?>? treatment,
    Value<String?>? notes,
    Value<bool>? isAllergyActive,
    Value<DateTime?>? firstReaction,
    Value<DateTime?>? lastReaction,
    Value<int>? rowid,
  }) {
    return AllergiesCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      allergen: allergen ?? this.allergen,
      severity: severity ?? this.severity,
      symptoms: symptoms ?? this.symptoms,
      treatment: treatment ?? this.treatment,
      notes: notes ?? this.notes,
      isAllergyActive: isAllergyActive ?? this.isAllergyActive,
      firstReaction: firstReaction ?? this.firstReaction,
      lastReaction: lastReaction ?? this.lastReaction,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (allergen.present) {
      map['allergen'] = Variable<String>(allergen.value);
    }
    if (severity.present) {
      map['severity'] = Variable<String>(severity.value);
    }
    if (symptoms.present) {
      map['symptoms'] = Variable<String>(symptoms.value);
    }
    if (treatment.present) {
      map['treatment'] = Variable<String>(treatment.value);
    }
    if (notes.present) {
      map['notes'] = Variable<String>(notes.value);
    }
    if (isAllergyActive.present) {
      map['is_allergy_active'] = Variable<bool>(isAllergyActive.value);
    }
    if (firstReaction.present) {
      map['first_reaction'] = Variable<DateTime>(firstReaction.value);
    }
    if (lastReaction.present) {
      map['last_reaction'] = Variable<DateTime>(lastReaction.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AllergiesCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('allergen: $allergen, ')
          ..write('severity: $severity, ')
          ..write('symptoms: $symptoms, ')
          ..write('treatment: $treatment, ')
          ..write('notes: $notes, ')
          ..write('isAllergyActive: $isAllergyActive, ')
          ..write('firstReaction: $firstReaction, ')
          ..write('lastReaction: $lastReaction, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $ChronicConditionsTable extends ChronicConditions
    with TableInfo<$ChronicConditionsTable, ChronicCondition> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ChronicConditionsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('chronic_condition'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _conditionNameMeta = const VerificationMeta(
    'conditionName',
  );
  @override
  late final GeneratedColumn<String> conditionName = GeneratedColumn<String>(
    'condition_name',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _diagnosisDateMeta = const VerificationMeta(
    'diagnosisDate',
  );
  @override
  late final GeneratedColumn<DateTime> diagnosisDate =
      GeneratedColumn<DateTime>(
        'diagnosis_date',
        aliasedName,
        false,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _diagnosingProviderMeta =
      const VerificationMeta('diagnosingProvider');
  @override
  late final GeneratedColumn<String> diagnosingProvider =
      GeneratedColumn<String>(
        'diagnosing_provider',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _severityMeta = const VerificationMeta(
    'severity',
  );
  @override
  late final GeneratedColumn<String> severity = GeneratedColumn<String>(
    'severity',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _statusMeta = const VerificationMeta('status');
  @override
  late final GeneratedColumn<String> status = GeneratedColumn<String>(
    'status',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _treatmentMeta = const VerificationMeta(
    'treatment',
  );
  @override
  late final GeneratedColumn<String> treatment = GeneratedColumn<String>(
    'treatment',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _managementPlanMeta = const VerificationMeta(
    'managementPlan',
  );
  @override
  late final GeneratedColumn<String> managementPlan = GeneratedColumn<String>(
    'management_plan',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _relatedMedicationsMeta =
      const VerificationMeta('relatedMedications');
  @override
  late final GeneratedColumn<String> relatedMedications =
      GeneratedColumn<String>(
        'related_medications',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    conditionName,
    diagnosisDate,
    diagnosingProvider,
    severity,
    status,
    treatment,
    managementPlan,
    relatedMedications,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'chronic_conditions';
  @override
  VerificationContext validateIntegrity(
    Insertable<ChronicCondition> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('condition_name')) {
      context.handle(
        _conditionNameMeta,
        conditionName.isAcceptableOrUnknown(
          data['condition_name']!,
          _conditionNameMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_conditionNameMeta);
    }
    if (data.containsKey('diagnosis_date')) {
      context.handle(
        _diagnosisDateMeta,
        diagnosisDate.isAcceptableOrUnknown(
          data['diagnosis_date']!,
          _diagnosisDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_diagnosisDateMeta);
    }
    if (data.containsKey('diagnosing_provider')) {
      context.handle(
        _diagnosingProviderMeta,
        diagnosingProvider.isAcceptableOrUnknown(
          data['diagnosing_provider']!,
          _diagnosingProviderMeta,
        ),
      );
    }
    if (data.containsKey('severity')) {
      context.handle(
        _severityMeta,
        severity.isAcceptableOrUnknown(data['severity']!, _severityMeta),
      );
    } else if (isInserting) {
      context.missing(_severityMeta);
    }
    if (data.containsKey('status')) {
      context.handle(
        _statusMeta,
        status.isAcceptableOrUnknown(data['status']!, _statusMeta),
      );
    } else if (isInserting) {
      context.missing(_statusMeta);
    }
    if (data.containsKey('treatment')) {
      context.handle(
        _treatmentMeta,
        treatment.isAcceptableOrUnknown(data['treatment']!, _treatmentMeta),
      );
    }
    if (data.containsKey('management_plan')) {
      context.handle(
        _managementPlanMeta,
        managementPlan.isAcceptableOrUnknown(
          data['management_plan']!,
          _managementPlanMeta,
        ),
      );
    }
    if (data.containsKey('related_medications')) {
      context.handle(
        _relatedMedicationsMeta,
        relatedMedications.isAcceptableOrUnknown(
          data['related_medications']!,
          _relatedMedicationsMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ChronicCondition map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ChronicCondition(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      conditionName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}condition_name'],
      )!,
      diagnosisDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}diagnosis_date'],
      )!,
      diagnosingProvider: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}diagnosing_provider'],
      ),
      severity: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}severity'],
      )!,
      status: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}status'],
      )!,
      treatment: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}treatment'],
      ),
      managementPlan: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}management_plan'],
      ),
      relatedMedications: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}related_medications'],
      ),
    );
  }

  @override
  $ChronicConditionsTable createAlias(String alias) {
    return $ChronicConditionsTable(attachedDatabase, alias);
  }
}

class ChronicCondition extends DataClass
    implements Insertable<ChronicCondition> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String conditionName;
  final DateTime diagnosisDate;
  final String? diagnosingProvider;
  final String severity;
  final String status;
  final String? treatment;
  final String? managementPlan;
  final String? relatedMedications;
  const ChronicCondition({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.conditionName,
    required this.diagnosisDate,
    this.diagnosingProvider,
    required this.severity,
    required this.status,
    this.treatment,
    this.managementPlan,
    this.relatedMedications,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['condition_name'] = Variable<String>(conditionName);
    map['diagnosis_date'] = Variable<DateTime>(diagnosisDate);
    if (!nullToAbsent || diagnosingProvider != null) {
      map['diagnosing_provider'] = Variable<String>(diagnosingProvider);
    }
    map['severity'] = Variable<String>(severity);
    map['status'] = Variable<String>(status);
    if (!nullToAbsent || treatment != null) {
      map['treatment'] = Variable<String>(treatment);
    }
    if (!nullToAbsent || managementPlan != null) {
      map['management_plan'] = Variable<String>(managementPlan);
    }
    if (!nullToAbsent || relatedMedications != null) {
      map['related_medications'] = Variable<String>(relatedMedications);
    }
    return map;
  }

  ChronicConditionsCompanion toCompanion(bool nullToAbsent) {
    return ChronicConditionsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      conditionName: Value(conditionName),
      diagnosisDate: Value(diagnosisDate),
      diagnosingProvider: diagnosingProvider == null && nullToAbsent
          ? const Value.absent()
          : Value(diagnosingProvider),
      severity: Value(severity),
      status: Value(status),
      treatment: treatment == null && nullToAbsent
          ? const Value.absent()
          : Value(treatment),
      managementPlan: managementPlan == null && nullToAbsent
          ? const Value.absent()
          : Value(managementPlan),
      relatedMedications: relatedMedications == null && nullToAbsent
          ? const Value.absent()
          : Value(relatedMedications),
    );
  }

  factory ChronicCondition.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ChronicCondition(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      conditionName: serializer.fromJson<String>(json['conditionName']),
      diagnosisDate: serializer.fromJson<DateTime>(json['diagnosisDate']),
      diagnosingProvider: serializer.fromJson<String?>(
        json['diagnosingProvider'],
      ),
      severity: serializer.fromJson<String>(json['severity']),
      status: serializer.fromJson<String>(json['status']),
      treatment: serializer.fromJson<String?>(json['treatment']),
      managementPlan: serializer.fromJson<String?>(json['managementPlan']),
      relatedMedications: serializer.fromJson<String?>(
        json['relatedMedications'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'conditionName': serializer.toJson<String>(conditionName),
      'diagnosisDate': serializer.toJson<DateTime>(diagnosisDate),
      'diagnosingProvider': serializer.toJson<String?>(diagnosingProvider),
      'severity': serializer.toJson<String>(severity),
      'status': serializer.toJson<String>(status),
      'treatment': serializer.toJson<String?>(treatment),
      'managementPlan': serializer.toJson<String?>(managementPlan),
      'relatedMedications': serializer.toJson<String?>(relatedMedications),
    };
  }

  ChronicCondition copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? conditionName,
    DateTime? diagnosisDate,
    Value<String?> diagnosingProvider = const Value.absent(),
    String? severity,
    String? status,
    Value<String?> treatment = const Value.absent(),
    Value<String?> managementPlan = const Value.absent(),
    Value<String?> relatedMedications = const Value.absent(),
  }) => ChronicCondition(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    conditionName: conditionName ?? this.conditionName,
    diagnosisDate: diagnosisDate ?? this.diagnosisDate,
    diagnosingProvider: diagnosingProvider.present
        ? diagnosingProvider.value
        : this.diagnosingProvider,
    severity: severity ?? this.severity,
    status: status ?? this.status,
    treatment: treatment.present ? treatment.value : this.treatment,
    managementPlan: managementPlan.present
        ? managementPlan.value
        : this.managementPlan,
    relatedMedications: relatedMedications.present
        ? relatedMedications.value
        : this.relatedMedications,
  );
  ChronicCondition copyWithCompanion(ChronicConditionsCompanion data) {
    return ChronicCondition(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      conditionName: data.conditionName.present
          ? data.conditionName.value
          : this.conditionName,
      diagnosisDate: data.diagnosisDate.present
          ? data.diagnosisDate.value
          : this.diagnosisDate,
      diagnosingProvider: data.diagnosingProvider.present
          ? data.diagnosingProvider.value
          : this.diagnosingProvider,
      severity: data.severity.present ? data.severity.value : this.severity,
      status: data.status.present ? data.status.value : this.status,
      treatment: data.treatment.present ? data.treatment.value : this.treatment,
      managementPlan: data.managementPlan.present
          ? data.managementPlan.value
          : this.managementPlan,
      relatedMedications: data.relatedMedications.present
          ? data.relatedMedications.value
          : this.relatedMedications,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ChronicCondition(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('conditionName: $conditionName, ')
          ..write('diagnosisDate: $diagnosisDate, ')
          ..write('diagnosingProvider: $diagnosingProvider, ')
          ..write('severity: $severity, ')
          ..write('status: $status, ')
          ..write('treatment: $treatment, ')
          ..write('managementPlan: $managementPlan, ')
          ..write('relatedMedications: $relatedMedications')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    conditionName,
    diagnosisDate,
    diagnosingProvider,
    severity,
    status,
    treatment,
    managementPlan,
    relatedMedications,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ChronicCondition &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.conditionName == this.conditionName &&
          other.diagnosisDate == this.diagnosisDate &&
          other.diagnosingProvider == this.diagnosingProvider &&
          other.severity == this.severity &&
          other.status == this.status &&
          other.treatment == this.treatment &&
          other.managementPlan == this.managementPlan &&
          other.relatedMedications == this.relatedMedications);
}

class ChronicConditionsCompanion extends UpdateCompanion<ChronicCondition> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> conditionName;
  final Value<DateTime> diagnosisDate;
  final Value<String?> diagnosingProvider;
  final Value<String> severity;
  final Value<String> status;
  final Value<String?> treatment;
  final Value<String?> managementPlan;
  final Value<String?> relatedMedications;
  final Value<int> rowid;
  const ChronicConditionsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.conditionName = const Value.absent(),
    this.diagnosisDate = const Value.absent(),
    this.diagnosingProvider = const Value.absent(),
    this.severity = const Value.absent(),
    this.status = const Value.absent(),
    this.treatment = const Value.absent(),
    this.managementPlan = const Value.absent(),
    this.relatedMedications = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  ChronicConditionsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String conditionName,
    required DateTime diagnosisDate,
    this.diagnosingProvider = const Value.absent(),
    required String severity,
    required String status,
    this.treatment = const Value.absent(),
    this.managementPlan = const Value.absent(),
    this.relatedMedications = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       conditionName = Value(conditionName),
       diagnosisDate = Value(diagnosisDate),
       severity = Value(severity),
       status = Value(status);
  static Insertable<ChronicCondition> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? conditionName,
    Expression<DateTime>? diagnosisDate,
    Expression<String>? diagnosingProvider,
    Expression<String>? severity,
    Expression<String>? status,
    Expression<String>? treatment,
    Expression<String>? managementPlan,
    Expression<String>? relatedMedications,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (conditionName != null) 'condition_name': conditionName,
      if (diagnosisDate != null) 'diagnosis_date': diagnosisDate,
      if (diagnosingProvider != null) 'diagnosing_provider': diagnosingProvider,
      if (severity != null) 'severity': severity,
      if (status != null) 'status': status,
      if (treatment != null) 'treatment': treatment,
      if (managementPlan != null) 'management_plan': managementPlan,
      if (relatedMedications != null) 'related_medications': relatedMedications,
      if (rowid != null) 'rowid': rowid,
    });
  }

  ChronicConditionsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? conditionName,
    Value<DateTime>? diagnosisDate,
    Value<String?>? diagnosingProvider,
    Value<String>? severity,
    Value<String>? status,
    Value<String?>? treatment,
    Value<String?>? managementPlan,
    Value<String?>? relatedMedications,
    Value<int>? rowid,
  }) {
    return ChronicConditionsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      conditionName: conditionName ?? this.conditionName,
      diagnosisDate: diagnosisDate ?? this.diagnosisDate,
      diagnosingProvider: diagnosingProvider ?? this.diagnosingProvider,
      severity: severity ?? this.severity,
      status: status ?? this.status,
      treatment: treatment ?? this.treatment,
      managementPlan: managementPlan ?? this.managementPlan,
      relatedMedications: relatedMedications ?? this.relatedMedications,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (conditionName.present) {
      map['condition_name'] = Variable<String>(conditionName.value);
    }
    if (diagnosisDate.present) {
      map['diagnosis_date'] = Variable<DateTime>(diagnosisDate.value);
    }
    if (diagnosingProvider.present) {
      map['diagnosing_provider'] = Variable<String>(diagnosingProvider.value);
    }
    if (severity.present) {
      map['severity'] = Variable<String>(severity.value);
    }
    if (status.present) {
      map['status'] = Variable<String>(status.value);
    }
    if (treatment.present) {
      map['treatment'] = Variable<String>(treatment.value);
    }
    if (managementPlan.present) {
      map['management_plan'] = Variable<String>(managementPlan.value);
    }
    if (relatedMedications.present) {
      map['related_medications'] = Variable<String>(relatedMedications.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ChronicConditionsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('conditionName: $conditionName, ')
          ..write('diagnosisDate: $diagnosisDate, ')
          ..write('diagnosingProvider: $diagnosingProvider, ')
          ..write('severity: $severity, ')
          ..write('status: $status, ')
          ..write('treatment: $treatment, ')
          ..write('managementPlan: $managementPlan, ')
          ..write('relatedMedications: $relatedMedications, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $SurgicalRecordsTable extends SurgicalRecords
    with TableInfo<$SurgicalRecordsTable, SurgicalRecord> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $SurgicalRecordsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('surgical_record'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _procedureNameMeta = const VerificationMeta(
    'procedureName',
  );
  @override
  late final GeneratedColumn<String> procedureName = GeneratedColumn<String>(
    'procedure_name',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _surgeonNameMeta = const VerificationMeta(
    'surgeonName',
  );
  @override
  late final GeneratedColumn<String> surgeonName = GeneratedColumn<String>(
    'surgeon_name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _hospitalMeta = const VerificationMeta(
    'hospital',
  );
  @override
  late final GeneratedColumn<String> hospital = GeneratedColumn<String>(
    'hospital',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _operatingRoomMeta = const VerificationMeta(
    'operatingRoom',
  );
  @override
  late final GeneratedColumn<String> operatingRoom = GeneratedColumn<String>(
    'operating_room',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _surgeryDateMeta = const VerificationMeta(
    'surgeryDate',
  );
  @override
  late final GeneratedColumn<DateTime> surgeryDate = GeneratedColumn<DateTime>(
    'surgery_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _surgeryStartTimeMeta = const VerificationMeta(
    'surgeryStartTime',
  );
  @override
  late final GeneratedColumn<DateTime> surgeryStartTime =
      GeneratedColumn<DateTime>(
        'surgery_start_time',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _surgeryEndTimeMeta = const VerificationMeta(
    'surgeryEndTime',
  );
  @override
  late final GeneratedColumn<DateTime> surgeryEndTime =
      GeneratedColumn<DateTime>(
        'surgery_end_time',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _anesthesiaTypeMeta = const VerificationMeta(
    'anesthesiaType',
  );
  @override
  late final GeneratedColumn<String> anesthesiaType = GeneratedColumn<String>(
    'anesthesia_type',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _anesthesiologistMeta = const VerificationMeta(
    'anesthesiologist',
  );
  @override
  late final GeneratedColumn<String> anesthesiologist = GeneratedColumn<String>(
    'anesthesiologist',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _indicationMeta = const VerificationMeta(
    'indication',
  );
  @override
  late final GeneratedColumn<String> indication = GeneratedColumn<String>(
    'indication',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _findingsMeta = const VerificationMeta(
    'findings',
  );
  @override
  late final GeneratedColumn<String> findings = GeneratedColumn<String>(
    'findings',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _complicationsMeta = const VerificationMeta(
    'complications',
  );
  @override
  late final GeneratedColumn<String> complications = GeneratedColumn<String>(
    'complications',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recoveryNotesMeta = const VerificationMeta(
    'recoveryNotes',
  );
  @override
  late final GeneratedColumn<String> recoveryNotes = GeneratedColumn<String>(
    'recovery_notes',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _followUpPlanMeta = const VerificationMeta(
    'followUpPlan',
  );
  @override
  late final GeneratedColumn<String> followUpPlan = GeneratedColumn<String>(
    'follow_up_plan',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dischargeDateMeta = const VerificationMeta(
    'dischargeDate',
  );
  @override
  late final GeneratedColumn<DateTime> dischargeDate =
      GeneratedColumn<DateTime>(
        'discharge_date',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _isEmergencyMeta = const VerificationMeta(
    'isEmergency',
  );
  @override
  late final GeneratedColumn<bool> isEmergency = GeneratedColumn<bool>(
    'is_emergency',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_emergency" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    procedureName,
    surgeonName,
    hospital,
    operatingRoom,
    surgeryDate,
    surgeryStartTime,
    surgeryEndTime,
    anesthesiaType,
    anesthesiologist,
    indication,
    findings,
    complications,
    recoveryNotes,
    followUpPlan,
    dischargeDate,
    isEmergency,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'surgical_records';
  @override
  VerificationContext validateIntegrity(
    Insertable<SurgicalRecord> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('procedure_name')) {
      context.handle(
        _procedureNameMeta,
        procedureName.isAcceptableOrUnknown(
          data['procedure_name']!,
          _procedureNameMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_procedureNameMeta);
    }
    if (data.containsKey('surgeon_name')) {
      context.handle(
        _surgeonNameMeta,
        surgeonName.isAcceptableOrUnknown(
          data['surgeon_name']!,
          _surgeonNameMeta,
        ),
      );
    }
    if (data.containsKey('hospital')) {
      context.handle(
        _hospitalMeta,
        hospital.isAcceptableOrUnknown(data['hospital']!, _hospitalMeta),
      );
    }
    if (data.containsKey('operating_room')) {
      context.handle(
        _operatingRoomMeta,
        operatingRoom.isAcceptableOrUnknown(
          data['operating_room']!,
          _operatingRoomMeta,
        ),
      );
    }
    if (data.containsKey('surgery_date')) {
      context.handle(
        _surgeryDateMeta,
        surgeryDate.isAcceptableOrUnknown(
          data['surgery_date']!,
          _surgeryDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_surgeryDateMeta);
    }
    if (data.containsKey('surgery_start_time')) {
      context.handle(
        _surgeryStartTimeMeta,
        surgeryStartTime.isAcceptableOrUnknown(
          data['surgery_start_time']!,
          _surgeryStartTimeMeta,
        ),
      );
    }
    if (data.containsKey('surgery_end_time')) {
      context.handle(
        _surgeryEndTimeMeta,
        surgeryEndTime.isAcceptableOrUnknown(
          data['surgery_end_time']!,
          _surgeryEndTimeMeta,
        ),
      );
    }
    if (data.containsKey('anesthesia_type')) {
      context.handle(
        _anesthesiaTypeMeta,
        anesthesiaType.isAcceptableOrUnknown(
          data['anesthesia_type']!,
          _anesthesiaTypeMeta,
        ),
      );
    }
    if (data.containsKey('anesthesiologist')) {
      context.handle(
        _anesthesiologistMeta,
        anesthesiologist.isAcceptableOrUnknown(
          data['anesthesiologist']!,
          _anesthesiologistMeta,
        ),
      );
    }
    if (data.containsKey('indication')) {
      context.handle(
        _indicationMeta,
        indication.isAcceptableOrUnknown(data['indication']!, _indicationMeta),
      );
    }
    if (data.containsKey('findings')) {
      context.handle(
        _findingsMeta,
        findings.isAcceptableOrUnknown(data['findings']!, _findingsMeta),
      );
    }
    if (data.containsKey('complications')) {
      context.handle(
        _complicationsMeta,
        complications.isAcceptableOrUnknown(
          data['complications']!,
          _complicationsMeta,
        ),
      );
    }
    if (data.containsKey('recovery_notes')) {
      context.handle(
        _recoveryNotesMeta,
        recoveryNotes.isAcceptableOrUnknown(
          data['recovery_notes']!,
          _recoveryNotesMeta,
        ),
      );
    }
    if (data.containsKey('follow_up_plan')) {
      context.handle(
        _followUpPlanMeta,
        followUpPlan.isAcceptableOrUnknown(
          data['follow_up_plan']!,
          _followUpPlanMeta,
        ),
      );
    }
    if (data.containsKey('discharge_date')) {
      context.handle(
        _dischargeDateMeta,
        dischargeDate.isAcceptableOrUnknown(
          data['discharge_date']!,
          _dischargeDateMeta,
        ),
      );
    }
    if (data.containsKey('is_emergency')) {
      context.handle(
        _isEmergencyMeta,
        isEmergency.isAcceptableOrUnknown(
          data['is_emergency']!,
          _isEmergencyMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  SurgicalRecord map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return SurgicalRecord(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      procedureName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}procedure_name'],
      )!,
      surgeonName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}surgeon_name'],
      ),
      hospital: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}hospital'],
      ),
      operatingRoom: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}operating_room'],
      ),
      surgeryDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}surgery_date'],
      )!,
      surgeryStartTime: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}surgery_start_time'],
      ),
      surgeryEndTime: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}surgery_end_time'],
      ),
      anesthesiaType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}anesthesia_type'],
      ),
      anesthesiologist: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}anesthesiologist'],
      ),
      indication: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indication'],
      ),
      findings: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}findings'],
      ),
      complications: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}complications'],
      ),
      recoveryNotes: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}recovery_notes'],
      ),
      followUpPlan: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}follow_up_plan'],
      ),
      dischargeDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}discharge_date'],
      ),
      isEmergency: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_emergency'],
      )!,
    );
  }

  @override
  $SurgicalRecordsTable createAlias(String alias) {
    return $SurgicalRecordsTable(attachedDatabase, alias);
  }
}

class SurgicalRecord extends DataClass implements Insertable<SurgicalRecord> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String procedureName;
  final String? surgeonName;
  final String? hospital;
  final String? operatingRoom;
  final DateTime surgeryDate;
  final DateTime? surgeryStartTime;
  final DateTime? surgeryEndTime;
  final String? anesthesiaType;
  final String? anesthesiologist;
  final String? indication;
  final String? findings;
  final String? complications;
  final String? recoveryNotes;
  final String? followUpPlan;
  final DateTime? dischargeDate;
  final bool isEmergency;
  const SurgicalRecord({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.procedureName,
    this.surgeonName,
    this.hospital,
    this.operatingRoom,
    required this.surgeryDate,
    this.surgeryStartTime,
    this.surgeryEndTime,
    this.anesthesiaType,
    this.anesthesiologist,
    this.indication,
    this.findings,
    this.complications,
    this.recoveryNotes,
    this.followUpPlan,
    this.dischargeDate,
    required this.isEmergency,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['procedure_name'] = Variable<String>(procedureName);
    if (!nullToAbsent || surgeonName != null) {
      map['surgeon_name'] = Variable<String>(surgeonName);
    }
    if (!nullToAbsent || hospital != null) {
      map['hospital'] = Variable<String>(hospital);
    }
    if (!nullToAbsent || operatingRoom != null) {
      map['operating_room'] = Variable<String>(operatingRoom);
    }
    map['surgery_date'] = Variable<DateTime>(surgeryDate);
    if (!nullToAbsent || surgeryStartTime != null) {
      map['surgery_start_time'] = Variable<DateTime>(surgeryStartTime);
    }
    if (!nullToAbsent || surgeryEndTime != null) {
      map['surgery_end_time'] = Variable<DateTime>(surgeryEndTime);
    }
    if (!nullToAbsent || anesthesiaType != null) {
      map['anesthesia_type'] = Variable<String>(anesthesiaType);
    }
    if (!nullToAbsent || anesthesiologist != null) {
      map['anesthesiologist'] = Variable<String>(anesthesiologist);
    }
    if (!nullToAbsent || indication != null) {
      map['indication'] = Variable<String>(indication);
    }
    if (!nullToAbsent || findings != null) {
      map['findings'] = Variable<String>(findings);
    }
    if (!nullToAbsent || complications != null) {
      map['complications'] = Variable<String>(complications);
    }
    if (!nullToAbsent || recoveryNotes != null) {
      map['recovery_notes'] = Variable<String>(recoveryNotes);
    }
    if (!nullToAbsent || followUpPlan != null) {
      map['follow_up_plan'] = Variable<String>(followUpPlan);
    }
    if (!nullToAbsent || dischargeDate != null) {
      map['discharge_date'] = Variable<DateTime>(dischargeDate);
    }
    map['is_emergency'] = Variable<bool>(isEmergency);
    return map;
  }

  SurgicalRecordsCompanion toCompanion(bool nullToAbsent) {
    return SurgicalRecordsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      procedureName: Value(procedureName),
      surgeonName: surgeonName == null && nullToAbsent
          ? const Value.absent()
          : Value(surgeonName),
      hospital: hospital == null && nullToAbsent
          ? const Value.absent()
          : Value(hospital),
      operatingRoom: operatingRoom == null && nullToAbsent
          ? const Value.absent()
          : Value(operatingRoom),
      surgeryDate: Value(surgeryDate),
      surgeryStartTime: surgeryStartTime == null && nullToAbsent
          ? const Value.absent()
          : Value(surgeryStartTime),
      surgeryEndTime: surgeryEndTime == null && nullToAbsent
          ? const Value.absent()
          : Value(surgeryEndTime),
      anesthesiaType: anesthesiaType == null && nullToAbsent
          ? const Value.absent()
          : Value(anesthesiaType),
      anesthesiologist: anesthesiologist == null && nullToAbsent
          ? const Value.absent()
          : Value(anesthesiologist),
      indication: indication == null && nullToAbsent
          ? const Value.absent()
          : Value(indication),
      findings: findings == null && nullToAbsent
          ? const Value.absent()
          : Value(findings),
      complications: complications == null && nullToAbsent
          ? const Value.absent()
          : Value(complications),
      recoveryNotes: recoveryNotes == null && nullToAbsent
          ? const Value.absent()
          : Value(recoveryNotes),
      followUpPlan: followUpPlan == null && nullToAbsent
          ? const Value.absent()
          : Value(followUpPlan),
      dischargeDate: dischargeDate == null && nullToAbsent
          ? const Value.absent()
          : Value(dischargeDate),
      isEmergency: Value(isEmergency),
    );
  }

  factory SurgicalRecord.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return SurgicalRecord(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      procedureName: serializer.fromJson<String>(json['procedureName']),
      surgeonName: serializer.fromJson<String?>(json['surgeonName']),
      hospital: serializer.fromJson<String?>(json['hospital']),
      operatingRoom: serializer.fromJson<String?>(json['operatingRoom']),
      surgeryDate: serializer.fromJson<DateTime>(json['surgeryDate']),
      surgeryStartTime: serializer.fromJson<DateTime?>(
        json['surgeryStartTime'],
      ),
      surgeryEndTime: serializer.fromJson<DateTime?>(json['surgeryEndTime']),
      anesthesiaType: serializer.fromJson<String?>(json['anesthesiaType']),
      anesthesiologist: serializer.fromJson<String?>(json['anesthesiologist']),
      indication: serializer.fromJson<String?>(json['indication']),
      findings: serializer.fromJson<String?>(json['findings']),
      complications: serializer.fromJson<String?>(json['complications']),
      recoveryNotes: serializer.fromJson<String?>(json['recoveryNotes']),
      followUpPlan: serializer.fromJson<String?>(json['followUpPlan']),
      dischargeDate: serializer.fromJson<DateTime?>(json['dischargeDate']),
      isEmergency: serializer.fromJson<bool>(json['isEmergency']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'procedureName': serializer.toJson<String>(procedureName),
      'surgeonName': serializer.toJson<String?>(surgeonName),
      'hospital': serializer.toJson<String?>(hospital),
      'operatingRoom': serializer.toJson<String?>(operatingRoom),
      'surgeryDate': serializer.toJson<DateTime>(surgeryDate),
      'surgeryStartTime': serializer.toJson<DateTime?>(surgeryStartTime),
      'surgeryEndTime': serializer.toJson<DateTime?>(surgeryEndTime),
      'anesthesiaType': serializer.toJson<String?>(anesthesiaType),
      'anesthesiologist': serializer.toJson<String?>(anesthesiologist),
      'indication': serializer.toJson<String?>(indication),
      'findings': serializer.toJson<String?>(findings),
      'complications': serializer.toJson<String?>(complications),
      'recoveryNotes': serializer.toJson<String?>(recoveryNotes),
      'followUpPlan': serializer.toJson<String?>(followUpPlan),
      'dischargeDate': serializer.toJson<DateTime?>(dischargeDate),
      'isEmergency': serializer.toJson<bool>(isEmergency),
    };
  }

  SurgicalRecord copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? procedureName,
    Value<String?> surgeonName = const Value.absent(),
    Value<String?> hospital = const Value.absent(),
    Value<String?> operatingRoom = const Value.absent(),
    DateTime? surgeryDate,
    Value<DateTime?> surgeryStartTime = const Value.absent(),
    Value<DateTime?> surgeryEndTime = const Value.absent(),
    Value<String?> anesthesiaType = const Value.absent(),
    Value<String?> anesthesiologist = const Value.absent(),
    Value<String?> indication = const Value.absent(),
    Value<String?> findings = const Value.absent(),
    Value<String?> complications = const Value.absent(),
    Value<String?> recoveryNotes = const Value.absent(),
    Value<String?> followUpPlan = const Value.absent(),
    Value<DateTime?> dischargeDate = const Value.absent(),
    bool? isEmergency,
  }) => SurgicalRecord(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    procedureName: procedureName ?? this.procedureName,
    surgeonName: surgeonName.present ? surgeonName.value : this.surgeonName,
    hospital: hospital.present ? hospital.value : this.hospital,
    operatingRoom: operatingRoom.present
        ? operatingRoom.value
        : this.operatingRoom,
    surgeryDate: surgeryDate ?? this.surgeryDate,
    surgeryStartTime: surgeryStartTime.present
        ? surgeryStartTime.value
        : this.surgeryStartTime,
    surgeryEndTime: surgeryEndTime.present
        ? surgeryEndTime.value
        : this.surgeryEndTime,
    anesthesiaType: anesthesiaType.present
        ? anesthesiaType.value
        : this.anesthesiaType,
    anesthesiologist: anesthesiologist.present
        ? anesthesiologist.value
        : this.anesthesiologist,
    indication: indication.present ? indication.value : this.indication,
    findings: findings.present ? findings.value : this.findings,
    complications: complications.present
        ? complications.value
        : this.complications,
    recoveryNotes: recoveryNotes.present
        ? recoveryNotes.value
        : this.recoveryNotes,
    followUpPlan: followUpPlan.present ? followUpPlan.value : this.followUpPlan,
    dischargeDate: dischargeDate.present
        ? dischargeDate.value
        : this.dischargeDate,
    isEmergency: isEmergency ?? this.isEmergency,
  );
  SurgicalRecord copyWithCompanion(SurgicalRecordsCompanion data) {
    return SurgicalRecord(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      procedureName: data.procedureName.present
          ? data.procedureName.value
          : this.procedureName,
      surgeonName: data.surgeonName.present
          ? data.surgeonName.value
          : this.surgeonName,
      hospital: data.hospital.present ? data.hospital.value : this.hospital,
      operatingRoom: data.operatingRoom.present
          ? data.operatingRoom.value
          : this.operatingRoom,
      surgeryDate: data.surgeryDate.present
          ? data.surgeryDate.value
          : this.surgeryDate,
      surgeryStartTime: data.surgeryStartTime.present
          ? data.surgeryStartTime.value
          : this.surgeryStartTime,
      surgeryEndTime: data.surgeryEndTime.present
          ? data.surgeryEndTime.value
          : this.surgeryEndTime,
      anesthesiaType: data.anesthesiaType.present
          ? data.anesthesiaType.value
          : this.anesthesiaType,
      anesthesiologist: data.anesthesiologist.present
          ? data.anesthesiologist.value
          : this.anesthesiologist,
      indication: data.indication.present
          ? data.indication.value
          : this.indication,
      findings: data.findings.present ? data.findings.value : this.findings,
      complications: data.complications.present
          ? data.complications.value
          : this.complications,
      recoveryNotes: data.recoveryNotes.present
          ? data.recoveryNotes.value
          : this.recoveryNotes,
      followUpPlan: data.followUpPlan.present
          ? data.followUpPlan.value
          : this.followUpPlan,
      dischargeDate: data.dischargeDate.present
          ? data.dischargeDate.value
          : this.dischargeDate,
      isEmergency: data.isEmergency.present
          ? data.isEmergency.value
          : this.isEmergency,
    );
  }

  @override
  String toString() {
    return (StringBuffer('SurgicalRecord(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('procedureName: $procedureName, ')
          ..write('surgeonName: $surgeonName, ')
          ..write('hospital: $hospital, ')
          ..write('operatingRoom: $operatingRoom, ')
          ..write('surgeryDate: $surgeryDate, ')
          ..write('surgeryStartTime: $surgeryStartTime, ')
          ..write('surgeryEndTime: $surgeryEndTime, ')
          ..write('anesthesiaType: $anesthesiaType, ')
          ..write('anesthesiologist: $anesthesiologist, ')
          ..write('indication: $indication, ')
          ..write('findings: $findings, ')
          ..write('complications: $complications, ')
          ..write('recoveryNotes: $recoveryNotes, ')
          ..write('followUpPlan: $followUpPlan, ')
          ..write('dischargeDate: $dischargeDate, ')
          ..write('isEmergency: $isEmergency')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    procedureName,
    surgeonName,
    hospital,
    operatingRoom,
    surgeryDate,
    surgeryStartTime,
    surgeryEndTime,
    anesthesiaType,
    anesthesiologist,
    indication,
    findings,
    complications,
    recoveryNotes,
    followUpPlan,
    dischargeDate,
    isEmergency,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SurgicalRecord &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.procedureName == this.procedureName &&
          other.surgeonName == this.surgeonName &&
          other.hospital == this.hospital &&
          other.operatingRoom == this.operatingRoom &&
          other.surgeryDate == this.surgeryDate &&
          other.surgeryStartTime == this.surgeryStartTime &&
          other.surgeryEndTime == this.surgeryEndTime &&
          other.anesthesiaType == this.anesthesiaType &&
          other.anesthesiologist == this.anesthesiologist &&
          other.indication == this.indication &&
          other.findings == this.findings &&
          other.complications == this.complications &&
          other.recoveryNotes == this.recoveryNotes &&
          other.followUpPlan == this.followUpPlan &&
          other.dischargeDate == this.dischargeDate &&
          other.isEmergency == this.isEmergency);
}

class SurgicalRecordsCompanion extends UpdateCompanion<SurgicalRecord> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> procedureName;
  final Value<String?> surgeonName;
  final Value<String?> hospital;
  final Value<String?> operatingRoom;
  final Value<DateTime> surgeryDate;
  final Value<DateTime?> surgeryStartTime;
  final Value<DateTime?> surgeryEndTime;
  final Value<String?> anesthesiaType;
  final Value<String?> anesthesiologist;
  final Value<String?> indication;
  final Value<String?> findings;
  final Value<String?> complications;
  final Value<String?> recoveryNotes;
  final Value<String?> followUpPlan;
  final Value<DateTime?> dischargeDate;
  final Value<bool> isEmergency;
  final Value<int> rowid;
  const SurgicalRecordsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.procedureName = const Value.absent(),
    this.surgeonName = const Value.absent(),
    this.hospital = const Value.absent(),
    this.operatingRoom = const Value.absent(),
    this.surgeryDate = const Value.absent(),
    this.surgeryStartTime = const Value.absent(),
    this.surgeryEndTime = const Value.absent(),
    this.anesthesiaType = const Value.absent(),
    this.anesthesiologist = const Value.absent(),
    this.indication = const Value.absent(),
    this.findings = const Value.absent(),
    this.complications = const Value.absent(),
    this.recoveryNotes = const Value.absent(),
    this.followUpPlan = const Value.absent(),
    this.dischargeDate = const Value.absent(),
    this.isEmergency = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  SurgicalRecordsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String procedureName,
    this.surgeonName = const Value.absent(),
    this.hospital = const Value.absent(),
    this.operatingRoom = const Value.absent(),
    required DateTime surgeryDate,
    this.surgeryStartTime = const Value.absent(),
    this.surgeryEndTime = const Value.absent(),
    this.anesthesiaType = const Value.absent(),
    this.anesthesiologist = const Value.absent(),
    this.indication = const Value.absent(),
    this.findings = const Value.absent(),
    this.complications = const Value.absent(),
    this.recoveryNotes = const Value.absent(),
    this.followUpPlan = const Value.absent(),
    this.dischargeDate = const Value.absent(),
    this.isEmergency = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       procedureName = Value(procedureName),
       surgeryDate = Value(surgeryDate);
  static Insertable<SurgicalRecord> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? procedureName,
    Expression<String>? surgeonName,
    Expression<String>? hospital,
    Expression<String>? operatingRoom,
    Expression<DateTime>? surgeryDate,
    Expression<DateTime>? surgeryStartTime,
    Expression<DateTime>? surgeryEndTime,
    Expression<String>? anesthesiaType,
    Expression<String>? anesthesiologist,
    Expression<String>? indication,
    Expression<String>? findings,
    Expression<String>? complications,
    Expression<String>? recoveryNotes,
    Expression<String>? followUpPlan,
    Expression<DateTime>? dischargeDate,
    Expression<bool>? isEmergency,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (procedureName != null) 'procedure_name': procedureName,
      if (surgeonName != null) 'surgeon_name': surgeonName,
      if (hospital != null) 'hospital': hospital,
      if (operatingRoom != null) 'operating_room': operatingRoom,
      if (surgeryDate != null) 'surgery_date': surgeryDate,
      if (surgeryStartTime != null) 'surgery_start_time': surgeryStartTime,
      if (surgeryEndTime != null) 'surgery_end_time': surgeryEndTime,
      if (anesthesiaType != null) 'anesthesia_type': anesthesiaType,
      if (anesthesiologist != null) 'anesthesiologist': anesthesiologist,
      if (indication != null) 'indication': indication,
      if (findings != null) 'findings': findings,
      if (complications != null) 'complications': complications,
      if (recoveryNotes != null) 'recovery_notes': recoveryNotes,
      if (followUpPlan != null) 'follow_up_plan': followUpPlan,
      if (dischargeDate != null) 'discharge_date': dischargeDate,
      if (isEmergency != null) 'is_emergency': isEmergency,
      if (rowid != null) 'rowid': rowid,
    });
  }

  SurgicalRecordsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? procedureName,
    Value<String?>? surgeonName,
    Value<String?>? hospital,
    Value<String?>? operatingRoom,
    Value<DateTime>? surgeryDate,
    Value<DateTime?>? surgeryStartTime,
    Value<DateTime?>? surgeryEndTime,
    Value<String?>? anesthesiaType,
    Value<String?>? anesthesiologist,
    Value<String?>? indication,
    Value<String?>? findings,
    Value<String?>? complications,
    Value<String?>? recoveryNotes,
    Value<String?>? followUpPlan,
    Value<DateTime?>? dischargeDate,
    Value<bool>? isEmergency,
    Value<int>? rowid,
  }) {
    return SurgicalRecordsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      procedureName: procedureName ?? this.procedureName,
      surgeonName: surgeonName ?? this.surgeonName,
      hospital: hospital ?? this.hospital,
      operatingRoom: operatingRoom ?? this.operatingRoom,
      surgeryDate: surgeryDate ?? this.surgeryDate,
      surgeryStartTime: surgeryStartTime ?? this.surgeryStartTime,
      surgeryEndTime: surgeryEndTime ?? this.surgeryEndTime,
      anesthesiaType: anesthesiaType ?? this.anesthesiaType,
      anesthesiologist: anesthesiologist ?? this.anesthesiologist,
      indication: indication ?? this.indication,
      findings: findings ?? this.findings,
      complications: complications ?? this.complications,
      recoveryNotes: recoveryNotes ?? this.recoveryNotes,
      followUpPlan: followUpPlan ?? this.followUpPlan,
      dischargeDate: dischargeDate ?? this.dischargeDate,
      isEmergency: isEmergency ?? this.isEmergency,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (procedureName.present) {
      map['procedure_name'] = Variable<String>(procedureName.value);
    }
    if (surgeonName.present) {
      map['surgeon_name'] = Variable<String>(surgeonName.value);
    }
    if (hospital.present) {
      map['hospital'] = Variable<String>(hospital.value);
    }
    if (operatingRoom.present) {
      map['operating_room'] = Variable<String>(operatingRoom.value);
    }
    if (surgeryDate.present) {
      map['surgery_date'] = Variable<DateTime>(surgeryDate.value);
    }
    if (surgeryStartTime.present) {
      map['surgery_start_time'] = Variable<DateTime>(surgeryStartTime.value);
    }
    if (surgeryEndTime.present) {
      map['surgery_end_time'] = Variable<DateTime>(surgeryEndTime.value);
    }
    if (anesthesiaType.present) {
      map['anesthesia_type'] = Variable<String>(anesthesiaType.value);
    }
    if (anesthesiologist.present) {
      map['anesthesiologist'] = Variable<String>(anesthesiologist.value);
    }
    if (indication.present) {
      map['indication'] = Variable<String>(indication.value);
    }
    if (findings.present) {
      map['findings'] = Variable<String>(findings.value);
    }
    if (complications.present) {
      map['complications'] = Variable<String>(complications.value);
    }
    if (recoveryNotes.present) {
      map['recovery_notes'] = Variable<String>(recoveryNotes.value);
    }
    if (followUpPlan.present) {
      map['follow_up_plan'] = Variable<String>(followUpPlan.value);
    }
    if (dischargeDate.present) {
      map['discharge_date'] = Variable<DateTime>(dischargeDate.value);
    }
    if (isEmergency.present) {
      map['is_emergency'] = Variable<bool>(isEmergency.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SurgicalRecordsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('procedureName: $procedureName, ')
          ..write('surgeonName: $surgeonName, ')
          ..write('hospital: $hospital, ')
          ..write('operatingRoom: $operatingRoom, ')
          ..write('surgeryDate: $surgeryDate, ')
          ..write('surgeryStartTime: $surgeryStartTime, ')
          ..write('surgeryEndTime: $surgeryEndTime, ')
          ..write('anesthesiaType: $anesthesiaType, ')
          ..write('anesthesiologist: $anesthesiologist, ')
          ..write('indication: $indication, ')
          ..write('findings: $findings, ')
          ..write('complications: $complications, ')
          ..write('recoveryNotes: $recoveryNotes, ')
          ..write('followUpPlan: $followUpPlan, ')
          ..write('dischargeDate: $dischargeDate, ')
          ..write('isEmergency: $isEmergency, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $RadiologyRecordsTable extends RadiologyRecords
    with TableInfo<$RadiologyRecordsTable, RadiologyRecord> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $RadiologyRecordsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('radiology_record'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _studyTypeMeta = const VerificationMeta(
    'studyType',
  );
  @override
  late final GeneratedColumn<String> studyType = GeneratedColumn<String>(
    'study_type',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _bodyPartMeta = const VerificationMeta(
    'bodyPart',
  );
  @override
  late final GeneratedColumn<String> bodyPart = GeneratedColumn<String>(
    'body_part',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _radiologistMeta = const VerificationMeta(
    'radiologist',
  );
  @override
  late final GeneratedColumn<String> radiologist = GeneratedColumn<String>(
    'radiologist',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _facilityMeta = const VerificationMeta(
    'facility',
  );
  @override
  late final GeneratedColumn<String> facility = GeneratedColumn<String>(
    'facility',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _studyDateMeta = const VerificationMeta(
    'studyDate',
  );
  @override
  late final GeneratedColumn<DateTime> studyDate = GeneratedColumn<DateTime>(
    'study_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _techniqueMeta = const VerificationMeta(
    'technique',
  );
  @override
  late final GeneratedColumn<String> technique = GeneratedColumn<String>(
    'technique',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _contrastMeta = const VerificationMeta(
    'contrast',
  );
  @override
  late final GeneratedColumn<String> contrast = GeneratedColumn<String>(
    'contrast',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _findingsMeta = const VerificationMeta(
    'findings',
  );
  @override
  late final GeneratedColumn<String> findings = GeneratedColumn<String>(
    'findings',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _impressionMeta = const VerificationMeta(
    'impression',
  );
  @override
  late final GeneratedColumn<String> impression = GeneratedColumn<String>(
    'impression',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recommendationMeta = const VerificationMeta(
    'recommendation',
  );
  @override
  late final GeneratedColumn<String> recommendation = GeneratedColumn<String>(
    'recommendation',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _urgencyMeta = const VerificationMeta(
    'urgency',
  );
  @override
  late final GeneratedColumn<String> urgency = GeneratedColumn<String>(
    'urgency',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _isNormalMeta = const VerificationMeta(
    'isNormal',
  );
  @override
  late final GeneratedColumn<bool> isNormal = GeneratedColumn<bool>(
    'is_normal',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_normal" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  static const VerificationMeta _referringPhysicianMeta =
      const VerificationMeta('referringPhysician');
  @override
  late final GeneratedColumn<String> referringPhysician =
      GeneratedColumn<String>(
        'referring_physician',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _protocolUsedMeta = const VerificationMeta(
    'protocolUsed',
  );
  @override
  late final GeneratedColumn<String> protocolUsed = GeneratedColumn<String>(
    'protocol_used',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    studyType,
    bodyPart,
    radiologist,
    facility,
    studyDate,
    technique,
    contrast,
    findings,
    impression,
    recommendation,
    urgency,
    isNormal,
    referringPhysician,
    protocolUsed,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'radiology_records';
  @override
  VerificationContext validateIntegrity(
    Insertable<RadiologyRecord> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('study_type')) {
      context.handle(
        _studyTypeMeta,
        studyType.isAcceptableOrUnknown(data['study_type']!, _studyTypeMeta),
      );
    } else if (isInserting) {
      context.missing(_studyTypeMeta);
    }
    if (data.containsKey('body_part')) {
      context.handle(
        _bodyPartMeta,
        bodyPart.isAcceptableOrUnknown(data['body_part']!, _bodyPartMeta),
      );
    }
    if (data.containsKey('radiologist')) {
      context.handle(
        _radiologistMeta,
        radiologist.isAcceptableOrUnknown(
          data['radiologist']!,
          _radiologistMeta,
        ),
      );
    }
    if (data.containsKey('facility')) {
      context.handle(
        _facilityMeta,
        facility.isAcceptableOrUnknown(data['facility']!, _facilityMeta),
      );
    }
    if (data.containsKey('study_date')) {
      context.handle(
        _studyDateMeta,
        studyDate.isAcceptableOrUnknown(data['study_date']!, _studyDateMeta),
      );
    } else if (isInserting) {
      context.missing(_studyDateMeta);
    }
    if (data.containsKey('technique')) {
      context.handle(
        _techniqueMeta,
        technique.isAcceptableOrUnknown(data['technique']!, _techniqueMeta),
      );
    }
    if (data.containsKey('contrast')) {
      context.handle(
        _contrastMeta,
        contrast.isAcceptableOrUnknown(data['contrast']!, _contrastMeta),
      );
    }
    if (data.containsKey('findings')) {
      context.handle(
        _findingsMeta,
        findings.isAcceptableOrUnknown(data['findings']!, _findingsMeta),
      );
    }
    if (data.containsKey('impression')) {
      context.handle(
        _impressionMeta,
        impression.isAcceptableOrUnknown(data['impression']!, _impressionMeta),
      );
    }
    if (data.containsKey('recommendation')) {
      context.handle(
        _recommendationMeta,
        recommendation.isAcceptableOrUnknown(
          data['recommendation']!,
          _recommendationMeta,
        ),
      );
    }
    if (data.containsKey('urgency')) {
      context.handle(
        _urgencyMeta,
        urgency.isAcceptableOrUnknown(data['urgency']!, _urgencyMeta),
      );
    } else if (isInserting) {
      context.missing(_urgencyMeta);
    }
    if (data.containsKey('is_normal')) {
      context.handle(
        _isNormalMeta,
        isNormal.isAcceptableOrUnknown(data['is_normal']!, _isNormalMeta),
      );
    }
    if (data.containsKey('referring_physician')) {
      context.handle(
        _referringPhysicianMeta,
        referringPhysician.isAcceptableOrUnknown(
          data['referring_physician']!,
          _referringPhysicianMeta,
        ),
      );
    }
    if (data.containsKey('protocol_used')) {
      context.handle(
        _protocolUsedMeta,
        protocolUsed.isAcceptableOrUnknown(
          data['protocol_used']!,
          _protocolUsedMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  RadiologyRecord map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return RadiologyRecord(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      studyType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}study_type'],
      )!,
      bodyPart: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}body_part'],
      ),
      radiologist: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}radiologist'],
      ),
      facility: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}facility'],
      ),
      studyDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}study_date'],
      )!,
      technique: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}technique'],
      ),
      contrast: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}contrast'],
      ),
      findings: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}findings'],
      ),
      impression: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}impression'],
      ),
      recommendation: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}recommendation'],
      ),
      urgency: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}urgency'],
      )!,
      isNormal: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_normal'],
      )!,
      referringPhysician: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}referring_physician'],
      ),
      protocolUsed: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}protocol_used'],
      ),
    );
  }

  @override
  $RadiologyRecordsTable createAlias(String alias) {
    return $RadiologyRecordsTable(attachedDatabase, alias);
  }
}

class RadiologyRecord extends DataClass implements Insertable<RadiologyRecord> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String studyType;
  final String? bodyPart;
  final String? radiologist;
  final String? facility;
  final DateTime studyDate;
  final String? technique;
  final String? contrast;
  final String? findings;
  final String? impression;
  final String? recommendation;
  final String urgency;
  final bool isNormal;
  final String? referringPhysician;
  final String? protocolUsed;
  const RadiologyRecord({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.studyType,
    this.bodyPart,
    this.radiologist,
    this.facility,
    required this.studyDate,
    this.technique,
    this.contrast,
    this.findings,
    this.impression,
    this.recommendation,
    required this.urgency,
    required this.isNormal,
    this.referringPhysician,
    this.protocolUsed,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['study_type'] = Variable<String>(studyType);
    if (!nullToAbsent || bodyPart != null) {
      map['body_part'] = Variable<String>(bodyPart);
    }
    if (!nullToAbsent || radiologist != null) {
      map['radiologist'] = Variable<String>(radiologist);
    }
    if (!nullToAbsent || facility != null) {
      map['facility'] = Variable<String>(facility);
    }
    map['study_date'] = Variable<DateTime>(studyDate);
    if (!nullToAbsent || technique != null) {
      map['technique'] = Variable<String>(technique);
    }
    if (!nullToAbsent || contrast != null) {
      map['contrast'] = Variable<String>(contrast);
    }
    if (!nullToAbsent || findings != null) {
      map['findings'] = Variable<String>(findings);
    }
    if (!nullToAbsent || impression != null) {
      map['impression'] = Variable<String>(impression);
    }
    if (!nullToAbsent || recommendation != null) {
      map['recommendation'] = Variable<String>(recommendation);
    }
    map['urgency'] = Variable<String>(urgency);
    map['is_normal'] = Variable<bool>(isNormal);
    if (!nullToAbsent || referringPhysician != null) {
      map['referring_physician'] = Variable<String>(referringPhysician);
    }
    if (!nullToAbsent || protocolUsed != null) {
      map['protocol_used'] = Variable<String>(protocolUsed);
    }
    return map;
  }

  RadiologyRecordsCompanion toCompanion(bool nullToAbsent) {
    return RadiologyRecordsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      studyType: Value(studyType),
      bodyPart: bodyPart == null && nullToAbsent
          ? const Value.absent()
          : Value(bodyPart),
      radiologist: radiologist == null && nullToAbsent
          ? const Value.absent()
          : Value(radiologist),
      facility: facility == null && nullToAbsent
          ? const Value.absent()
          : Value(facility),
      studyDate: Value(studyDate),
      technique: technique == null && nullToAbsent
          ? const Value.absent()
          : Value(technique),
      contrast: contrast == null && nullToAbsent
          ? const Value.absent()
          : Value(contrast),
      findings: findings == null && nullToAbsent
          ? const Value.absent()
          : Value(findings),
      impression: impression == null && nullToAbsent
          ? const Value.absent()
          : Value(impression),
      recommendation: recommendation == null && nullToAbsent
          ? const Value.absent()
          : Value(recommendation),
      urgency: Value(urgency),
      isNormal: Value(isNormal),
      referringPhysician: referringPhysician == null && nullToAbsent
          ? const Value.absent()
          : Value(referringPhysician),
      protocolUsed: protocolUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(protocolUsed),
    );
  }

  factory RadiologyRecord.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return RadiologyRecord(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      studyType: serializer.fromJson<String>(json['studyType']),
      bodyPart: serializer.fromJson<String?>(json['bodyPart']),
      radiologist: serializer.fromJson<String?>(json['radiologist']),
      facility: serializer.fromJson<String?>(json['facility']),
      studyDate: serializer.fromJson<DateTime>(json['studyDate']),
      technique: serializer.fromJson<String?>(json['technique']),
      contrast: serializer.fromJson<String?>(json['contrast']),
      findings: serializer.fromJson<String?>(json['findings']),
      impression: serializer.fromJson<String?>(json['impression']),
      recommendation: serializer.fromJson<String?>(json['recommendation']),
      urgency: serializer.fromJson<String>(json['urgency']),
      isNormal: serializer.fromJson<bool>(json['isNormal']),
      referringPhysician: serializer.fromJson<String?>(
        json['referringPhysician'],
      ),
      protocolUsed: serializer.fromJson<String?>(json['protocolUsed']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'studyType': serializer.toJson<String>(studyType),
      'bodyPart': serializer.toJson<String?>(bodyPart),
      'radiologist': serializer.toJson<String?>(radiologist),
      'facility': serializer.toJson<String?>(facility),
      'studyDate': serializer.toJson<DateTime>(studyDate),
      'technique': serializer.toJson<String?>(technique),
      'contrast': serializer.toJson<String?>(contrast),
      'findings': serializer.toJson<String?>(findings),
      'impression': serializer.toJson<String?>(impression),
      'recommendation': serializer.toJson<String?>(recommendation),
      'urgency': serializer.toJson<String>(urgency),
      'isNormal': serializer.toJson<bool>(isNormal),
      'referringPhysician': serializer.toJson<String?>(referringPhysician),
      'protocolUsed': serializer.toJson<String?>(protocolUsed),
    };
  }

  RadiologyRecord copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? studyType,
    Value<String?> bodyPart = const Value.absent(),
    Value<String?> radiologist = const Value.absent(),
    Value<String?> facility = const Value.absent(),
    DateTime? studyDate,
    Value<String?> technique = const Value.absent(),
    Value<String?> contrast = const Value.absent(),
    Value<String?> findings = const Value.absent(),
    Value<String?> impression = const Value.absent(),
    Value<String?> recommendation = const Value.absent(),
    String? urgency,
    bool? isNormal,
    Value<String?> referringPhysician = const Value.absent(),
    Value<String?> protocolUsed = const Value.absent(),
  }) => RadiologyRecord(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    studyType: studyType ?? this.studyType,
    bodyPart: bodyPart.present ? bodyPart.value : this.bodyPart,
    radiologist: radiologist.present ? radiologist.value : this.radiologist,
    facility: facility.present ? facility.value : this.facility,
    studyDate: studyDate ?? this.studyDate,
    technique: technique.present ? technique.value : this.technique,
    contrast: contrast.present ? contrast.value : this.contrast,
    findings: findings.present ? findings.value : this.findings,
    impression: impression.present ? impression.value : this.impression,
    recommendation: recommendation.present
        ? recommendation.value
        : this.recommendation,
    urgency: urgency ?? this.urgency,
    isNormal: isNormal ?? this.isNormal,
    referringPhysician: referringPhysician.present
        ? referringPhysician.value
        : this.referringPhysician,
    protocolUsed: protocolUsed.present ? protocolUsed.value : this.protocolUsed,
  );
  RadiologyRecord copyWithCompanion(RadiologyRecordsCompanion data) {
    return RadiologyRecord(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      studyType: data.studyType.present ? data.studyType.value : this.studyType,
      bodyPart: data.bodyPart.present ? data.bodyPart.value : this.bodyPart,
      radiologist: data.radiologist.present
          ? data.radiologist.value
          : this.radiologist,
      facility: data.facility.present ? data.facility.value : this.facility,
      studyDate: data.studyDate.present ? data.studyDate.value : this.studyDate,
      technique: data.technique.present ? data.technique.value : this.technique,
      contrast: data.contrast.present ? data.contrast.value : this.contrast,
      findings: data.findings.present ? data.findings.value : this.findings,
      impression: data.impression.present
          ? data.impression.value
          : this.impression,
      recommendation: data.recommendation.present
          ? data.recommendation.value
          : this.recommendation,
      urgency: data.urgency.present ? data.urgency.value : this.urgency,
      isNormal: data.isNormal.present ? data.isNormal.value : this.isNormal,
      referringPhysician: data.referringPhysician.present
          ? data.referringPhysician.value
          : this.referringPhysician,
      protocolUsed: data.protocolUsed.present
          ? data.protocolUsed.value
          : this.protocolUsed,
    );
  }

  @override
  String toString() {
    return (StringBuffer('RadiologyRecord(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('studyType: $studyType, ')
          ..write('bodyPart: $bodyPart, ')
          ..write('radiologist: $radiologist, ')
          ..write('facility: $facility, ')
          ..write('studyDate: $studyDate, ')
          ..write('technique: $technique, ')
          ..write('contrast: $contrast, ')
          ..write('findings: $findings, ')
          ..write('impression: $impression, ')
          ..write('recommendation: $recommendation, ')
          ..write('urgency: $urgency, ')
          ..write('isNormal: $isNormal, ')
          ..write('referringPhysician: $referringPhysician, ')
          ..write('protocolUsed: $protocolUsed')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    studyType,
    bodyPart,
    radiologist,
    facility,
    studyDate,
    technique,
    contrast,
    findings,
    impression,
    recommendation,
    urgency,
    isNormal,
    referringPhysician,
    protocolUsed,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RadiologyRecord &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.studyType == this.studyType &&
          other.bodyPart == this.bodyPart &&
          other.radiologist == this.radiologist &&
          other.facility == this.facility &&
          other.studyDate == this.studyDate &&
          other.technique == this.technique &&
          other.contrast == this.contrast &&
          other.findings == this.findings &&
          other.impression == this.impression &&
          other.recommendation == this.recommendation &&
          other.urgency == this.urgency &&
          other.isNormal == this.isNormal &&
          other.referringPhysician == this.referringPhysician &&
          other.protocolUsed == this.protocolUsed);
}

class RadiologyRecordsCompanion extends UpdateCompanion<RadiologyRecord> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> studyType;
  final Value<String?> bodyPart;
  final Value<String?> radiologist;
  final Value<String?> facility;
  final Value<DateTime> studyDate;
  final Value<String?> technique;
  final Value<String?> contrast;
  final Value<String?> findings;
  final Value<String?> impression;
  final Value<String?> recommendation;
  final Value<String> urgency;
  final Value<bool> isNormal;
  final Value<String?> referringPhysician;
  final Value<String?> protocolUsed;
  final Value<int> rowid;
  const RadiologyRecordsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.studyType = const Value.absent(),
    this.bodyPart = const Value.absent(),
    this.radiologist = const Value.absent(),
    this.facility = const Value.absent(),
    this.studyDate = const Value.absent(),
    this.technique = const Value.absent(),
    this.contrast = const Value.absent(),
    this.findings = const Value.absent(),
    this.impression = const Value.absent(),
    this.recommendation = const Value.absent(),
    this.urgency = const Value.absent(),
    this.isNormal = const Value.absent(),
    this.referringPhysician = const Value.absent(),
    this.protocolUsed = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  RadiologyRecordsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String studyType,
    this.bodyPart = const Value.absent(),
    this.radiologist = const Value.absent(),
    this.facility = const Value.absent(),
    required DateTime studyDate,
    this.technique = const Value.absent(),
    this.contrast = const Value.absent(),
    this.findings = const Value.absent(),
    this.impression = const Value.absent(),
    this.recommendation = const Value.absent(),
    required String urgency,
    this.isNormal = const Value.absent(),
    this.referringPhysician = const Value.absent(),
    this.protocolUsed = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       studyType = Value(studyType),
       studyDate = Value(studyDate),
       urgency = Value(urgency);
  static Insertable<RadiologyRecord> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? studyType,
    Expression<String>? bodyPart,
    Expression<String>? radiologist,
    Expression<String>? facility,
    Expression<DateTime>? studyDate,
    Expression<String>? technique,
    Expression<String>? contrast,
    Expression<String>? findings,
    Expression<String>? impression,
    Expression<String>? recommendation,
    Expression<String>? urgency,
    Expression<bool>? isNormal,
    Expression<String>? referringPhysician,
    Expression<String>? protocolUsed,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (studyType != null) 'study_type': studyType,
      if (bodyPart != null) 'body_part': bodyPart,
      if (radiologist != null) 'radiologist': radiologist,
      if (facility != null) 'facility': facility,
      if (studyDate != null) 'study_date': studyDate,
      if (technique != null) 'technique': technique,
      if (contrast != null) 'contrast': contrast,
      if (findings != null) 'findings': findings,
      if (impression != null) 'impression': impression,
      if (recommendation != null) 'recommendation': recommendation,
      if (urgency != null) 'urgency': urgency,
      if (isNormal != null) 'is_normal': isNormal,
      if (referringPhysician != null) 'referring_physician': referringPhysician,
      if (protocolUsed != null) 'protocol_used': protocolUsed,
      if (rowid != null) 'rowid': rowid,
    });
  }

  RadiologyRecordsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? studyType,
    Value<String?>? bodyPart,
    Value<String?>? radiologist,
    Value<String?>? facility,
    Value<DateTime>? studyDate,
    Value<String?>? technique,
    Value<String?>? contrast,
    Value<String?>? findings,
    Value<String?>? impression,
    Value<String?>? recommendation,
    Value<String>? urgency,
    Value<bool>? isNormal,
    Value<String?>? referringPhysician,
    Value<String?>? protocolUsed,
    Value<int>? rowid,
  }) {
    return RadiologyRecordsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      studyType: studyType ?? this.studyType,
      bodyPart: bodyPart ?? this.bodyPart,
      radiologist: radiologist ?? this.radiologist,
      facility: facility ?? this.facility,
      studyDate: studyDate ?? this.studyDate,
      technique: technique ?? this.technique,
      contrast: contrast ?? this.contrast,
      findings: findings ?? this.findings,
      impression: impression ?? this.impression,
      recommendation: recommendation ?? this.recommendation,
      urgency: urgency ?? this.urgency,
      isNormal: isNormal ?? this.isNormal,
      referringPhysician: referringPhysician ?? this.referringPhysician,
      protocolUsed: protocolUsed ?? this.protocolUsed,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (studyType.present) {
      map['study_type'] = Variable<String>(studyType.value);
    }
    if (bodyPart.present) {
      map['body_part'] = Variable<String>(bodyPart.value);
    }
    if (radiologist.present) {
      map['radiologist'] = Variable<String>(radiologist.value);
    }
    if (facility.present) {
      map['facility'] = Variable<String>(facility.value);
    }
    if (studyDate.present) {
      map['study_date'] = Variable<DateTime>(studyDate.value);
    }
    if (technique.present) {
      map['technique'] = Variable<String>(technique.value);
    }
    if (contrast.present) {
      map['contrast'] = Variable<String>(contrast.value);
    }
    if (findings.present) {
      map['findings'] = Variable<String>(findings.value);
    }
    if (impression.present) {
      map['impression'] = Variable<String>(impression.value);
    }
    if (recommendation.present) {
      map['recommendation'] = Variable<String>(recommendation.value);
    }
    if (urgency.present) {
      map['urgency'] = Variable<String>(urgency.value);
    }
    if (isNormal.present) {
      map['is_normal'] = Variable<bool>(isNormal.value);
    }
    if (referringPhysician.present) {
      map['referring_physician'] = Variable<String>(referringPhysician.value);
    }
    if (protocolUsed.present) {
      map['protocol_used'] = Variable<String>(protocolUsed.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RadiologyRecordsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('studyType: $studyType, ')
          ..write('bodyPart: $bodyPart, ')
          ..write('radiologist: $radiologist, ')
          ..write('facility: $facility, ')
          ..write('studyDate: $studyDate, ')
          ..write('technique: $technique, ')
          ..write('contrast: $contrast, ')
          ..write('findings: $findings, ')
          ..write('impression: $impression, ')
          ..write('recommendation: $recommendation, ')
          ..write('urgency: $urgency, ')
          ..write('isNormal: $isNormal, ')
          ..write('referringPhysician: $referringPhysician, ')
          ..write('protocolUsed: $protocolUsed, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $PathologyRecordsTable extends PathologyRecords
    with TableInfo<$PathologyRecordsTable, PathologyRecord> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PathologyRecordsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('pathology_record'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _specimenTypeMeta = const VerificationMeta(
    'specimenType',
  );
  @override
  late final GeneratedColumn<String> specimenType = GeneratedColumn<String>(
    'specimen_type',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _specimenSiteMeta = const VerificationMeta(
    'specimenSite',
  );
  @override
  late final GeneratedColumn<String> specimenSite = GeneratedColumn<String>(
    'specimen_site',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _pathologistMeta = const VerificationMeta(
    'pathologist',
  );
  @override
  late final GeneratedColumn<String> pathologist = GeneratedColumn<String>(
    'pathologist',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _laboratoryMeta = const VerificationMeta(
    'laboratory',
  );
  @override
  late final GeneratedColumn<String> laboratory = GeneratedColumn<String>(
    'laboratory',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _collectionDateMeta = const VerificationMeta(
    'collectionDate',
  );
  @override
  late final GeneratedColumn<DateTime> collectionDate =
      GeneratedColumn<DateTime>(
        'collection_date',
        aliasedName,
        false,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _reportDateMeta = const VerificationMeta(
    'reportDate',
  );
  @override
  late final GeneratedColumn<DateTime> reportDate = GeneratedColumn<DateTime>(
    'report_date',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _collectionMethodMeta = const VerificationMeta(
    'collectionMethod',
  );
  @override
  late final GeneratedColumn<String> collectionMethod = GeneratedColumn<String>(
    'collection_method',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _grossDescriptionMeta = const VerificationMeta(
    'grossDescription',
  );
  @override
  late final GeneratedColumn<String> grossDescription = GeneratedColumn<String>(
    'gross_description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _microscopicFindingsMeta =
      const VerificationMeta('microscopicFindings');
  @override
  late final GeneratedColumn<String> microscopicFindings =
      GeneratedColumn<String>(
        'microscopic_findings',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _diagnosisMeta = const VerificationMeta(
    'diagnosis',
  );
  @override
  late final GeneratedColumn<String> diagnosis = GeneratedColumn<String>(
    'diagnosis',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _stagingGradingMeta = const VerificationMeta(
    'stagingGrading',
  );
  @override
  late final GeneratedColumn<String> stagingGrading = GeneratedColumn<String>(
    'staging_grading',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _immunohistochemistryMeta =
      const VerificationMeta('immunohistochemistry');
  @override
  late final GeneratedColumn<String> immunohistochemistry =
      GeneratedColumn<String>(
        'immunohistochemistry',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _molecularStudiesMeta = const VerificationMeta(
    'molecularStudies',
  );
  @override
  late final GeneratedColumn<String> molecularStudies = GeneratedColumn<String>(
    'molecular_studies',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recommendationMeta = const VerificationMeta(
    'recommendation',
  );
  @override
  late final GeneratedColumn<String> recommendation = GeneratedColumn<String>(
    'recommendation',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _urgencyMeta = const VerificationMeta(
    'urgency',
  );
  @override
  late final GeneratedColumn<String> urgency = GeneratedColumn<String>(
    'urgency',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _isMalignantMeta = const VerificationMeta(
    'isMalignant',
  );
  @override
  late final GeneratedColumn<bool> isMalignant = GeneratedColumn<bool>(
    'is_malignant',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_malignant" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  static const VerificationMeta _referringPhysicianMeta =
      const VerificationMeta('referringPhysician');
  @override
  late final GeneratedColumn<String> referringPhysician =
      GeneratedColumn<String>(
        'referring_physician',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    specimenType,
    specimenSite,
    pathologist,
    laboratory,
    collectionDate,
    reportDate,
    collectionMethod,
    grossDescription,
    microscopicFindings,
    diagnosis,
    stagingGrading,
    immunohistochemistry,
    molecularStudies,
    recommendation,
    urgency,
    isMalignant,
    referringPhysician,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'pathology_records';
  @override
  VerificationContext validateIntegrity(
    Insertable<PathologyRecord> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('specimen_type')) {
      context.handle(
        _specimenTypeMeta,
        specimenType.isAcceptableOrUnknown(
          data['specimen_type']!,
          _specimenTypeMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_specimenTypeMeta);
    }
    if (data.containsKey('specimen_site')) {
      context.handle(
        _specimenSiteMeta,
        specimenSite.isAcceptableOrUnknown(
          data['specimen_site']!,
          _specimenSiteMeta,
        ),
      );
    }
    if (data.containsKey('pathologist')) {
      context.handle(
        _pathologistMeta,
        pathologist.isAcceptableOrUnknown(
          data['pathologist']!,
          _pathologistMeta,
        ),
      );
    }
    if (data.containsKey('laboratory')) {
      context.handle(
        _laboratoryMeta,
        laboratory.isAcceptableOrUnknown(data['laboratory']!, _laboratoryMeta),
      );
    }
    if (data.containsKey('collection_date')) {
      context.handle(
        _collectionDateMeta,
        collectionDate.isAcceptableOrUnknown(
          data['collection_date']!,
          _collectionDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_collectionDateMeta);
    }
    if (data.containsKey('report_date')) {
      context.handle(
        _reportDateMeta,
        reportDate.isAcceptableOrUnknown(data['report_date']!, _reportDateMeta),
      );
    }
    if (data.containsKey('collection_method')) {
      context.handle(
        _collectionMethodMeta,
        collectionMethod.isAcceptableOrUnknown(
          data['collection_method']!,
          _collectionMethodMeta,
        ),
      );
    }
    if (data.containsKey('gross_description')) {
      context.handle(
        _grossDescriptionMeta,
        grossDescription.isAcceptableOrUnknown(
          data['gross_description']!,
          _grossDescriptionMeta,
        ),
      );
    }
    if (data.containsKey('microscopic_findings')) {
      context.handle(
        _microscopicFindingsMeta,
        microscopicFindings.isAcceptableOrUnknown(
          data['microscopic_findings']!,
          _microscopicFindingsMeta,
        ),
      );
    }
    if (data.containsKey('diagnosis')) {
      context.handle(
        _diagnosisMeta,
        diagnosis.isAcceptableOrUnknown(data['diagnosis']!, _diagnosisMeta),
      );
    }
    if (data.containsKey('staging_grading')) {
      context.handle(
        _stagingGradingMeta,
        stagingGrading.isAcceptableOrUnknown(
          data['staging_grading']!,
          _stagingGradingMeta,
        ),
      );
    }
    if (data.containsKey('immunohistochemistry')) {
      context.handle(
        _immunohistochemistryMeta,
        immunohistochemistry.isAcceptableOrUnknown(
          data['immunohistochemistry']!,
          _immunohistochemistryMeta,
        ),
      );
    }
    if (data.containsKey('molecular_studies')) {
      context.handle(
        _molecularStudiesMeta,
        molecularStudies.isAcceptableOrUnknown(
          data['molecular_studies']!,
          _molecularStudiesMeta,
        ),
      );
    }
    if (data.containsKey('recommendation')) {
      context.handle(
        _recommendationMeta,
        recommendation.isAcceptableOrUnknown(
          data['recommendation']!,
          _recommendationMeta,
        ),
      );
    }
    if (data.containsKey('urgency')) {
      context.handle(
        _urgencyMeta,
        urgency.isAcceptableOrUnknown(data['urgency']!, _urgencyMeta),
      );
    } else if (isInserting) {
      context.missing(_urgencyMeta);
    }
    if (data.containsKey('is_malignant')) {
      context.handle(
        _isMalignantMeta,
        isMalignant.isAcceptableOrUnknown(
          data['is_malignant']!,
          _isMalignantMeta,
        ),
      );
    }
    if (data.containsKey('referring_physician')) {
      context.handle(
        _referringPhysicianMeta,
        referringPhysician.isAcceptableOrUnknown(
          data['referring_physician']!,
          _referringPhysicianMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PathologyRecord map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return PathologyRecord(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      specimenType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}specimen_type'],
      )!,
      specimenSite: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}specimen_site'],
      ),
      pathologist: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pathologist'],
      ),
      laboratory: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}laboratory'],
      ),
      collectionDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}collection_date'],
      )!,
      reportDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}report_date'],
      ),
      collectionMethod: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}collection_method'],
      ),
      grossDescription: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}gross_description'],
      ),
      microscopicFindings: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}microscopic_findings'],
      ),
      diagnosis: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}diagnosis'],
      ),
      stagingGrading: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}staging_grading'],
      ),
      immunohistochemistry: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}immunohistochemistry'],
      ),
      molecularStudies: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}molecular_studies'],
      ),
      recommendation: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}recommendation'],
      ),
      urgency: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}urgency'],
      )!,
      isMalignant: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_malignant'],
      )!,
      referringPhysician: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}referring_physician'],
      ),
    );
  }

  @override
  $PathologyRecordsTable createAlias(String alias) {
    return $PathologyRecordsTable(attachedDatabase, alias);
  }
}

class PathologyRecord extends DataClass implements Insertable<PathologyRecord> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String specimenType;
  final String? specimenSite;
  final String? pathologist;
  final String? laboratory;
  final DateTime collectionDate;
  final DateTime? reportDate;
  final String? collectionMethod;
  final String? grossDescription;
  final String? microscopicFindings;
  final String? diagnosis;
  final String? stagingGrading;
  final String? immunohistochemistry;
  final String? molecularStudies;
  final String? recommendation;
  final String urgency;
  final bool isMalignant;
  final String? referringPhysician;
  const PathologyRecord({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.specimenType,
    this.specimenSite,
    this.pathologist,
    this.laboratory,
    required this.collectionDate,
    this.reportDate,
    this.collectionMethod,
    this.grossDescription,
    this.microscopicFindings,
    this.diagnosis,
    this.stagingGrading,
    this.immunohistochemistry,
    this.molecularStudies,
    this.recommendation,
    required this.urgency,
    required this.isMalignant,
    this.referringPhysician,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['specimen_type'] = Variable<String>(specimenType);
    if (!nullToAbsent || specimenSite != null) {
      map['specimen_site'] = Variable<String>(specimenSite);
    }
    if (!nullToAbsent || pathologist != null) {
      map['pathologist'] = Variable<String>(pathologist);
    }
    if (!nullToAbsent || laboratory != null) {
      map['laboratory'] = Variable<String>(laboratory);
    }
    map['collection_date'] = Variable<DateTime>(collectionDate);
    if (!nullToAbsent || reportDate != null) {
      map['report_date'] = Variable<DateTime>(reportDate);
    }
    if (!nullToAbsent || collectionMethod != null) {
      map['collection_method'] = Variable<String>(collectionMethod);
    }
    if (!nullToAbsent || grossDescription != null) {
      map['gross_description'] = Variable<String>(grossDescription);
    }
    if (!nullToAbsent || microscopicFindings != null) {
      map['microscopic_findings'] = Variable<String>(microscopicFindings);
    }
    if (!nullToAbsent || diagnosis != null) {
      map['diagnosis'] = Variable<String>(diagnosis);
    }
    if (!nullToAbsent || stagingGrading != null) {
      map['staging_grading'] = Variable<String>(stagingGrading);
    }
    if (!nullToAbsent || immunohistochemistry != null) {
      map['immunohistochemistry'] = Variable<String>(immunohistochemistry);
    }
    if (!nullToAbsent || molecularStudies != null) {
      map['molecular_studies'] = Variable<String>(molecularStudies);
    }
    if (!nullToAbsent || recommendation != null) {
      map['recommendation'] = Variable<String>(recommendation);
    }
    map['urgency'] = Variable<String>(urgency);
    map['is_malignant'] = Variable<bool>(isMalignant);
    if (!nullToAbsent || referringPhysician != null) {
      map['referring_physician'] = Variable<String>(referringPhysician);
    }
    return map;
  }

  PathologyRecordsCompanion toCompanion(bool nullToAbsent) {
    return PathologyRecordsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      specimenType: Value(specimenType),
      specimenSite: specimenSite == null && nullToAbsent
          ? const Value.absent()
          : Value(specimenSite),
      pathologist: pathologist == null && nullToAbsent
          ? const Value.absent()
          : Value(pathologist),
      laboratory: laboratory == null && nullToAbsent
          ? const Value.absent()
          : Value(laboratory),
      collectionDate: Value(collectionDate),
      reportDate: reportDate == null && nullToAbsent
          ? const Value.absent()
          : Value(reportDate),
      collectionMethod: collectionMethod == null && nullToAbsent
          ? const Value.absent()
          : Value(collectionMethod),
      grossDescription: grossDescription == null && nullToAbsent
          ? const Value.absent()
          : Value(grossDescription),
      microscopicFindings: microscopicFindings == null && nullToAbsent
          ? const Value.absent()
          : Value(microscopicFindings),
      diagnosis: diagnosis == null && nullToAbsent
          ? const Value.absent()
          : Value(diagnosis),
      stagingGrading: stagingGrading == null && nullToAbsent
          ? const Value.absent()
          : Value(stagingGrading),
      immunohistochemistry: immunohistochemistry == null && nullToAbsent
          ? const Value.absent()
          : Value(immunohistochemistry),
      molecularStudies: molecularStudies == null && nullToAbsent
          ? const Value.absent()
          : Value(molecularStudies),
      recommendation: recommendation == null && nullToAbsent
          ? const Value.absent()
          : Value(recommendation),
      urgency: Value(urgency),
      isMalignant: Value(isMalignant),
      referringPhysician: referringPhysician == null && nullToAbsent
          ? const Value.absent()
          : Value(referringPhysician),
    );
  }

  factory PathologyRecord.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PathologyRecord(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      specimenType: serializer.fromJson<String>(json['specimenType']),
      specimenSite: serializer.fromJson<String?>(json['specimenSite']),
      pathologist: serializer.fromJson<String?>(json['pathologist']),
      laboratory: serializer.fromJson<String?>(json['laboratory']),
      collectionDate: serializer.fromJson<DateTime>(json['collectionDate']),
      reportDate: serializer.fromJson<DateTime?>(json['reportDate']),
      collectionMethod: serializer.fromJson<String?>(json['collectionMethod']),
      grossDescription: serializer.fromJson<String?>(json['grossDescription']),
      microscopicFindings: serializer.fromJson<String?>(
        json['microscopicFindings'],
      ),
      diagnosis: serializer.fromJson<String?>(json['diagnosis']),
      stagingGrading: serializer.fromJson<String?>(json['stagingGrading']),
      immunohistochemistry: serializer.fromJson<String?>(
        json['immunohistochemistry'],
      ),
      molecularStudies: serializer.fromJson<String?>(json['molecularStudies']),
      recommendation: serializer.fromJson<String?>(json['recommendation']),
      urgency: serializer.fromJson<String>(json['urgency']),
      isMalignant: serializer.fromJson<bool>(json['isMalignant']),
      referringPhysician: serializer.fromJson<String?>(
        json['referringPhysician'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'specimenType': serializer.toJson<String>(specimenType),
      'specimenSite': serializer.toJson<String?>(specimenSite),
      'pathologist': serializer.toJson<String?>(pathologist),
      'laboratory': serializer.toJson<String?>(laboratory),
      'collectionDate': serializer.toJson<DateTime>(collectionDate),
      'reportDate': serializer.toJson<DateTime?>(reportDate),
      'collectionMethod': serializer.toJson<String?>(collectionMethod),
      'grossDescription': serializer.toJson<String?>(grossDescription),
      'microscopicFindings': serializer.toJson<String?>(microscopicFindings),
      'diagnosis': serializer.toJson<String?>(diagnosis),
      'stagingGrading': serializer.toJson<String?>(stagingGrading),
      'immunohistochemistry': serializer.toJson<String?>(immunohistochemistry),
      'molecularStudies': serializer.toJson<String?>(molecularStudies),
      'recommendation': serializer.toJson<String?>(recommendation),
      'urgency': serializer.toJson<String>(urgency),
      'isMalignant': serializer.toJson<bool>(isMalignant),
      'referringPhysician': serializer.toJson<String?>(referringPhysician),
    };
  }

  PathologyRecord copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? specimenType,
    Value<String?> specimenSite = const Value.absent(),
    Value<String?> pathologist = const Value.absent(),
    Value<String?> laboratory = const Value.absent(),
    DateTime? collectionDate,
    Value<DateTime?> reportDate = const Value.absent(),
    Value<String?> collectionMethod = const Value.absent(),
    Value<String?> grossDescription = const Value.absent(),
    Value<String?> microscopicFindings = const Value.absent(),
    Value<String?> diagnosis = const Value.absent(),
    Value<String?> stagingGrading = const Value.absent(),
    Value<String?> immunohistochemistry = const Value.absent(),
    Value<String?> molecularStudies = const Value.absent(),
    Value<String?> recommendation = const Value.absent(),
    String? urgency,
    bool? isMalignant,
    Value<String?> referringPhysician = const Value.absent(),
  }) => PathologyRecord(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    specimenType: specimenType ?? this.specimenType,
    specimenSite: specimenSite.present ? specimenSite.value : this.specimenSite,
    pathologist: pathologist.present ? pathologist.value : this.pathologist,
    laboratory: laboratory.present ? laboratory.value : this.laboratory,
    collectionDate: collectionDate ?? this.collectionDate,
    reportDate: reportDate.present ? reportDate.value : this.reportDate,
    collectionMethod: collectionMethod.present
        ? collectionMethod.value
        : this.collectionMethod,
    grossDescription: grossDescription.present
        ? grossDescription.value
        : this.grossDescription,
    microscopicFindings: microscopicFindings.present
        ? microscopicFindings.value
        : this.microscopicFindings,
    diagnosis: diagnosis.present ? diagnosis.value : this.diagnosis,
    stagingGrading: stagingGrading.present
        ? stagingGrading.value
        : this.stagingGrading,
    immunohistochemistry: immunohistochemistry.present
        ? immunohistochemistry.value
        : this.immunohistochemistry,
    molecularStudies: molecularStudies.present
        ? molecularStudies.value
        : this.molecularStudies,
    recommendation: recommendation.present
        ? recommendation.value
        : this.recommendation,
    urgency: urgency ?? this.urgency,
    isMalignant: isMalignant ?? this.isMalignant,
    referringPhysician: referringPhysician.present
        ? referringPhysician.value
        : this.referringPhysician,
  );
  PathologyRecord copyWithCompanion(PathologyRecordsCompanion data) {
    return PathologyRecord(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      specimenType: data.specimenType.present
          ? data.specimenType.value
          : this.specimenType,
      specimenSite: data.specimenSite.present
          ? data.specimenSite.value
          : this.specimenSite,
      pathologist: data.pathologist.present
          ? data.pathologist.value
          : this.pathologist,
      laboratory: data.laboratory.present
          ? data.laboratory.value
          : this.laboratory,
      collectionDate: data.collectionDate.present
          ? data.collectionDate.value
          : this.collectionDate,
      reportDate: data.reportDate.present
          ? data.reportDate.value
          : this.reportDate,
      collectionMethod: data.collectionMethod.present
          ? data.collectionMethod.value
          : this.collectionMethod,
      grossDescription: data.grossDescription.present
          ? data.grossDescription.value
          : this.grossDescription,
      microscopicFindings: data.microscopicFindings.present
          ? data.microscopicFindings.value
          : this.microscopicFindings,
      diagnosis: data.diagnosis.present ? data.diagnosis.value : this.diagnosis,
      stagingGrading: data.stagingGrading.present
          ? data.stagingGrading.value
          : this.stagingGrading,
      immunohistochemistry: data.immunohistochemistry.present
          ? data.immunohistochemistry.value
          : this.immunohistochemistry,
      molecularStudies: data.molecularStudies.present
          ? data.molecularStudies.value
          : this.molecularStudies,
      recommendation: data.recommendation.present
          ? data.recommendation.value
          : this.recommendation,
      urgency: data.urgency.present ? data.urgency.value : this.urgency,
      isMalignant: data.isMalignant.present
          ? data.isMalignant.value
          : this.isMalignant,
      referringPhysician: data.referringPhysician.present
          ? data.referringPhysician.value
          : this.referringPhysician,
    );
  }

  @override
  String toString() {
    return (StringBuffer('PathologyRecord(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('specimenType: $specimenType, ')
          ..write('specimenSite: $specimenSite, ')
          ..write('pathologist: $pathologist, ')
          ..write('laboratory: $laboratory, ')
          ..write('collectionDate: $collectionDate, ')
          ..write('reportDate: $reportDate, ')
          ..write('collectionMethod: $collectionMethod, ')
          ..write('grossDescription: $grossDescription, ')
          ..write('microscopicFindings: $microscopicFindings, ')
          ..write('diagnosis: $diagnosis, ')
          ..write('stagingGrading: $stagingGrading, ')
          ..write('immunohistochemistry: $immunohistochemistry, ')
          ..write('molecularStudies: $molecularStudies, ')
          ..write('recommendation: $recommendation, ')
          ..write('urgency: $urgency, ')
          ..write('isMalignant: $isMalignant, ')
          ..write('referringPhysician: $referringPhysician')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    specimenType,
    specimenSite,
    pathologist,
    laboratory,
    collectionDate,
    reportDate,
    collectionMethod,
    grossDescription,
    microscopicFindings,
    diagnosis,
    stagingGrading,
    immunohistochemistry,
    molecularStudies,
    recommendation,
    urgency,
    isMalignant,
    referringPhysician,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PathologyRecord &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.specimenType == this.specimenType &&
          other.specimenSite == this.specimenSite &&
          other.pathologist == this.pathologist &&
          other.laboratory == this.laboratory &&
          other.collectionDate == this.collectionDate &&
          other.reportDate == this.reportDate &&
          other.collectionMethod == this.collectionMethod &&
          other.grossDescription == this.grossDescription &&
          other.microscopicFindings == this.microscopicFindings &&
          other.diagnosis == this.diagnosis &&
          other.stagingGrading == this.stagingGrading &&
          other.immunohistochemistry == this.immunohistochemistry &&
          other.molecularStudies == this.molecularStudies &&
          other.recommendation == this.recommendation &&
          other.urgency == this.urgency &&
          other.isMalignant == this.isMalignant &&
          other.referringPhysician == this.referringPhysician);
}

class PathologyRecordsCompanion extends UpdateCompanion<PathologyRecord> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> specimenType;
  final Value<String?> specimenSite;
  final Value<String?> pathologist;
  final Value<String?> laboratory;
  final Value<DateTime> collectionDate;
  final Value<DateTime?> reportDate;
  final Value<String?> collectionMethod;
  final Value<String?> grossDescription;
  final Value<String?> microscopicFindings;
  final Value<String?> diagnosis;
  final Value<String?> stagingGrading;
  final Value<String?> immunohistochemistry;
  final Value<String?> molecularStudies;
  final Value<String?> recommendation;
  final Value<String> urgency;
  final Value<bool> isMalignant;
  final Value<String?> referringPhysician;
  final Value<int> rowid;
  const PathologyRecordsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.specimenType = const Value.absent(),
    this.specimenSite = const Value.absent(),
    this.pathologist = const Value.absent(),
    this.laboratory = const Value.absent(),
    this.collectionDate = const Value.absent(),
    this.reportDate = const Value.absent(),
    this.collectionMethod = const Value.absent(),
    this.grossDescription = const Value.absent(),
    this.microscopicFindings = const Value.absent(),
    this.diagnosis = const Value.absent(),
    this.stagingGrading = const Value.absent(),
    this.immunohistochemistry = const Value.absent(),
    this.molecularStudies = const Value.absent(),
    this.recommendation = const Value.absent(),
    this.urgency = const Value.absent(),
    this.isMalignant = const Value.absent(),
    this.referringPhysician = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  PathologyRecordsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String specimenType,
    this.specimenSite = const Value.absent(),
    this.pathologist = const Value.absent(),
    this.laboratory = const Value.absent(),
    required DateTime collectionDate,
    this.reportDate = const Value.absent(),
    this.collectionMethod = const Value.absent(),
    this.grossDescription = const Value.absent(),
    this.microscopicFindings = const Value.absent(),
    this.diagnosis = const Value.absent(),
    this.stagingGrading = const Value.absent(),
    this.immunohistochemistry = const Value.absent(),
    this.molecularStudies = const Value.absent(),
    this.recommendation = const Value.absent(),
    required String urgency,
    this.isMalignant = const Value.absent(),
    this.referringPhysician = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       specimenType = Value(specimenType),
       collectionDate = Value(collectionDate),
       urgency = Value(urgency);
  static Insertable<PathologyRecord> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? specimenType,
    Expression<String>? specimenSite,
    Expression<String>? pathologist,
    Expression<String>? laboratory,
    Expression<DateTime>? collectionDate,
    Expression<DateTime>? reportDate,
    Expression<String>? collectionMethod,
    Expression<String>? grossDescription,
    Expression<String>? microscopicFindings,
    Expression<String>? diagnosis,
    Expression<String>? stagingGrading,
    Expression<String>? immunohistochemistry,
    Expression<String>? molecularStudies,
    Expression<String>? recommendation,
    Expression<String>? urgency,
    Expression<bool>? isMalignant,
    Expression<String>? referringPhysician,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (specimenType != null) 'specimen_type': specimenType,
      if (specimenSite != null) 'specimen_site': specimenSite,
      if (pathologist != null) 'pathologist': pathologist,
      if (laboratory != null) 'laboratory': laboratory,
      if (collectionDate != null) 'collection_date': collectionDate,
      if (reportDate != null) 'report_date': reportDate,
      if (collectionMethod != null) 'collection_method': collectionMethod,
      if (grossDescription != null) 'gross_description': grossDescription,
      if (microscopicFindings != null)
        'microscopic_findings': microscopicFindings,
      if (diagnosis != null) 'diagnosis': diagnosis,
      if (stagingGrading != null) 'staging_grading': stagingGrading,
      if (immunohistochemistry != null)
        'immunohistochemistry': immunohistochemistry,
      if (molecularStudies != null) 'molecular_studies': molecularStudies,
      if (recommendation != null) 'recommendation': recommendation,
      if (urgency != null) 'urgency': urgency,
      if (isMalignant != null) 'is_malignant': isMalignant,
      if (referringPhysician != null) 'referring_physician': referringPhysician,
      if (rowid != null) 'rowid': rowid,
    });
  }

  PathologyRecordsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? specimenType,
    Value<String?>? specimenSite,
    Value<String?>? pathologist,
    Value<String?>? laboratory,
    Value<DateTime>? collectionDate,
    Value<DateTime?>? reportDate,
    Value<String?>? collectionMethod,
    Value<String?>? grossDescription,
    Value<String?>? microscopicFindings,
    Value<String?>? diagnosis,
    Value<String?>? stagingGrading,
    Value<String?>? immunohistochemistry,
    Value<String?>? molecularStudies,
    Value<String?>? recommendation,
    Value<String>? urgency,
    Value<bool>? isMalignant,
    Value<String?>? referringPhysician,
    Value<int>? rowid,
  }) {
    return PathologyRecordsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      specimenType: specimenType ?? this.specimenType,
      specimenSite: specimenSite ?? this.specimenSite,
      pathologist: pathologist ?? this.pathologist,
      laboratory: laboratory ?? this.laboratory,
      collectionDate: collectionDate ?? this.collectionDate,
      reportDate: reportDate ?? this.reportDate,
      collectionMethod: collectionMethod ?? this.collectionMethod,
      grossDescription: grossDescription ?? this.grossDescription,
      microscopicFindings: microscopicFindings ?? this.microscopicFindings,
      diagnosis: diagnosis ?? this.diagnosis,
      stagingGrading: stagingGrading ?? this.stagingGrading,
      immunohistochemistry: immunohistochemistry ?? this.immunohistochemistry,
      molecularStudies: molecularStudies ?? this.molecularStudies,
      recommendation: recommendation ?? this.recommendation,
      urgency: urgency ?? this.urgency,
      isMalignant: isMalignant ?? this.isMalignant,
      referringPhysician: referringPhysician ?? this.referringPhysician,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (specimenType.present) {
      map['specimen_type'] = Variable<String>(specimenType.value);
    }
    if (specimenSite.present) {
      map['specimen_site'] = Variable<String>(specimenSite.value);
    }
    if (pathologist.present) {
      map['pathologist'] = Variable<String>(pathologist.value);
    }
    if (laboratory.present) {
      map['laboratory'] = Variable<String>(laboratory.value);
    }
    if (collectionDate.present) {
      map['collection_date'] = Variable<DateTime>(collectionDate.value);
    }
    if (reportDate.present) {
      map['report_date'] = Variable<DateTime>(reportDate.value);
    }
    if (collectionMethod.present) {
      map['collection_method'] = Variable<String>(collectionMethod.value);
    }
    if (grossDescription.present) {
      map['gross_description'] = Variable<String>(grossDescription.value);
    }
    if (microscopicFindings.present) {
      map['microscopic_findings'] = Variable<String>(microscopicFindings.value);
    }
    if (diagnosis.present) {
      map['diagnosis'] = Variable<String>(diagnosis.value);
    }
    if (stagingGrading.present) {
      map['staging_grading'] = Variable<String>(stagingGrading.value);
    }
    if (immunohistochemistry.present) {
      map['immunohistochemistry'] = Variable<String>(
        immunohistochemistry.value,
      );
    }
    if (molecularStudies.present) {
      map['molecular_studies'] = Variable<String>(molecularStudies.value);
    }
    if (recommendation.present) {
      map['recommendation'] = Variable<String>(recommendation.value);
    }
    if (urgency.present) {
      map['urgency'] = Variable<String>(urgency.value);
    }
    if (isMalignant.present) {
      map['is_malignant'] = Variable<bool>(isMalignant.value);
    }
    if (referringPhysician.present) {
      map['referring_physician'] = Variable<String>(referringPhysician.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PathologyRecordsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('specimenType: $specimenType, ')
          ..write('specimenSite: $specimenSite, ')
          ..write('pathologist: $pathologist, ')
          ..write('laboratory: $laboratory, ')
          ..write('collectionDate: $collectionDate, ')
          ..write('reportDate: $reportDate, ')
          ..write('collectionMethod: $collectionMethod, ')
          ..write('grossDescription: $grossDescription, ')
          ..write('microscopicFindings: $microscopicFindings, ')
          ..write('diagnosis: $diagnosis, ')
          ..write('stagingGrading: $stagingGrading, ')
          ..write('immunohistochemistry: $immunohistochemistry, ')
          ..write('molecularStudies: $molecularStudies, ')
          ..write('recommendation: $recommendation, ')
          ..write('urgency: $urgency, ')
          ..write('isMalignant: $isMalignant, ')
          ..write('referringPhysician: $referringPhysician, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $DischargeSummariesTable extends DischargeSummaries
    with TableInfo<$DischargeSummariesTable, DischargeSummary> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $DischargeSummariesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('discharge_summary'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _hospitalMeta = const VerificationMeta(
    'hospital',
  );
  @override
  late final GeneratedColumn<String> hospital = GeneratedColumn<String>(
    'hospital',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _attendingPhysicianMeta =
      const VerificationMeta('attendingPhysician');
  @override
  late final GeneratedColumn<String> attendingPhysician =
      GeneratedColumn<String>(
        'attending_physician',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _departmentMeta = const VerificationMeta(
    'department',
  );
  @override
  late final GeneratedColumn<String> department = GeneratedColumn<String>(
    'department',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _admissionDateMeta = const VerificationMeta(
    'admissionDate',
  );
  @override
  late final GeneratedColumn<DateTime> admissionDate =
      GeneratedColumn<DateTime>(
        'admission_date',
        aliasedName,
        false,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _dischargeDateMeta = const VerificationMeta(
    'dischargeDate',
  );
  @override
  late final GeneratedColumn<DateTime> dischargeDate =
      GeneratedColumn<DateTime>(
        'discharge_date',
        aliasedName,
        false,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _lengthOfStayMeta = const VerificationMeta(
    'lengthOfStay',
  );
  @override
  late final GeneratedColumn<int> lengthOfStay = GeneratedColumn<int>(
    'length_of_stay',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _admissionDiagnosisMeta =
      const VerificationMeta('admissionDiagnosis');
  @override
  late final GeneratedColumn<String> admissionDiagnosis =
      GeneratedColumn<String>(
        'admission_diagnosis',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dischargeDiagnosisMeta =
      const VerificationMeta('dischargeDiagnosis');
  @override
  late final GeneratedColumn<String> dischargeDiagnosis =
      GeneratedColumn<String>(
        'discharge_diagnosis',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _principalDiagnosisMeta =
      const VerificationMeta('principalDiagnosis');
  @override
  late final GeneratedColumn<String> principalDiagnosis =
      GeneratedColumn<String>(
        'principal_diagnosis',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _secondaryDiagnosesMeta =
      const VerificationMeta('secondaryDiagnoses');
  @override
  late final GeneratedColumn<String> secondaryDiagnoses =
      GeneratedColumn<String>(
        'secondary_diagnoses',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _proceduresPerformedMeta =
      const VerificationMeta('proceduresPerformed');
  @override
  late final GeneratedColumn<String> proceduresPerformed =
      GeneratedColumn<String>(
        'procedures_performed',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _hospitalCourseMeta = const VerificationMeta(
    'hospitalCourse',
  );
  @override
  late final GeneratedColumn<String> hospitalCourse = GeneratedColumn<String>(
    'hospital_course',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dischargeConditionMeta =
      const VerificationMeta('dischargeCondition');
  @override
  late final GeneratedColumn<String> dischargeCondition =
      GeneratedColumn<String>(
        'discharge_condition',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dischargeDestinationMeta =
      const VerificationMeta('dischargeDestination');
  @override
  late final GeneratedColumn<String> dischargeDestination =
      GeneratedColumn<String>(
        'discharge_destination',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dischargeMedicationsMeta =
      const VerificationMeta('dischargeMedications');
  @override
  late final GeneratedColumn<String> dischargeMedications =
      GeneratedColumn<String>(
        'discharge_medications',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _followUpInstructionsMeta =
      const VerificationMeta('followUpInstructions');
  @override
  late final GeneratedColumn<String> followUpInstructions =
      GeneratedColumn<String>(
        'follow_up_instructions',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dietInstructionsMeta = const VerificationMeta(
    'dietInstructions',
  );
  @override
  late final GeneratedColumn<String> dietInstructions = GeneratedColumn<String>(
    'diet_instructions',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _activityRestrictionsMeta =
      const VerificationMeta('activityRestrictions');
  @override
  late final GeneratedColumn<String> activityRestrictions =
      GeneratedColumn<String>(
        'activity_restrictions',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _followUpDateMeta = const VerificationMeta(
    'followUpDate',
  );
  @override
  late final GeneratedColumn<DateTime> followUpDate = GeneratedColumn<DateTime>(
    'follow_up_date',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    hospital,
    attendingPhysician,
    department,
    admissionDate,
    dischargeDate,
    lengthOfStay,
    admissionDiagnosis,
    dischargeDiagnosis,
    principalDiagnosis,
    secondaryDiagnoses,
    proceduresPerformed,
    hospitalCourse,
    dischargeCondition,
    dischargeDestination,
    dischargeMedications,
    followUpInstructions,
    dietInstructions,
    activityRestrictions,
    followUpDate,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'discharge_summaries';
  @override
  VerificationContext validateIntegrity(
    Insertable<DischargeSummary> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('hospital')) {
      context.handle(
        _hospitalMeta,
        hospital.isAcceptableOrUnknown(data['hospital']!, _hospitalMeta),
      );
    } else if (isInserting) {
      context.missing(_hospitalMeta);
    }
    if (data.containsKey('attending_physician')) {
      context.handle(
        _attendingPhysicianMeta,
        attendingPhysician.isAcceptableOrUnknown(
          data['attending_physician']!,
          _attendingPhysicianMeta,
        ),
      );
    }
    if (data.containsKey('department')) {
      context.handle(
        _departmentMeta,
        department.isAcceptableOrUnknown(data['department']!, _departmentMeta),
      );
    }
    if (data.containsKey('admission_date')) {
      context.handle(
        _admissionDateMeta,
        admissionDate.isAcceptableOrUnknown(
          data['admission_date']!,
          _admissionDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_admissionDateMeta);
    }
    if (data.containsKey('discharge_date')) {
      context.handle(
        _dischargeDateMeta,
        dischargeDate.isAcceptableOrUnknown(
          data['discharge_date']!,
          _dischargeDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_dischargeDateMeta);
    }
    if (data.containsKey('length_of_stay')) {
      context.handle(
        _lengthOfStayMeta,
        lengthOfStay.isAcceptableOrUnknown(
          data['length_of_stay']!,
          _lengthOfStayMeta,
        ),
      );
    }
    if (data.containsKey('admission_diagnosis')) {
      context.handle(
        _admissionDiagnosisMeta,
        admissionDiagnosis.isAcceptableOrUnknown(
          data['admission_diagnosis']!,
          _admissionDiagnosisMeta,
        ),
      );
    }
    if (data.containsKey('discharge_diagnosis')) {
      context.handle(
        _dischargeDiagnosisMeta,
        dischargeDiagnosis.isAcceptableOrUnknown(
          data['discharge_diagnosis']!,
          _dischargeDiagnosisMeta,
        ),
      );
    }
    if (data.containsKey('principal_diagnosis')) {
      context.handle(
        _principalDiagnosisMeta,
        principalDiagnosis.isAcceptableOrUnknown(
          data['principal_diagnosis']!,
          _principalDiagnosisMeta,
        ),
      );
    }
    if (data.containsKey('secondary_diagnoses')) {
      context.handle(
        _secondaryDiagnosesMeta,
        secondaryDiagnoses.isAcceptableOrUnknown(
          data['secondary_diagnoses']!,
          _secondaryDiagnosesMeta,
        ),
      );
    }
    if (data.containsKey('procedures_performed')) {
      context.handle(
        _proceduresPerformedMeta,
        proceduresPerformed.isAcceptableOrUnknown(
          data['procedures_performed']!,
          _proceduresPerformedMeta,
        ),
      );
    }
    if (data.containsKey('hospital_course')) {
      context.handle(
        _hospitalCourseMeta,
        hospitalCourse.isAcceptableOrUnknown(
          data['hospital_course']!,
          _hospitalCourseMeta,
        ),
      );
    }
    if (data.containsKey('discharge_condition')) {
      context.handle(
        _dischargeConditionMeta,
        dischargeCondition.isAcceptableOrUnknown(
          data['discharge_condition']!,
          _dischargeConditionMeta,
        ),
      );
    }
    if (data.containsKey('discharge_destination')) {
      context.handle(
        _dischargeDestinationMeta,
        dischargeDestination.isAcceptableOrUnknown(
          data['discharge_destination']!,
          _dischargeDestinationMeta,
        ),
      );
    }
    if (data.containsKey('discharge_medications')) {
      context.handle(
        _dischargeMedicationsMeta,
        dischargeMedications.isAcceptableOrUnknown(
          data['discharge_medications']!,
          _dischargeMedicationsMeta,
        ),
      );
    }
    if (data.containsKey('follow_up_instructions')) {
      context.handle(
        _followUpInstructionsMeta,
        followUpInstructions.isAcceptableOrUnknown(
          data['follow_up_instructions']!,
          _followUpInstructionsMeta,
        ),
      );
    }
    if (data.containsKey('diet_instructions')) {
      context.handle(
        _dietInstructionsMeta,
        dietInstructions.isAcceptableOrUnknown(
          data['diet_instructions']!,
          _dietInstructionsMeta,
        ),
      );
    }
    if (data.containsKey('activity_restrictions')) {
      context.handle(
        _activityRestrictionsMeta,
        activityRestrictions.isAcceptableOrUnknown(
          data['activity_restrictions']!,
          _activityRestrictionsMeta,
        ),
      );
    }
    if (data.containsKey('follow_up_date')) {
      context.handle(
        _followUpDateMeta,
        followUpDate.isAcceptableOrUnknown(
          data['follow_up_date']!,
          _followUpDateMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DischargeSummary map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DischargeSummary(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      hospital: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}hospital'],
      )!,
      attendingPhysician: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}attending_physician'],
      ),
      department: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}department'],
      ),
      admissionDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}admission_date'],
      )!,
      dischargeDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}discharge_date'],
      )!,
      lengthOfStay: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}length_of_stay'],
      ),
      admissionDiagnosis: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}admission_diagnosis'],
      ),
      dischargeDiagnosis: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}discharge_diagnosis'],
      ),
      principalDiagnosis: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}principal_diagnosis'],
      ),
      secondaryDiagnoses: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}secondary_diagnoses'],
      ),
      proceduresPerformed: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}procedures_performed'],
      ),
      hospitalCourse: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}hospital_course'],
      ),
      dischargeCondition: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}discharge_condition'],
      ),
      dischargeDestination: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}discharge_destination'],
      ),
      dischargeMedications: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}discharge_medications'],
      ),
      followUpInstructions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}follow_up_instructions'],
      ),
      dietInstructions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}diet_instructions'],
      ),
      activityRestrictions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}activity_restrictions'],
      ),
      followUpDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}follow_up_date'],
      ),
    );
  }

  @override
  $DischargeSummariesTable createAlias(String alias) {
    return $DischargeSummariesTable(attachedDatabase, alias);
  }
}

class DischargeSummary extends DataClass
    implements Insertable<DischargeSummary> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String hospital;
  final String? attendingPhysician;
  final String? department;
  final DateTime admissionDate;
  final DateTime dischargeDate;
  final int? lengthOfStay;
  final String? admissionDiagnosis;
  final String? dischargeDiagnosis;
  final String? principalDiagnosis;
  final String? secondaryDiagnoses;
  final String? proceduresPerformed;
  final String? hospitalCourse;
  final String? dischargeCondition;
  final String? dischargeDestination;
  final String? dischargeMedications;
  final String? followUpInstructions;
  final String? dietInstructions;
  final String? activityRestrictions;
  final DateTime? followUpDate;
  const DischargeSummary({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.hospital,
    this.attendingPhysician,
    this.department,
    required this.admissionDate,
    required this.dischargeDate,
    this.lengthOfStay,
    this.admissionDiagnosis,
    this.dischargeDiagnosis,
    this.principalDiagnosis,
    this.secondaryDiagnoses,
    this.proceduresPerformed,
    this.hospitalCourse,
    this.dischargeCondition,
    this.dischargeDestination,
    this.dischargeMedications,
    this.followUpInstructions,
    this.dietInstructions,
    this.activityRestrictions,
    this.followUpDate,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['hospital'] = Variable<String>(hospital);
    if (!nullToAbsent || attendingPhysician != null) {
      map['attending_physician'] = Variable<String>(attendingPhysician);
    }
    if (!nullToAbsent || department != null) {
      map['department'] = Variable<String>(department);
    }
    map['admission_date'] = Variable<DateTime>(admissionDate);
    map['discharge_date'] = Variable<DateTime>(dischargeDate);
    if (!nullToAbsent || lengthOfStay != null) {
      map['length_of_stay'] = Variable<int>(lengthOfStay);
    }
    if (!nullToAbsent || admissionDiagnosis != null) {
      map['admission_diagnosis'] = Variable<String>(admissionDiagnosis);
    }
    if (!nullToAbsent || dischargeDiagnosis != null) {
      map['discharge_diagnosis'] = Variable<String>(dischargeDiagnosis);
    }
    if (!nullToAbsent || principalDiagnosis != null) {
      map['principal_diagnosis'] = Variable<String>(principalDiagnosis);
    }
    if (!nullToAbsent || secondaryDiagnoses != null) {
      map['secondary_diagnoses'] = Variable<String>(secondaryDiagnoses);
    }
    if (!nullToAbsent || proceduresPerformed != null) {
      map['procedures_performed'] = Variable<String>(proceduresPerformed);
    }
    if (!nullToAbsent || hospitalCourse != null) {
      map['hospital_course'] = Variable<String>(hospitalCourse);
    }
    if (!nullToAbsent || dischargeCondition != null) {
      map['discharge_condition'] = Variable<String>(dischargeCondition);
    }
    if (!nullToAbsent || dischargeDestination != null) {
      map['discharge_destination'] = Variable<String>(dischargeDestination);
    }
    if (!nullToAbsent || dischargeMedications != null) {
      map['discharge_medications'] = Variable<String>(dischargeMedications);
    }
    if (!nullToAbsent || followUpInstructions != null) {
      map['follow_up_instructions'] = Variable<String>(followUpInstructions);
    }
    if (!nullToAbsent || dietInstructions != null) {
      map['diet_instructions'] = Variable<String>(dietInstructions);
    }
    if (!nullToAbsent || activityRestrictions != null) {
      map['activity_restrictions'] = Variable<String>(activityRestrictions);
    }
    if (!nullToAbsent || followUpDate != null) {
      map['follow_up_date'] = Variable<DateTime>(followUpDate);
    }
    return map;
  }

  DischargeSummariesCompanion toCompanion(bool nullToAbsent) {
    return DischargeSummariesCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      hospital: Value(hospital),
      attendingPhysician: attendingPhysician == null && nullToAbsent
          ? const Value.absent()
          : Value(attendingPhysician),
      department: department == null && nullToAbsent
          ? const Value.absent()
          : Value(department),
      admissionDate: Value(admissionDate),
      dischargeDate: Value(dischargeDate),
      lengthOfStay: lengthOfStay == null && nullToAbsent
          ? const Value.absent()
          : Value(lengthOfStay),
      admissionDiagnosis: admissionDiagnosis == null && nullToAbsent
          ? const Value.absent()
          : Value(admissionDiagnosis),
      dischargeDiagnosis: dischargeDiagnosis == null && nullToAbsent
          ? const Value.absent()
          : Value(dischargeDiagnosis),
      principalDiagnosis: principalDiagnosis == null && nullToAbsent
          ? const Value.absent()
          : Value(principalDiagnosis),
      secondaryDiagnoses: secondaryDiagnoses == null && nullToAbsent
          ? const Value.absent()
          : Value(secondaryDiagnoses),
      proceduresPerformed: proceduresPerformed == null && nullToAbsent
          ? const Value.absent()
          : Value(proceduresPerformed),
      hospitalCourse: hospitalCourse == null && nullToAbsent
          ? const Value.absent()
          : Value(hospitalCourse),
      dischargeCondition: dischargeCondition == null && nullToAbsent
          ? const Value.absent()
          : Value(dischargeCondition),
      dischargeDestination: dischargeDestination == null && nullToAbsent
          ? const Value.absent()
          : Value(dischargeDestination),
      dischargeMedications: dischargeMedications == null && nullToAbsent
          ? const Value.absent()
          : Value(dischargeMedications),
      followUpInstructions: followUpInstructions == null && nullToAbsent
          ? const Value.absent()
          : Value(followUpInstructions),
      dietInstructions: dietInstructions == null && nullToAbsent
          ? const Value.absent()
          : Value(dietInstructions),
      activityRestrictions: activityRestrictions == null && nullToAbsent
          ? const Value.absent()
          : Value(activityRestrictions),
      followUpDate: followUpDate == null && nullToAbsent
          ? const Value.absent()
          : Value(followUpDate),
    );
  }

  factory DischargeSummary.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DischargeSummary(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      hospital: serializer.fromJson<String>(json['hospital']),
      attendingPhysician: serializer.fromJson<String?>(
        json['attendingPhysician'],
      ),
      department: serializer.fromJson<String?>(json['department']),
      admissionDate: serializer.fromJson<DateTime>(json['admissionDate']),
      dischargeDate: serializer.fromJson<DateTime>(json['dischargeDate']),
      lengthOfStay: serializer.fromJson<int?>(json['lengthOfStay']),
      admissionDiagnosis: serializer.fromJson<String?>(
        json['admissionDiagnosis'],
      ),
      dischargeDiagnosis: serializer.fromJson<String?>(
        json['dischargeDiagnosis'],
      ),
      principalDiagnosis: serializer.fromJson<String?>(
        json['principalDiagnosis'],
      ),
      secondaryDiagnoses: serializer.fromJson<String?>(
        json['secondaryDiagnoses'],
      ),
      proceduresPerformed: serializer.fromJson<String?>(
        json['proceduresPerformed'],
      ),
      hospitalCourse: serializer.fromJson<String?>(json['hospitalCourse']),
      dischargeCondition: serializer.fromJson<String?>(
        json['dischargeCondition'],
      ),
      dischargeDestination: serializer.fromJson<String?>(
        json['dischargeDestination'],
      ),
      dischargeMedications: serializer.fromJson<String?>(
        json['dischargeMedications'],
      ),
      followUpInstructions: serializer.fromJson<String?>(
        json['followUpInstructions'],
      ),
      dietInstructions: serializer.fromJson<String?>(json['dietInstructions']),
      activityRestrictions: serializer.fromJson<String?>(
        json['activityRestrictions'],
      ),
      followUpDate: serializer.fromJson<DateTime?>(json['followUpDate']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'hospital': serializer.toJson<String>(hospital),
      'attendingPhysician': serializer.toJson<String?>(attendingPhysician),
      'department': serializer.toJson<String?>(department),
      'admissionDate': serializer.toJson<DateTime>(admissionDate),
      'dischargeDate': serializer.toJson<DateTime>(dischargeDate),
      'lengthOfStay': serializer.toJson<int?>(lengthOfStay),
      'admissionDiagnosis': serializer.toJson<String?>(admissionDiagnosis),
      'dischargeDiagnosis': serializer.toJson<String?>(dischargeDiagnosis),
      'principalDiagnosis': serializer.toJson<String?>(principalDiagnosis),
      'secondaryDiagnoses': serializer.toJson<String?>(secondaryDiagnoses),
      'proceduresPerformed': serializer.toJson<String?>(proceduresPerformed),
      'hospitalCourse': serializer.toJson<String?>(hospitalCourse),
      'dischargeCondition': serializer.toJson<String?>(dischargeCondition),
      'dischargeDestination': serializer.toJson<String?>(dischargeDestination),
      'dischargeMedications': serializer.toJson<String?>(dischargeMedications),
      'followUpInstructions': serializer.toJson<String?>(followUpInstructions),
      'dietInstructions': serializer.toJson<String?>(dietInstructions),
      'activityRestrictions': serializer.toJson<String?>(activityRestrictions),
      'followUpDate': serializer.toJson<DateTime?>(followUpDate),
    };
  }

  DischargeSummary copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? hospital,
    Value<String?> attendingPhysician = const Value.absent(),
    Value<String?> department = const Value.absent(),
    DateTime? admissionDate,
    DateTime? dischargeDate,
    Value<int?> lengthOfStay = const Value.absent(),
    Value<String?> admissionDiagnosis = const Value.absent(),
    Value<String?> dischargeDiagnosis = const Value.absent(),
    Value<String?> principalDiagnosis = const Value.absent(),
    Value<String?> secondaryDiagnoses = const Value.absent(),
    Value<String?> proceduresPerformed = const Value.absent(),
    Value<String?> hospitalCourse = const Value.absent(),
    Value<String?> dischargeCondition = const Value.absent(),
    Value<String?> dischargeDestination = const Value.absent(),
    Value<String?> dischargeMedications = const Value.absent(),
    Value<String?> followUpInstructions = const Value.absent(),
    Value<String?> dietInstructions = const Value.absent(),
    Value<String?> activityRestrictions = const Value.absent(),
    Value<DateTime?> followUpDate = const Value.absent(),
  }) => DischargeSummary(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    hospital: hospital ?? this.hospital,
    attendingPhysician: attendingPhysician.present
        ? attendingPhysician.value
        : this.attendingPhysician,
    department: department.present ? department.value : this.department,
    admissionDate: admissionDate ?? this.admissionDate,
    dischargeDate: dischargeDate ?? this.dischargeDate,
    lengthOfStay: lengthOfStay.present ? lengthOfStay.value : this.lengthOfStay,
    admissionDiagnosis: admissionDiagnosis.present
        ? admissionDiagnosis.value
        : this.admissionDiagnosis,
    dischargeDiagnosis: dischargeDiagnosis.present
        ? dischargeDiagnosis.value
        : this.dischargeDiagnosis,
    principalDiagnosis: principalDiagnosis.present
        ? principalDiagnosis.value
        : this.principalDiagnosis,
    secondaryDiagnoses: secondaryDiagnoses.present
        ? secondaryDiagnoses.value
        : this.secondaryDiagnoses,
    proceduresPerformed: proceduresPerformed.present
        ? proceduresPerformed.value
        : this.proceduresPerformed,
    hospitalCourse: hospitalCourse.present
        ? hospitalCourse.value
        : this.hospitalCourse,
    dischargeCondition: dischargeCondition.present
        ? dischargeCondition.value
        : this.dischargeCondition,
    dischargeDestination: dischargeDestination.present
        ? dischargeDestination.value
        : this.dischargeDestination,
    dischargeMedications: dischargeMedications.present
        ? dischargeMedications.value
        : this.dischargeMedications,
    followUpInstructions: followUpInstructions.present
        ? followUpInstructions.value
        : this.followUpInstructions,
    dietInstructions: dietInstructions.present
        ? dietInstructions.value
        : this.dietInstructions,
    activityRestrictions: activityRestrictions.present
        ? activityRestrictions.value
        : this.activityRestrictions,
    followUpDate: followUpDate.present ? followUpDate.value : this.followUpDate,
  );
  DischargeSummary copyWithCompanion(DischargeSummariesCompanion data) {
    return DischargeSummary(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      hospital: data.hospital.present ? data.hospital.value : this.hospital,
      attendingPhysician: data.attendingPhysician.present
          ? data.attendingPhysician.value
          : this.attendingPhysician,
      department: data.department.present
          ? data.department.value
          : this.department,
      admissionDate: data.admissionDate.present
          ? data.admissionDate.value
          : this.admissionDate,
      dischargeDate: data.dischargeDate.present
          ? data.dischargeDate.value
          : this.dischargeDate,
      lengthOfStay: data.lengthOfStay.present
          ? data.lengthOfStay.value
          : this.lengthOfStay,
      admissionDiagnosis: data.admissionDiagnosis.present
          ? data.admissionDiagnosis.value
          : this.admissionDiagnosis,
      dischargeDiagnosis: data.dischargeDiagnosis.present
          ? data.dischargeDiagnosis.value
          : this.dischargeDiagnosis,
      principalDiagnosis: data.principalDiagnosis.present
          ? data.principalDiagnosis.value
          : this.principalDiagnosis,
      secondaryDiagnoses: data.secondaryDiagnoses.present
          ? data.secondaryDiagnoses.value
          : this.secondaryDiagnoses,
      proceduresPerformed: data.proceduresPerformed.present
          ? data.proceduresPerformed.value
          : this.proceduresPerformed,
      hospitalCourse: data.hospitalCourse.present
          ? data.hospitalCourse.value
          : this.hospitalCourse,
      dischargeCondition: data.dischargeCondition.present
          ? data.dischargeCondition.value
          : this.dischargeCondition,
      dischargeDestination: data.dischargeDestination.present
          ? data.dischargeDestination.value
          : this.dischargeDestination,
      dischargeMedications: data.dischargeMedications.present
          ? data.dischargeMedications.value
          : this.dischargeMedications,
      followUpInstructions: data.followUpInstructions.present
          ? data.followUpInstructions.value
          : this.followUpInstructions,
      dietInstructions: data.dietInstructions.present
          ? data.dietInstructions.value
          : this.dietInstructions,
      activityRestrictions: data.activityRestrictions.present
          ? data.activityRestrictions.value
          : this.activityRestrictions,
      followUpDate: data.followUpDate.present
          ? data.followUpDate.value
          : this.followUpDate,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DischargeSummary(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('hospital: $hospital, ')
          ..write('attendingPhysician: $attendingPhysician, ')
          ..write('department: $department, ')
          ..write('admissionDate: $admissionDate, ')
          ..write('dischargeDate: $dischargeDate, ')
          ..write('lengthOfStay: $lengthOfStay, ')
          ..write('admissionDiagnosis: $admissionDiagnosis, ')
          ..write('dischargeDiagnosis: $dischargeDiagnosis, ')
          ..write('principalDiagnosis: $principalDiagnosis, ')
          ..write('secondaryDiagnoses: $secondaryDiagnoses, ')
          ..write('proceduresPerformed: $proceduresPerformed, ')
          ..write('hospitalCourse: $hospitalCourse, ')
          ..write('dischargeCondition: $dischargeCondition, ')
          ..write('dischargeDestination: $dischargeDestination, ')
          ..write('dischargeMedications: $dischargeMedications, ')
          ..write('followUpInstructions: $followUpInstructions, ')
          ..write('dietInstructions: $dietInstructions, ')
          ..write('activityRestrictions: $activityRestrictions, ')
          ..write('followUpDate: $followUpDate')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    hospital,
    attendingPhysician,
    department,
    admissionDate,
    dischargeDate,
    lengthOfStay,
    admissionDiagnosis,
    dischargeDiagnosis,
    principalDiagnosis,
    secondaryDiagnoses,
    proceduresPerformed,
    hospitalCourse,
    dischargeCondition,
    dischargeDestination,
    dischargeMedications,
    followUpInstructions,
    dietInstructions,
    activityRestrictions,
    followUpDate,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DischargeSummary &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.hospital == this.hospital &&
          other.attendingPhysician == this.attendingPhysician &&
          other.department == this.department &&
          other.admissionDate == this.admissionDate &&
          other.dischargeDate == this.dischargeDate &&
          other.lengthOfStay == this.lengthOfStay &&
          other.admissionDiagnosis == this.admissionDiagnosis &&
          other.dischargeDiagnosis == this.dischargeDiagnosis &&
          other.principalDiagnosis == this.principalDiagnosis &&
          other.secondaryDiagnoses == this.secondaryDiagnoses &&
          other.proceduresPerformed == this.proceduresPerformed &&
          other.hospitalCourse == this.hospitalCourse &&
          other.dischargeCondition == this.dischargeCondition &&
          other.dischargeDestination == this.dischargeDestination &&
          other.dischargeMedications == this.dischargeMedications &&
          other.followUpInstructions == this.followUpInstructions &&
          other.dietInstructions == this.dietInstructions &&
          other.activityRestrictions == this.activityRestrictions &&
          other.followUpDate == this.followUpDate);
}

class DischargeSummariesCompanion extends UpdateCompanion<DischargeSummary> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> hospital;
  final Value<String?> attendingPhysician;
  final Value<String?> department;
  final Value<DateTime> admissionDate;
  final Value<DateTime> dischargeDate;
  final Value<int?> lengthOfStay;
  final Value<String?> admissionDiagnosis;
  final Value<String?> dischargeDiagnosis;
  final Value<String?> principalDiagnosis;
  final Value<String?> secondaryDiagnoses;
  final Value<String?> proceduresPerformed;
  final Value<String?> hospitalCourse;
  final Value<String?> dischargeCondition;
  final Value<String?> dischargeDestination;
  final Value<String?> dischargeMedications;
  final Value<String?> followUpInstructions;
  final Value<String?> dietInstructions;
  final Value<String?> activityRestrictions;
  final Value<DateTime?> followUpDate;
  final Value<int> rowid;
  const DischargeSummariesCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.hospital = const Value.absent(),
    this.attendingPhysician = const Value.absent(),
    this.department = const Value.absent(),
    this.admissionDate = const Value.absent(),
    this.dischargeDate = const Value.absent(),
    this.lengthOfStay = const Value.absent(),
    this.admissionDiagnosis = const Value.absent(),
    this.dischargeDiagnosis = const Value.absent(),
    this.principalDiagnosis = const Value.absent(),
    this.secondaryDiagnoses = const Value.absent(),
    this.proceduresPerformed = const Value.absent(),
    this.hospitalCourse = const Value.absent(),
    this.dischargeCondition = const Value.absent(),
    this.dischargeDestination = const Value.absent(),
    this.dischargeMedications = const Value.absent(),
    this.followUpInstructions = const Value.absent(),
    this.dietInstructions = const Value.absent(),
    this.activityRestrictions = const Value.absent(),
    this.followUpDate = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DischargeSummariesCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String hospital,
    this.attendingPhysician = const Value.absent(),
    this.department = const Value.absent(),
    required DateTime admissionDate,
    required DateTime dischargeDate,
    this.lengthOfStay = const Value.absent(),
    this.admissionDiagnosis = const Value.absent(),
    this.dischargeDiagnosis = const Value.absent(),
    this.principalDiagnosis = const Value.absent(),
    this.secondaryDiagnoses = const Value.absent(),
    this.proceduresPerformed = const Value.absent(),
    this.hospitalCourse = const Value.absent(),
    this.dischargeCondition = const Value.absent(),
    this.dischargeDestination = const Value.absent(),
    this.dischargeMedications = const Value.absent(),
    this.followUpInstructions = const Value.absent(),
    this.dietInstructions = const Value.absent(),
    this.activityRestrictions = const Value.absent(),
    this.followUpDate = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       hospital = Value(hospital),
       admissionDate = Value(admissionDate),
       dischargeDate = Value(dischargeDate);
  static Insertable<DischargeSummary> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? hospital,
    Expression<String>? attendingPhysician,
    Expression<String>? department,
    Expression<DateTime>? admissionDate,
    Expression<DateTime>? dischargeDate,
    Expression<int>? lengthOfStay,
    Expression<String>? admissionDiagnosis,
    Expression<String>? dischargeDiagnosis,
    Expression<String>? principalDiagnosis,
    Expression<String>? secondaryDiagnoses,
    Expression<String>? proceduresPerformed,
    Expression<String>? hospitalCourse,
    Expression<String>? dischargeCondition,
    Expression<String>? dischargeDestination,
    Expression<String>? dischargeMedications,
    Expression<String>? followUpInstructions,
    Expression<String>? dietInstructions,
    Expression<String>? activityRestrictions,
    Expression<DateTime>? followUpDate,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (hospital != null) 'hospital': hospital,
      if (attendingPhysician != null) 'attending_physician': attendingPhysician,
      if (department != null) 'department': department,
      if (admissionDate != null) 'admission_date': admissionDate,
      if (dischargeDate != null) 'discharge_date': dischargeDate,
      if (lengthOfStay != null) 'length_of_stay': lengthOfStay,
      if (admissionDiagnosis != null) 'admission_diagnosis': admissionDiagnosis,
      if (dischargeDiagnosis != null) 'discharge_diagnosis': dischargeDiagnosis,
      if (principalDiagnosis != null) 'principal_diagnosis': principalDiagnosis,
      if (secondaryDiagnoses != null) 'secondary_diagnoses': secondaryDiagnoses,
      if (proceduresPerformed != null)
        'procedures_performed': proceduresPerformed,
      if (hospitalCourse != null) 'hospital_course': hospitalCourse,
      if (dischargeCondition != null) 'discharge_condition': dischargeCondition,
      if (dischargeDestination != null)
        'discharge_destination': dischargeDestination,
      if (dischargeMedications != null)
        'discharge_medications': dischargeMedications,
      if (followUpInstructions != null)
        'follow_up_instructions': followUpInstructions,
      if (dietInstructions != null) 'diet_instructions': dietInstructions,
      if (activityRestrictions != null)
        'activity_restrictions': activityRestrictions,
      if (followUpDate != null) 'follow_up_date': followUpDate,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DischargeSummariesCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? hospital,
    Value<String?>? attendingPhysician,
    Value<String?>? department,
    Value<DateTime>? admissionDate,
    Value<DateTime>? dischargeDate,
    Value<int?>? lengthOfStay,
    Value<String?>? admissionDiagnosis,
    Value<String?>? dischargeDiagnosis,
    Value<String?>? principalDiagnosis,
    Value<String?>? secondaryDiagnoses,
    Value<String?>? proceduresPerformed,
    Value<String?>? hospitalCourse,
    Value<String?>? dischargeCondition,
    Value<String?>? dischargeDestination,
    Value<String?>? dischargeMedications,
    Value<String?>? followUpInstructions,
    Value<String?>? dietInstructions,
    Value<String?>? activityRestrictions,
    Value<DateTime?>? followUpDate,
    Value<int>? rowid,
  }) {
    return DischargeSummariesCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      hospital: hospital ?? this.hospital,
      attendingPhysician: attendingPhysician ?? this.attendingPhysician,
      department: department ?? this.department,
      admissionDate: admissionDate ?? this.admissionDate,
      dischargeDate: dischargeDate ?? this.dischargeDate,
      lengthOfStay: lengthOfStay ?? this.lengthOfStay,
      admissionDiagnosis: admissionDiagnosis ?? this.admissionDiagnosis,
      dischargeDiagnosis: dischargeDiagnosis ?? this.dischargeDiagnosis,
      principalDiagnosis: principalDiagnosis ?? this.principalDiagnosis,
      secondaryDiagnoses: secondaryDiagnoses ?? this.secondaryDiagnoses,
      proceduresPerformed: proceduresPerformed ?? this.proceduresPerformed,
      hospitalCourse: hospitalCourse ?? this.hospitalCourse,
      dischargeCondition: dischargeCondition ?? this.dischargeCondition,
      dischargeDestination: dischargeDestination ?? this.dischargeDestination,
      dischargeMedications: dischargeMedications ?? this.dischargeMedications,
      followUpInstructions: followUpInstructions ?? this.followUpInstructions,
      dietInstructions: dietInstructions ?? this.dietInstructions,
      activityRestrictions: activityRestrictions ?? this.activityRestrictions,
      followUpDate: followUpDate ?? this.followUpDate,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (hospital.present) {
      map['hospital'] = Variable<String>(hospital.value);
    }
    if (attendingPhysician.present) {
      map['attending_physician'] = Variable<String>(attendingPhysician.value);
    }
    if (department.present) {
      map['department'] = Variable<String>(department.value);
    }
    if (admissionDate.present) {
      map['admission_date'] = Variable<DateTime>(admissionDate.value);
    }
    if (dischargeDate.present) {
      map['discharge_date'] = Variable<DateTime>(dischargeDate.value);
    }
    if (lengthOfStay.present) {
      map['length_of_stay'] = Variable<int>(lengthOfStay.value);
    }
    if (admissionDiagnosis.present) {
      map['admission_diagnosis'] = Variable<String>(admissionDiagnosis.value);
    }
    if (dischargeDiagnosis.present) {
      map['discharge_diagnosis'] = Variable<String>(dischargeDiagnosis.value);
    }
    if (principalDiagnosis.present) {
      map['principal_diagnosis'] = Variable<String>(principalDiagnosis.value);
    }
    if (secondaryDiagnoses.present) {
      map['secondary_diagnoses'] = Variable<String>(secondaryDiagnoses.value);
    }
    if (proceduresPerformed.present) {
      map['procedures_performed'] = Variable<String>(proceduresPerformed.value);
    }
    if (hospitalCourse.present) {
      map['hospital_course'] = Variable<String>(hospitalCourse.value);
    }
    if (dischargeCondition.present) {
      map['discharge_condition'] = Variable<String>(dischargeCondition.value);
    }
    if (dischargeDestination.present) {
      map['discharge_destination'] = Variable<String>(
        dischargeDestination.value,
      );
    }
    if (dischargeMedications.present) {
      map['discharge_medications'] = Variable<String>(
        dischargeMedications.value,
      );
    }
    if (followUpInstructions.present) {
      map['follow_up_instructions'] = Variable<String>(
        followUpInstructions.value,
      );
    }
    if (dietInstructions.present) {
      map['diet_instructions'] = Variable<String>(dietInstructions.value);
    }
    if (activityRestrictions.present) {
      map['activity_restrictions'] = Variable<String>(
        activityRestrictions.value,
      );
    }
    if (followUpDate.present) {
      map['follow_up_date'] = Variable<DateTime>(followUpDate.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DischargeSummariesCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('hospital: $hospital, ')
          ..write('attendingPhysician: $attendingPhysician, ')
          ..write('department: $department, ')
          ..write('admissionDate: $admissionDate, ')
          ..write('dischargeDate: $dischargeDate, ')
          ..write('lengthOfStay: $lengthOfStay, ')
          ..write('admissionDiagnosis: $admissionDiagnosis, ')
          ..write('dischargeDiagnosis: $dischargeDiagnosis, ')
          ..write('principalDiagnosis: $principalDiagnosis, ')
          ..write('secondaryDiagnoses: $secondaryDiagnoses, ')
          ..write('proceduresPerformed: $proceduresPerformed, ')
          ..write('hospitalCourse: $hospitalCourse, ')
          ..write('dischargeCondition: $dischargeCondition, ')
          ..write('dischargeDestination: $dischargeDestination, ')
          ..write('dischargeMedications: $dischargeMedications, ')
          ..write('followUpInstructions: $followUpInstructions, ')
          ..write('dietInstructions: $dietInstructions, ')
          ..write('activityRestrictions: $activityRestrictions, ')
          ..write('followUpDate: $followUpDate, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $HospitalAdmissionsTable extends HospitalAdmissions
    with TableInfo<$HospitalAdmissionsTable, HospitalAdmission> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $HospitalAdmissionsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('hospital_admission'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _hospitalMeta = const VerificationMeta(
    'hospital',
  );
  @override
  late final GeneratedColumn<String> hospital = GeneratedColumn<String>(
    'hospital',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _admittingPhysicianMeta =
      const VerificationMeta('admittingPhysician');
  @override
  late final GeneratedColumn<String> admittingPhysician =
      GeneratedColumn<String>(
        'admitting_physician',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _departmentMeta = const VerificationMeta(
    'department',
  );
  @override
  late final GeneratedColumn<String> department = GeneratedColumn<String>(
    'department',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _admissionDateMeta = const VerificationMeta(
    'admissionDate',
  );
  @override
  late final GeneratedColumn<DateTime> admissionDate =
      GeneratedColumn<DateTime>(
        'admission_date',
        aliasedName,
        false,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _dischargeDateMeta = const VerificationMeta(
    'dischargeDate',
  );
  @override
  late final GeneratedColumn<DateTime> dischargeDate =
      GeneratedColumn<DateTime>(
        'discharge_date',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _admissionTypeMeta = const VerificationMeta(
    'admissionType',
  );
  @override
  late final GeneratedColumn<String> admissionType = GeneratedColumn<String>(
    'admission_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _chiefComplaintMeta = const VerificationMeta(
    'chiefComplaint',
  );
  @override
  late final GeneratedColumn<String> chiefComplaint = GeneratedColumn<String>(
    'chief_complaint',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _reasonForAdmissionMeta =
      const VerificationMeta('reasonForAdmission');
  @override
  late final GeneratedColumn<String> reasonForAdmission =
      GeneratedColumn<String>(
        'reason_for_admission',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _presentingSymptomsMeta =
      const VerificationMeta('presentingSymptoms');
  @override
  late final GeneratedColumn<String> presentingSymptoms =
      GeneratedColumn<String>(
        'presenting_symptoms',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _vitalSignsMeta = const VerificationMeta(
    'vitalSigns',
  );
  @override
  late final GeneratedColumn<String> vitalSigns = GeneratedColumn<String>(
    'vital_signs',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _initialDiagnosisMeta = const VerificationMeta(
    'initialDiagnosis',
  );
  @override
  late final GeneratedColumn<String> initialDiagnosis = GeneratedColumn<String>(
    'initial_diagnosis',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _workingDiagnosisMeta = const VerificationMeta(
    'workingDiagnosis',
  );
  @override
  late final GeneratedColumn<String> workingDiagnosis = GeneratedColumn<String>(
    'working_diagnosis',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _treatmentPlanMeta = const VerificationMeta(
    'treatmentPlan',
  );
  @override
  late final GeneratedColumn<String> treatmentPlan = GeneratedColumn<String>(
    'treatment_plan',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _medicationsOnAdmissionMeta =
      const VerificationMeta('medicationsOnAdmission');
  @override
  late final GeneratedColumn<String> medicationsOnAdmission =
      GeneratedColumn<String>(
        'medications_on_admission',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _allergiesNotedMeta = const VerificationMeta(
    'allergiesNoted',
  );
  @override
  late final GeneratedColumn<String> allergiesNoted = GeneratedColumn<String>(
    'allergies_noted',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emergencyContactMeta = const VerificationMeta(
    'emergencyContact',
  );
  @override
  late final GeneratedColumn<String> emergencyContact = GeneratedColumn<String>(
    'emergency_contact',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _insuranceInformationMeta =
      const VerificationMeta('insuranceInformation');
  @override
  late final GeneratedColumn<String> insuranceInformation =
      GeneratedColumn<String>(
        'insurance_information',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _isEmergencyAdmissionMeta =
      const VerificationMeta('isEmergencyAdmission');
  @override
  late final GeneratedColumn<bool> isEmergencyAdmission = GeneratedColumn<bool>(
    'is_emergency_admission',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_emergency_admission" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  static const VerificationMeta _referringPhysicianMeta =
      const VerificationMeta('referringPhysician');
  @override
  late final GeneratedColumn<String> referringPhysician =
      GeneratedColumn<String>(
        'referring_physician',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _roomNumberMeta = const VerificationMeta(
    'roomNumber',
  );
  @override
  late final GeneratedColumn<String> roomNumber = GeneratedColumn<String>(
    'room_number',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    hospital,
    admittingPhysician,
    department,
    admissionDate,
    dischargeDate,
    admissionType,
    chiefComplaint,
    reasonForAdmission,
    presentingSymptoms,
    vitalSigns,
    initialDiagnosis,
    workingDiagnosis,
    treatmentPlan,
    medicationsOnAdmission,
    allergiesNoted,
    emergencyContact,
    insuranceInformation,
    isEmergencyAdmission,
    referringPhysician,
    roomNumber,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'hospital_admissions';
  @override
  VerificationContext validateIntegrity(
    Insertable<HospitalAdmission> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('hospital')) {
      context.handle(
        _hospitalMeta,
        hospital.isAcceptableOrUnknown(data['hospital']!, _hospitalMeta),
      );
    } else if (isInserting) {
      context.missing(_hospitalMeta);
    }
    if (data.containsKey('admitting_physician')) {
      context.handle(
        _admittingPhysicianMeta,
        admittingPhysician.isAcceptableOrUnknown(
          data['admitting_physician']!,
          _admittingPhysicianMeta,
        ),
      );
    }
    if (data.containsKey('department')) {
      context.handle(
        _departmentMeta,
        department.isAcceptableOrUnknown(data['department']!, _departmentMeta),
      );
    }
    if (data.containsKey('admission_date')) {
      context.handle(
        _admissionDateMeta,
        admissionDate.isAcceptableOrUnknown(
          data['admission_date']!,
          _admissionDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_admissionDateMeta);
    }
    if (data.containsKey('discharge_date')) {
      context.handle(
        _dischargeDateMeta,
        dischargeDate.isAcceptableOrUnknown(
          data['discharge_date']!,
          _dischargeDateMeta,
        ),
      );
    }
    if (data.containsKey('admission_type')) {
      context.handle(
        _admissionTypeMeta,
        admissionType.isAcceptableOrUnknown(
          data['admission_type']!,
          _admissionTypeMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_admissionTypeMeta);
    }
    if (data.containsKey('chief_complaint')) {
      context.handle(
        _chiefComplaintMeta,
        chiefComplaint.isAcceptableOrUnknown(
          data['chief_complaint']!,
          _chiefComplaintMeta,
        ),
      );
    }
    if (data.containsKey('reason_for_admission')) {
      context.handle(
        _reasonForAdmissionMeta,
        reasonForAdmission.isAcceptableOrUnknown(
          data['reason_for_admission']!,
          _reasonForAdmissionMeta,
        ),
      );
    }
    if (data.containsKey('presenting_symptoms')) {
      context.handle(
        _presentingSymptomsMeta,
        presentingSymptoms.isAcceptableOrUnknown(
          data['presenting_symptoms']!,
          _presentingSymptomsMeta,
        ),
      );
    }
    if (data.containsKey('vital_signs')) {
      context.handle(
        _vitalSignsMeta,
        vitalSigns.isAcceptableOrUnknown(data['vital_signs']!, _vitalSignsMeta),
      );
    }
    if (data.containsKey('initial_diagnosis')) {
      context.handle(
        _initialDiagnosisMeta,
        initialDiagnosis.isAcceptableOrUnknown(
          data['initial_diagnosis']!,
          _initialDiagnosisMeta,
        ),
      );
    }
    if (data.containsKey('working_diagnosis')) {
      context.handle(
        _workingDiagnosisMeta,
        workingDiagnosis.isAcceptableOrUnknown(
          data['working_diagnosis']!,
          _workingDiagnosisMeta,
        ),
      );
    }
    if (data.containsKey('treatment_plan')) {
      context.handle(
        _treatmentPlanMeta,
        treatmentPlan.isAcceptableOrUnknown(
          data['treatment_plan']!,
          _treatmentPlanMeta,
        ),
      );
    }
    if (data.containsKey('medications_on_admission')) {
      context.handle(
        _medicationsOnAdmissionMeta,
        medicationsOnAdmission.isAcceptableOrUnknown(
          data['medications_on_admission']!,
          _medicationsOnAdmissionMeta,
        ),
      );
    }
    if (data.containsKey('allergies_noted')) {
      context.handle(
        _allergiesNotedMeta,
        allergiesNoted.isAcceptableOrUnknown(
          data['allergies_noted']!,
          _allergiesNotedMeta,
        ),
      );
    }
    if (data.containsKey('emergency_contact')) {
      context.handle(
        _emergencyContactMeta,
        emergencyContact.isAcceptableOrUnknown(
          data['emergency_contact']!,
          _emergencyContactMeta,
        ),
      );
    }
    if (data.containsKey('insurance_information')) {
      context.handle(
        _insuranceInformationMeta,
        insuranceInformation.isAcceptableOrUnknown(
          data['insurance_information']!,
          _insuranceInformationMeta,
        ),
      );
    }
    if (data.containsKey('is_emergency_admission')) {
      context.handle(
        _isEmergencyAdmissionMeta,
        isEmergencyAdmission.isAcceptableOrUnknown(
          data['is_emergency_admission']!,
          _isEmergencyAdmissionMeta,
        ),
      );
    }
    if (data.containsKey('referring_physician')) {
      context.handle(
        _referringPhysicianMeta,
        referringPhysician.isAcceptableOrUnknown(
          data['referring_physician']!,
          _referringPhysicianMeta,
        ),
      );
    }
    if (data.containsKey('room_number')) {
      context.handle(
        _roomNumberMeta,
        roomNumber.isAcceptableOrUnknown(data['room_number']!, _roomNumberMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  HospitalAdmission map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return HospitalAdmission(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      hospital: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}hospital'],
      )!,
      admittingPhysician: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}admitting_physician'],
      ),
      department: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}department'],
      ),
      admissionDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}admission_date'],
      )!,
      dischargeDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}discharge_date'],
      ),
      admissionType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}admission_type'],
      )!,
      chiefComplaint: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chief_complaint'],
      ),
      reasonForAdmission: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}reason_for_admission'],
      ),
      presentingSymptoms: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}presenting_symptoms'],
      ),
      vitalSigns: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}vital_signs'],
      ),
      initialDiagnosis: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}initial_diagnosis'],
      ),
      workingDiagnosis: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}working_diagnosis'],
      ),
      treatmentPlan: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}treatment_plan'],
      ),
      medicationsOnAdmission: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}medications_on_admission'],
      ),
      allergiesNoted: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}allergies_noted'],
      ),
      emergencyContact: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}emergency_contact'],
      ),
      insuranceInformation: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}insurance_information'],
      ),
      isEmergencyAdmission: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_emergency_admission'],
      )!,
      referringPhysician: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}referring_physician'],
      ),
      roomNumber: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}room_number'],
      ),
    );
  }

  @override
  $HospitalAdmissionsTable createAlias(String alias) {
    return $HospitalAdmissionsTable(attachedDatabase, alias);
  }
}

class HospitalAdmission extends DataClass
    implements Insertable<HospitalAdmission> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String hospital;
  final String? admittingPhysician;
  final String? department;
  final DateTime admissionDate;
  final DateTime? dischargeDate;
  final String admissionType;
  final String? chiefComplaint;
  final String? reasonForAdmission;
  final String? presentingSymptoms;
  final String? vitalSigns;
  final String? initialDiagnosis;
  final String? workingDiagnosis;
  final String? treatmentPlan;
  final String? medicationsOnAdmission;
  final String? allergiesNoted;
  final String? emergencyContact;
  final String? insuranceInformation;
  final bool isEmergencyAdmission;
  final String? referringPhysician;
  final String? roomNumber;
  const HospitalAdmission({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.hospital,
    this.admittingPhysician,
    this.department,
    required this.admissionDate,
    this.dischargeDate,
    required this.admissionType,
    this.chiefComplaint,
    this.reasonForAdmission,
    this.presentingSymptoms,
    this.vitalSigns,
    this.initialDiagnosis,
    this.workingDiagnosis,
    this.treatmentPlan,
    this.medicationsOnAdmission,
    this.allergiesNoted,
    this.emergencyContact,
    this.insuranceInformation,
    required this.isEmergencyAdmission,
    this.referringPhysician,
    this.roomNumber,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['hospital'] = Variable<String>(hospital);
    if (!nullToAbsent || admittingPhysician != null) {
      map['admitting_physician'] = Variable<String>(admittingPhysician);
    }
    if (!nullToAbsent || department != null) {
      map['department'] = Variable<String>(department);
    }
    map['admission_date'] = Variable<DateTime>(admissionDate);
    if (!nullToAbsent || dischargeDate != null) {
      map['discharge_date'] = Variable<DateTime>(dischargeDate);
    }
    map['admission_type'] = Variable<String>(admissionType);
    if (!nullToAbsent || chiefComplaint != null) {
      map['chief_complaint'] = Variable<String>(chiefComplaint);
    }
    if (!nullToAbsent || reasonForAdmission != null) {
      map['reason_for_admission'] = Variable<String>(reasonForAdmission);
    }
    if (!nullToAbsent || presentingSymptoms != null) {
      map['presenting_symptoms'] = Variable<String>(presentingSymptoms);
    }
    if (!nullToAbsent || vitalSigns != null) {
      map['vital_signs'] = Variable<String>(vitalSigns);
    }
    if (!nullToAbsent || initialDiagnosis != null) {
      map['initial_diagnosis'] = Variable<String>(initialDiagnosis);
    }
    if (!nullToAbsent || workingDiagnosis != null) {
      map['working_diagnosis'] = Variable<String>(workingDiagnosis);
    }
    if (!nullToAbsent || treatmentPlan != null) {
      map['treatment_plan'] = Variable<String>(treatmentPlan);
    }
    if (!nullToAbsent || medicationsOnAdmission != null) {
      map['medications_on_admission'] = Variable<String>(
        medicationsOnAdmission,
      );
    }
    if (!nullToAbsent || allergiesNoted != null) {
      map['allergies_noted'] = Variable<String>(allergiesNoted);
    }
    if (!nullToAbsent || emergencyContact != null) {
      map['emergency_contact'] = Variable<String>(emergencyContact);
    }
    if (!nullToAbsent || insuranceInformation != null) {
      map['insurance_information'] = Variable<String>(insuranceInformation);
    }
    map['is_emergency_admission'] = Variable<bool>(isEmergencyAdmission);
    if (!nullToAbsent || referringPhysician != null) {
      map['referring_physician'] = Variable<String>(referringPhysician);
    }
    if (!nullToAbsent || roomNumber != null) {
      map['room_number'] = Variable<String>(roomNumber);
    }
    return map;
  }

  HospitalAdmissionsCompanion toCompanion(bool nullToAbsent) {
    return HospitalAdmissionsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      hospital: Value(hospital),
      admittingPhysician: admittingPhysician == null && nullToAbsent
          ? const Value.absent()
          : Value(admittingPhysician),
      department: department == null && nullToAbsent
          ? const Value.absent()
          : Value(department),
      admissionDate: Value(admissionDate),
      dischargeDate: dischargeDate == null && nullToAbsent
          ? const Value.absent()
          : Value(dischargeDate),
      admissionType: Value(admissionType),
      chiefComplaint: chiefComplaint == null && nullToAbsent
          ? const Value.absent()
          : Value(chiefComplaint),
      reasonForAdmission: reasonForAdmission == null && nullToAbsent
          ? const Value.absent()
          : Value(reasonForAdmission),
      presentingSymptoms: presentingSymptoms == null && nullToAbsent
          ? const Value.absent()
          : Value(presentingSymptoms),
      vitalSigns: vitalSigns == null && nullToAbsent
          ? const Value.absent()
          : Value(vitalSigns),
      initialDiagnosis: initialDiagnosis == null && nullToAbsent
          ? const Value.absent()
          : Value(initialDiagnosis),
      workingDiagnosis: workingDiagnosis == null && nullToAbsent
          ? const Value.absent()
          : Value(workingDiagnosis),
      treatmentPlan: treatmentPlan == null && nullToAbsent
          ? const Value.absent()
          : Value(treatmentPlan),
      medicationsOnAdmission: medicationsOnAdmission == null && nullToAbsent
          ? const Value.absent()
          : Value(medicationsOnAdmission),
      allergiesNoted: allergiesNoted == null && nullToAbsent
          ? const Value.absent()
          : Value(allergiesNoted),
      emergencyContact: emergencyContact == null && nullToAbsent
          ? const Value.absent()
          : Value(emergencyContact),
      insuranceInformation: insuranceInformation == null && nullToAbsent
          ? const Value.absent()
          : Value(insuranceInformation),
      isEmergencyAdmission: Value(isEmergencyAdmission),
      referringPhysician: referringPhysician == null && nullToAbsent
          ? const Value.absent()
          : Value(referringPhysician),
      roomNumber: roomNumber == null && nullToAbsent
          ? const Value.absent()
          : Value(roomNumber),
    );
  }

  factory HospitalAdmission.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return HospitalAdmission(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      hospital: serializer.fromJson<String>(json['hospital']),
      admittingPhysician: serializer.fromJson<String?>(
        json['admittingPhysician'],
      ),
      department: serializer.fromJson<String?>(json['department']),
      admissionDate: serializer.fromJson<DateTime>(json['admissionDate']),
      dischargeDate: serializer.fromJson<DateTime?>(json['dischargeDate']),
      admissionType: serializer.fromJson<String>(json['admissionType']),
      chiefComplaint: serializer.fromJson<String?>(json['chiefComplaint']),
      reasonForAdmission: serializer.fromJson<String?>(
        json['reasonForAdmission'],
      ),
      presentingSymptoms: serializer.fromJson<String?>(
        json['presentingSymptoms'],
      ),
      vitalSigns: serializer.fromJson<String?>(json['vitalSigns']),
      initialDiagnosis: serializer.fromJson<String?>(json['initialDiagnosis']),
      workingDiagnosis: serializer.fromJson<String?>(json['workingDiagnosis']),
      treatmentPlan: serializer.fromJson<String?>(json['treatmentPlan']),
      medicationsOnAdmission: serializer.fromJson<String?>(
        json['medicationsOnAdmission'],
      ),
      allergiesNoted: serializer.fromJson<String?>(json['allergiesNoted']),
      emergencyContact: serializer.fromJson<String?>(json['emergencyContact']),
      insuranceInformation: serializer.fromJson<String?>(
        json['insuranceInformation'],
      ),
      isEmergencyAdmission: serializer.fromJson<bool>(
        json['isEmergencyAdmission'],
      ),
      referringPhysician: serializer.fromJson<String?>(
        json['referringPhysician'],
      ),
      roomNumber: serializer.fromJson<String?>(json['roomNumber']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'hospital': serializer.toJson<String>(hospital),
      'admittingPhysician': serializer.toJson<String?>(admittingPhysician),
      'department': serializer.toJson<String?>(department),
      'admissionDate': serializer.toJson<DateTime>(admissionDate),
      'dischargeDate': serializer.toJson<DateTime?>(dischargeDate),
      'admissionType': serializer.toJson<String>(admissionType),
      'chiefComplaint': serializer.toJson<String?>(chiefComplaint),
      'reasonForAdmission': serializer.toJson<String?>(reasonForAdmission),
      'presentingSymptoms': serializer.toJson<String?>(presentingSymptoms),
      'vitalSigns': serializer.toJson<String?>(vitalSigns),
      'initialDiagnosis': serializer.toJson<String?>(initialDiagnosis),
      'workingDiagnosis': serializer.toJson<String?>(workingDiagnosis),
      'treatmentPlan': serializer.toJson<String?>(treatmentPlan),
      'medicationsOnAdmission': serializer.toJson<String?>(
        medicationsOnAdmission,
      ),
      'allergiesNoted': serializer.toJson<String?>(allergiesNoted),
      'emergencyContact': serializer.toJson<String?>(emergencyContact),
      'insuranceInformation': serializer.toJson<String?>(insuranceInformation),
      'isEmergencyAdmission': serializer.toJson<bool>(isEmergencyAdmission),
      'referringPhysician': serializer.toJson<String?>(referringPhysician),
      'roomNumber': serializer.toJson<String?>(roomNumber),
    };
  }

  HospitalAdmission copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? hospital,
    Value<String?> admittingPhysician = const Value.absent(),
    Value<String?> department = const Value.absent(),
    DateTime? admissionDate,
    Value<DateTime?> dischargeDate = const Value.absent(),
    String? admissionType,
    Value<String?> chiefComplaint = const Value.absent(),
    Value<String?> reasonForAdmission = const Value.absent(),
    Value<String?> presentingSymptoms = const Value.absent(),
    Value<String?> vitalSigns = const Value.absent(),
    Value<String?> initialDiagnosis = const Value.absent(),
    Value<String?> workingDiagnosis = const Value.absent(),
    Value<String?> treatmentPlan = const Value.absent(),
    Value<String?> medicationsOnAdmission = const Value.absent(),
    Value<String?> allergiesNoted = const Value.absent(),
    Value<String?> emergencyContact = const Value.absent(),
    Value<String?> insuranceInformation = const Value.absent(),
    bool? isEmergencyAdmission,
    Value<String?> referringPhysician = const Value.absent(),
    Value<String?> roomNumber = const Value.absent(),
  }) => HospitalAdmission(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    hospital: hospital ?? this.hospital,
    admittingPhysician: admittingPhysician.present
        ? admittingPhysician.value
        : this.admittingPhysician,
    department: department.present ? department.value : this.department,
    admissionDate: admissionDate ?? this.admissionDate,
    dischargeDate: dischargeDate.present
        ? dischargeDate.value
        : this.dischargeDate,
    admissionType: admissionType ?? this.admissionType,
    chiefComplaint: chiefComplaint.present
        ? chiefComplaint.value
        : this.chiefComplaint,
    reasonForAdmission: reasonForAdmission.present
        ? reasonForAdmission.value
        : this.reasonForAdmission,
    presentingSymptoms: presentingSymptoms.present
        ? presentingSymptoms.value
        : this.presentingSymptoms,
    vitalSigns: vitalSigns.present ? vitalSigns.value : this.vitalSigns,
    initialDiagnosis: initialDiagnosis.present
        ? initialDiagnosis.value
        : this.initialDiagnosis,
    workingDiagnosis: workingDiagnosis.present
        ? workingDiagnosis.value
        : this.workingDiagnosis,
    treatmentPlan: treatmentPlan.present
        ? treatmentPlan.value
        : this.treatmentPlan,
    medicationsOnAdmission: medicationsOnAdmission.present
        ? medicationsOnAdmission.value
        : this.medicationsOnAdmission,
    allergiesNoted: allergiesNoted.present
        ? allergiesNoted.value
        : this.allergiesNoted,
    emergencyContact: emergencyContact.present
        ? emergencyContact.value
        : this.emergencyContact,
    insuranceInformation: insuranceInformation.present
        ? insuranceInformation.value
        : this.insuranceInformation,
    isEmergencyAdmission: isEmergencyAdmission ?? this.isEmergencyAdmission,
    referringPhysician: referringPhysician.present
        ? referringPhysician.value
        : this.referringPhysician,
    roomNumber: roomNumber.present ? roomNumber.value : this.roomNumber,
  );
  HospitalAdmission copyWithCompanion(HospitalAdmissionsCompanion data) {
    return HospitalAdmission(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      hospital: data.hospital.present ? data.hospital.value : this.hospital,
      admittingPhysician: data.admittingPhysician.present
          ? data.admittingPhysician.value
          : this.admittingPhysician,
      department: data.department.present
          ? data.department.value
          : this.department,
      admissionDate: data.admissionDate.present
          ? data.admissionDate.value
          : this.admissionDate,
      dischargeDate: data.dischargeDate.present
          ? data.dischargeDate.value
          : this.dischargeDate,
      admissionType: data.admissionType.present
          ? data.admissionType.value
          : this.admissionType,
      chiefComplaint: data.chiefComplaint.present
          ? data.chiefComplaint.value
          : this.chiefComplaint,
      reasonForAdmission: data.reasonForAdmission.present
          ? data.reasonForAdmission.value
          : this.reasonForAdmission,
      presentingSymptoms: data.presentingSymptoms.present
          ? data.presentingSymptoms.value
          : this.presentingSymptoms,
      vitalSigns: data.vitalSigns.present
          ? data.vitalSigns.value
          : this.vitalSigns,
      initialDiagnosis: data.initialDiagnosis.present
          ? data.initialDiagnosis.value
          : this.initialDiagnosis,
      workingDiagnosis: data.workingDiagnosis.present
          ? data.workingDiagnosis.value
          : this.workingDiagnosis,
      treatmentPlan: data.treatmentPlan.present
          ? data.treatmentPlan.value
          : this.treatmentPlan,
      medicationsOnAdmission: data.medicationsOnAdmission.present
          ? data.medicationsOnAdmission.value
          : this.medicationsOnAdmission,
      allergiesNoted: data.allergiesNoted.present
          ? data.allergiesNoted.value
          : this.allergiesNoted,
      emergencyContact: data.emergencyContact.present
          ? data.emergencyContact.value
          : this.emergencyContact,
      insuranceInformation: data.insuranceInformation.present
          ? data.insuranceInformation.value
          : this.insuranceInformation,
      isEmergencyAdmission: data.isEmergencyAdmission.present
          ? data.isEmergencyAdmission.value
          : this.isEmergencyAdmission,
      referringPhysician: data.referringPhysician.present
          ? data.referringPhysician.value
          : this.referringPhysician,
      roomNumber: data.roomNumber.present
          ? data.roomNumber.value
          : this.roomNumber,
    );
  }

  @override
  String toString() {
    return (StringBuffer('HospitalAdmission(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('hospital: $hospital, ')
          ..write('admittingPhysician: $admittingPhysician, ')
          ..write('department: $department, ')
          ..write('admissionDate: $admissionDate, ')
          ..write('dischargeDate: $dischargeDate, ')
          ..write('admissionType: $admissionType, ')
          ..write('chiefComplaint: $chiefComplaint, ')
          ..write('reasonForAdmission: $reasonForAdmission, ')
          ..write('presentingSymptoms: $presentingSymptoms, ')
          ..write('vitalSigns: $vitalSigns, ')
          ..write('initialDiagnosis: $initialDiagnosis, ')
          ..write('workingDiagnosis: $workingDiagnosis, ')
          ..write('treatmentPlan: $treatmentPlan, ')
          ..write('medicationsOnAdmission: $medicationsOnAdmission, ')
          ..write('allergiesNoted: $allergiesNoted, ')
          ..write('emergencyContact: $emergencyContact, ')
          ..write('insuranceInformation: $insuranceInformation, ')
          ..write('isEmergencyAdmission: $isEmergencyAdmission, ')
          ..write('referringPhysician: $referringPhysician, ')
          ..write('roomNumber: $roomNumber')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    hospital,
    admittingPhysician,
    department,
    admissionDate,
    dischargeDate,
    admissionType,
    chiefComplaint,
    reasonForAdmission,
    presentingSymptoms,
    vitalSigns,
    initialDiagnosis,
    workingDiagnosis,
    treatmentPlan,
    medicationsOnAdmission,
    allergiesNoted,
    emergencyContact,
    insuranceInformation,
    isEmergencyAdmission,
    referringPhysician,
    roomNumber,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is HospitalAdmission &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.hospital == this.hospital &&
          other.admittingPhysician == this.admittingPhysician &&
          other.department == this.department &&
          other.admissionDate == this.admissionDate &&
          other.dischargeDate == this.dischargeDate &&
          other.admissionType == this.admissionType &&
          other.chiefComplaint == this.chiefComplaint &&
          other.reasonForAdmission == this.reasonForAdmission &&
          other.presentingSymptoms == this.presentingSymptoms &&
          other.vitalSigns == this.vitalSigns &&
          other.initialDiagnosis == this.initialDiagnosis &&
          other.workingDiagnosis == this.workingDiagnosis &&
          other.treatmentPlan == this.treatmentPlan &&
          other.medicationsOnAdmission == this.medicationsOnAdmission &&
          other.allergiesNoted == this.allergiesNoted &&
          other.emergencyContact == this.emergencyContact &&
          other.insuranceInformation == this.insuranceInformation &&
          other.isEmergencyAdmission == this.isEmergencyAdmission &&
          other.referringPhysician == this.referringPhysician &&
          other.roomNumber == this.roomNumber);
}

class HospitalAdmissionsCompanion extends UpdateCompanion<HospitalAdmission> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> hospital;
  final Value<String?> admittingPhysician;
  final Value<String?> department;
  final Value<DateTime> admissionDate;
  final Value<DateTime?> dischargeDate;
  final Value<String> admissionType;
  final Value<String?> chiefComplaint;
  final Value<String?> reasonForAdmission;
  final Value<String?> presentingSymptoms;
  final Value<String?> vitalSigns;
  final Value<String?> initialDiagnosis;
  final Value<String?> workingDiagnosis;
  final Value<String?> treatmentPlan;
  final Value<String?> medicationsOnAdmission;
  final Value<String?> allergiesNoted;
  final Value<String?> emergencyContact;
  final Value<String?> insuranceInformation;
  final Value<bool> isEmergencyAdmission;
  final Value<String?> referringPhysician;
  final Value<String?> roomNumber;
  final Value<int> rowid;
  const HospitalAdmissionsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.hospital = const Value.absent(),
    this.admittingPhysician = const Value.absent(),
    this.department = const Value.absent(),
    this.admissionDate = const Value.absent(),
    this.dischargeDate = const Value.absent(),
    this.admissionType = const Value.absent(),
    this.chiefComplaint = const Value.absent(),
    this.reasonForAdmission = const Value.absent(),
    this.presentingSymptoms = const Value.absent(),
    this.vitalSigns = const Value.absent(),
    this.initialDiagnosis = const Value.absent(),
    this.workingDiagnosis = const Value.absent(),
    this.treatmentPlan = const Value.absent(),
    this.medicationsOnAdmission = const Value.absent(),
    this.allergiesNoted = const Value.absent(),
    this.emergencyContact = const Value.absent(),
    this.insuranceInformation = const Value.absent(),
    this.isEmergencyAdmission = const Value.absent(),
    this.referringPhysician = const Value.absent(),
    this.roomNumber = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  HospitalAdmissionsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String hospital,
    this.admittingPhysician = const Value.absent(),
    this.department = const Value.absent(),
    required DateTime admissionDate,
    this.dischargeDate = const Value.absent(),
    required String admissionType,
    this.chiefComplaint = const Value.absent(),
    this.reasonForAdmission = const Value.absent(),
    this.presentingSymptoms = const Value.absent(),
    this.vitalSigns = const Value.absent(),
    this.initialDiagnosis = const Value.absent(),
    this.workingDiagnosis = const Value.absent(),
    this.treatmentPlan = const Value.absent(),
    this.medicationsOnAdmission = const Value.absent(),
    this.allergiesNoted = const Value.absent(),
    this.emergencyContact = const Value.absent(),
    this.insuranceInformation = const Value.absent(),
    this.isEmergencyAdmission = const Value.absent(),
    this.referringPhysician = const Value.absent(),
    this.roomNumber = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       hospital = Value(hospital),
       admissionDate = Value(admissionDate),
       admissionType = Value(admissionType);
  static Insertable<HospitalAdmission> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? hospital,
    Expression<String>? admittingPhysician,
    Expression<String>? department,
    Expression<DateTime>? admissionDate,
    Expression<DateTime>? dischargeDate,
    Expression<String>? admissionType,
    Expression<String>? chiefComplaint,
    Expression<String>? reasonForAdmission,
    Expression<String>? presentingSymptoms,
    Expression<String>? vitalSigns,
    Expression<String>? initialDiagnosis,
    Expression<String>? workingDiagnosis,
    Expression<String>? treatmentPlan,
    Expression<String>? medicationsOnAdmission,
    Expression<String>? allergiesNoted,
    Expression<String>? emergencyContact,
    Expression<String>? insuranceInformation,
    Expression<bool>? isEmergencyAdmission,
    Expression<String>? referringPhysician,
    Expression<String>? roomNumber,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (hospital != null) 'hospital': hospital,
      if (admittingPhysician != null) 'admitting_physician': admittingPhysician,
      if (department != null) 'department': department,
      if (admissionDate != null) 'admission_date': admissionDate,
      if (dischargeDate != null) 'discharge_date': dischargeDate,
      if (admissionType != null) 'admission_type': admissionType,
      if (chiefComplaint != null) 'chief_complaint': chiefComplaint,
      if (reasonForAdmission != null)
        'reason_for_admission': reasonForAdmission,
      if (presentingSymptoms != null) 'presenting_symptoms': presentingSymptoms,
      if (vitalSigns != null) 'vital_signs': vitalSigns,
      if (initialDiagnosis != null) 'initial_diagnosis': initialDiagnosis,
      if (workingDiagnosis != null) 'working_diagnosis': workingDiagnosis,
      if (treatmentPlan != null) 'treatment_plan': treatmentPlan,
      if (medicationsOnAdmission != null)
        'medications_on_admission': medicationsOnAdmission,
      if (allergiesNoted != null) 'allergies_noted': allergiesNoted,
      if (emergencyContact != null) 'emergency_contact': emergencyContact,
      if (insuranceInformation != null)
        'insurance_information': insuranceInformation,
      if (isEmergencyAdmission != null)
        'is_emergency_admission': isEmergencyAdmission,
      if (referringPhysician != null) 'referring_physician': referringPhysician,
      if (roomNumber != null) 'room_number': roomNumber,
      if (rowid != null) 'rowid': rowid,
    });
  }

  HospitalAdmissionsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? hospital,
    Value<String?>? admittingPhysician,
    Value<String?>? department,
    Value<DateTime>? admissionDate,
    Value<DateTime?>? dischargeDate,
    Value<String>? admissionType,
    Value<String?>? chiefComplaint,
    Value<String?>? reasonForAdmission,
    Value<String?>? presentingSymptoms,
    Value<String?>? vitalSigns,
    Value<String?>? initialDiagnosis,
    Value<String?>? workingDiagnosis,
    Value<String?>? treatmentPlan,
    Value<String?>? medicationsOnAdmission,
    Value<String?>? allergiesNoted,
    Value<String?>? emergencyContact,
    Value<String?>? insuranceInformation,
    Value<bool>? isEmergencyAdmission,
    Value<String?>? referringPhysician,
    Value<String?>? roomNumber,
    Value<int>? rowid,
  }) {
    return HospitalAdmissionsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      hospital: hospital ?? this.hospital,
      admittingPhysician: admittingPhysician ?? this.admittingPhysician,
      department: department ?? this.department,
      admissionDate: admissionDate ?? this.admissionDate,
      dischargeDate: dischargeDate ?? this.dischargeDate,
      admissionType: admissionType ?? this.admissionType,
      chiefComplaint: chiefComplaint ?? this.chiefComplaint,
      reasonForAdmission: reasonForAdmission ?? this.reasonForAdmission,
      presentingSymptoms: presentingSymptoms ?? this.presentingSymptoms,
      vitalSigns: vitalSigns ?? this.vitalSigns,
      initialDiagnosis: initialDiagnosis ?? this.initialDiagnosis,
      workingDiagnosis: workingDiagnosis ?? this.workingDiagnosis,
      treatmentPlan: treatmentPlan ?? this.treatmentPlan,
      medicationsOnAdmission:
          medicationsOnAdmission ?? this.medicationsOnAdmission,
      allergiesNoted: allergiesNoted ?? this.allergiesNoted,
      emergencyContact: emergencyContact ?? this.emergencyContact,
      insuranceInformation: insuranceInformation ?? this.insuranceInformation,
      isEmergencyAdmission: isEmergencyAdmission ?? this.isEmergencyAdmission,
      referringPhysician: referringPhysician ?? this.referringPhysician,
      roomNumber: roomNumber ?? this.roomNumber,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (hospital.present) {
      map['hospital'] = Variable<String>(hospital.value);
    }
    if (admittingPhysician.present) {
      map['admitting_physician'] = Variable<String>(admittingPhysician.value);
    }
    if (department.present) {
      map['department'] = Variable<String>(department.value);
    }
    if (admissionDate.present) {
      map['admission_date'] = Variable<DateTime>(admissionDate.value);
    }
    if (dischargeDate.present) {
      map['discharge_date'] = Variable<DateTime>(dischargeDate.value);
    }
    if (admissionType.present) {
      map['admission_type'] = Variable<String>(admissionType.value);
    }
    if (chiefComplaint.present) {
      map['chief_complaint'] = Variable<String>(chiefComplaint.value);
    }
    if (reasonForAdmission.present) {
      map['reason_for_admission'] = Variable<String>(reasonForAdmission.value);
    }
    if (presentingSymptoms.present) {
      map['presenting_symptoms'] = Variable<String>(presentingSymptoms.value);
    }
    if (vitalSigns.present) {
      map['vital_signs'] = Variable<String>(vitalSigns.value);
    }
    if (initialDiagnosis.present) {
      map['initial_diagnosis'] = Variable<String>(initialDiagnosis.value);
    }
    if (workingDiagnosis.present) {
      map['working_diagnosis'] = Variable<String>(workingDiagnosis.value);
    }
    if (treatmentPlan.present) {
      map['treatment_plan'] = Variable<String>(treatmentPlan.value);
    }
    if (medicationsOnAdmission.present) {
      map['medications_on_admission'] = Variable<String>(
        medicationsOnAdmission.value,
      );
    }
    if (allergiesNoted.present) {
      map['allergies_noted'] = Variable<String>(allergiesNoted.value);
    }
    if (emergencyContact.present) {
      map['emergency_contact'] = Variable<String>(emergencyContact.value);
    }
    if (insuranceInformation.present) {
      map['insurance_information'] = Variable<String>(
        insuranceInformation.value,
      );
    }
    if (isEmergencyAdmission.present) {
      map['is_emergency_admission'] = Variable<bool>(
        isEmergencyAdmission.value,
      );
    }
    if (referringPhysician.present) {
      map['referring_physician'] = Variable<String>(referringPhysician.value);
    }
    if (roomNumber.present) {
      map['room_number'] = Variable<String>(roomNumber.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('HospitalAdmissionsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('hospital: $hospital, ')
          ..write('admittingPhysician: $admittingPhysician, ')
          ..write('department: $department, ')
          ..write('admissionDate: $admissionDate, ')
          ..write('dischargeDate: $dischargeDate, ')
          ..write('admissionType: $admissionType, ')
          ..write('chiefComplaint: $chiefComplaint, ')
          ..write('reasonForAdmission: $reasonForAdmission, ')
          ..write('presentingSymptoms: $presentingSymptoms, ')
          ..write('vitalSigns: $vitalSigns, ')
          ..write('initialDiagnosis: $initialDiagnosis, ')
          ..write('workingDiagnosis: $workingDiagnosis, ')
          ..write('treatmentPlan: $treatmentPlan, ')
          ..write('medicationsOnAdmission: $medicationsOnAdmission, ')
          ..write('allergiesNoted: $allergiesNoted, ')
          ..write('emergencyContact: $emergencyContact, ')
          ..write('insuranceInformation: $insuranceInformation, ')
          ..write('isEmergencyAdmission: $isEmergencyAdmission, ')
          ..write('referringPhysician: $referringPhysician, ')
          ..write('roomNumber: $roomNumber, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $DentalRecordsTable extends DentalRecords
    with TableInfo<$DentalRecordsTable, DentalRecord> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $DentalRecordsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('dental_record'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _procedureTypeMeta = const VerificationMeta(
    'procedureType',
  );
  @override
  late final GeneratedColumn<String> procedureType = GeneratedColumn<String>(
    'procedure_type',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _dentistNameMeta = const VerificationMeta(
    'dentistName',
  );
  @override
  late final GeneratedColumn<String> dentistName = GeneratedColumn<String>(
    'dentist_name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dentalOfficeMeta = const VerificationMeta(
    'dentalOffice',
  );
  @override
  late final GeneratedColumn<String> dentalOffice = GeneratedColumn<String>(
    'dental_office',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _appointmentDateMeta = const VerificationMeta(
    'appointmentDate',
  );
  @override
  late final GeneratedColumn<DateTime> appointmentDate =
      GeneratedColumn<DateTime>(
        'appointment_date',
        aliasedName,
        false,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _toothNumbersMeta = const VerificationMeta(
    'toothNumbers',
  );
  @override
  late final GeneratedColumn<String> toothNumbers = GeneratedColumn<String>(
    'tooth_numbers',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _treatmentAreaMeta = const VerificationMeta(
    'treatmentArea',
  );
  @override
  late final GeneratedColumn<String> treatmentArea = GeneratedColumn<String>(
    'treatment_area',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chiefComplaintMeta = const VerificationMeta(
    'chiefComplaint',
  );
  @override
  late final GeneratedColumn<String> chiefComplaint = GeneratedColumn<String>(
    'chief_complaint',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _clinicalFindingsMeta = const VerificationMeta(
    'clinicalFindings',
  );
  @override
  late final GeneratedColumn<String> clinicalFindings = GeneratedColumn<String>(
    'clinical_findings',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _diagnosisMeta = const VerificationMeta(
    'diagnosis',
  );
  @override
  late final GeneratedColumn<String> diagnosis = GeneratedColumn<String>(
    'diagnosis',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _treatmentProvidedMeta = const VerificationMeta(
    'treatmentProvided',
  );
  @override
  late final GeneratedColumn<String> treatmentProvided =
      GeneratedColumn<String>(
        'treatment_provided',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _materialsUsedMeta = const VerificationMeta(
    'materialsUsed',
  );
  @override
  late final GeneratedColumn<String> materialsUsed = GeneratedColumn<String>(
    'materials_used',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _anesthesiaUsedMeta = const VerificationMeta(
    'anesthesiaUsed',
  );
  @override
  late final GeneratedColumn<String> anesthesiaUsed = GeneratedColumn<String>(
    'anesthesia_used',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _postTreatmentInstructionsMeta =
      const VerificationMeta('postTreatmentInstructions');
  @override
  late final GeneratedColumn<String> postTreatmentInstructions =
      GeneratedColumn<String>(
        'post_treatment_instructions',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _followUpRequiredMeta = const VerificationMeta(
    'followUpRequired',
  );
  @override
  late final GeneratedColumn<String> followUpRequired = GeneratedColumn<String>(
    'follow_up_required',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nextAppointmentMeta = const VerificationMeta(
    'nextAppointment',
  );
  @override
  late final GeneratedColumn<DateTime> nextAppointment =
      GeneratedColumn<DateTime>(
        'next_appointment',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _costMeta = const VerificationMeta('cost');
  @override
  late final GeneratedColumn<double> cost = GeneratedColumn<double>(
    'cost',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _insuranceClaimMeta = const VerificationMeta(
    'insuranceClaim',
  );
  @override
  late final GeneratedColumn<String> insuranceClaim = GeneratedColumn<String>(
    'insurance_claim',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _isEmergencyVisitMeta = const VerificationMeta(
    'isEmergencyVisit',
  );
  @override
  late final GeneratedColumn<bool> isEmergencyVisit = GeneratedColumn<bool>(
    'is_emergency_visit',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_emergency_visit" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    procedureType,
    dentistName,
    dentalOffice,
    appointmentDate,
    toothNumbers,
    treatmentArea,
    chiefComplaint,
    clinicalFindings,
    diagnosis,
    treatmentProvided,
    materialsUsed,
    anesthesiaUsed,
    postTreatmentInstructions,
    followUpRequired,
    nextAppointment,
    cost,
    insuranceClaim,
    isEmergencyVisit,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'dental_records';
  @override
  VerificationContext validateIntegrity(
    Insertable<DentalRecord> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('procedure_type')) {
      context.handle(
        _procedureTypeMeta,
        procedureType.isAcceptableOrUnknown(
          data['procedure_type']!,
          _procedureTypeMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_procedureTypeMeta);
    }
    if (data.containsKey('dentist_name')) {
      context.handle(
        _dentistNameMeta,
        dentistName.isAcceptableOrUnknown(
          data['dentist_name']!,
          _dentistNameMeta,
        ),
      );
    }
    if (data.containsKey('dental_office')) {
      context.handle(
        _dentalOfficeMeta,
        dentalOffice.isAcceptableOrUnknown(
          data['dental_office']!,
          _dentalOfficeMeta,
        ),
      );
    }
    if (data.containsKey('appointment_date')) {
      context.handle(
        _appointmentDateMeta,
        appointmentDate.isAcceptableOrUnknown(
          data['appointment_date']!,
          _appointmentDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_appointmentDateMeta);
    }
    if (data.containsKey('tooth_numbers')) {
      context.handle(
        _toothNumbersMeta,
        toothNumbers.isAcceptableOrUnknown(
          data['tooth_numbers']!,
          _toothNumbersMeta,
        ),
      );
    }
    if (data.containsKey('treatment_area')) {
      context.handle(
        _treatmentAreaMeta,
        treatmentArea.isAcceptableOrUnknown(
          data['treatment_area']!,
          _treatmentAreaMeta,
        ),
      );
    }
    if (data.containsKey('chief_complaint')) {
      context.handle(
        _chiefComplaintMeta,
        chiefComplaint.isAcceptableOrUnknown(
          data['chief_complaint']!,
          _chiefComplaintMeta,
        ),
      );
    }
    if (data.containsKey('clinical_findings')) {
      context.handle(
        _clinicalFindingsMeta,
        clinicalFindings.isAcceptableOrUnknown(
          data['clinical_findings']!,
          _clinicalFindingsMeta,
        ),
      );
    }
    if (data.containsKey('diagnosis')) {
      context.handle(
        _diagnosisMeta,
        diagnosis.isAcceptableOrUnknown(data['diagnosis']!, _diagnosisMeta),
      );
    }
    if (data.containsKey('treatment_provided')) {
      context.handle(
        _treatmentProvidedMeta,
        treatmentProvided.isAcceptableOrUnknown(
          data['treatment_provided']!,
          _treatmentProvidedMeta,
        ),
      );
    }
    if (data.containsKey('materials_used')) {
      context.handle(
        _materialsUsedMeta,
        materialsUsed.isAcceptableOrUnknown(
          data['materials_used']!,
          _materialsUsedMeta,
        ),
      );
    }
    if (data.containsKey('anesthesia_used')) {
      context.handle(
        _anesthesiaUsedMeta,
        anesthesiaUsed.isAcceptableOrUnknown(
          data['anesthesia_used']!,
          _anesthesiaUsedMeta,
        ),
      );
    }
    if (data.containsKey('post_treatment_instructions')) {
      context.handle(
        _postTreatmentInstructionsMeta,
        postTreatmentInstructions.isAcceptableOrUnknown(
          data['post_treatment_instructions']!,
          _postTreatmentInstructionsMeta,
        ),
      );
    }
    if (data.containsKey('follow_up_required')) {
      context.handle(
        _followUpRequiredMeta,
        followUpRequired.isAcceptableOrUnknown(
          data['follow_up_required']!,
          _followUpRequiredMeta,
        ),
      );
    }
    if (data.containsKey('next_appointment')) {
      context.handle(
        _nextAppointmentMeta,
        nextAppointment.isAcceptableOrUnknown(
          data['next_appointment']!,
          _nextAppointmentMeta,
        ),
      );
    }
    if (data.containsKey('cost')) {
      context.handle(
        _costMeta,
        cost.isAcceptableOrUnknown(data['cost']!, _costMeta),
      );
    }
    if (data.containsKey('insurance_claim')) {
      context.handle(
        _insuranceClaimMeta,
        insuranceClaim.isAcceptableOrUnknown(
          data['insurance_claim']!,
          _insuranceClaimMeta,
        ),
      );
    }
    if (data.containsKey('is_emergency_visit')) {
      context.handle(
        _isEmergencyVisitMeta,
        isEmergencyVisit.isAcceptableOrUnknown(
          data['is_emergency_visit']!,
          _isEmergencyVisitMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DentalRecord map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DentalRecord(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      procedureType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}procedure_type'],
      )!,
      dentistName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}dentist_name'],
      ),
      dentalOffice: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}dental_office'],
      ),
      appointmentDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}appointment_date'],
      )!,
      toothNumbers: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tooth_numbers'],
      ),
      treatmentArea: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}treatment_area'],
      ),
      chiefComplaint: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chief_complaint'],
      ),
      clinicalFindings: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}clinical_findings'],
      ),
      diagnosis: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}diagnosis'],
      ),
      treatmentProvided: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}treatment_provided'],
      ),
      materialsUsed: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}materials_used'],
      ),
      anesthesiaUsed: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}anesthesia_used'],
      ),
      postTreatmentInstructions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}post_treatment_instructions'],
      ),
      followUpRequired: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}follow_up_required'],
      ),
      nextAppointment: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}next_appointment'],
      ),
      cost: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cost'],
      ),
      insuranceClaim: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}insurance_claim'],
      ),
      isEmergencyVisit: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_emergency_visit'],
      )!,
    );
  }

  @override
  $DentalRecordsTable createAlias(String alias) {
    return $DentalRecordsTable(attachedDatabase, alias);
  }
}

class DentalRecord extends DataClass implements Insertable<DentalRecord> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String procedureType;
  final String? dentistName;
  final String? dentalOffice;
  final DateTime appointmentDate;
  final String? toothNumbers;
  final String? treatmentArea;
  final String? chiefComplaint;
  final String? clinicalFindings;
  final String? diagnosis;
  final String? treatmentProvided;
  final String? materialsUsed;
  final String? anesthesiaUsed;
  final String? postTreatmentInstructions;
  final String? followUpRequired;
  final DateTime? nextAppointment;
  final double? cost;
  final String? insuranceClaim;
  final bool isEmergencyVisit;
  const DentalRecord({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.procedureType,
    this.dentistName,
    this.dentalOffice,
    required this.appointmentDate,
    this.toothNumbers,
    this.treatmentArea,
    this.chiefComplaint,
    this.clinicalFindings,
    this.diagnosis,
    this.treatmentProvided,
    this.materialsUsed,
    this.anesthesiaUsed,
    this.postTreatmentInstructions,
    this.followUpRequired,
    this.nextAppointment,
    this.cost,
    this.insuranceClaim,
    required this.isEmergencyVisit,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['procedure_type'] = Variable<String>(procedureType);
    if (!nullToAbsent || dentistName != null) {
      map['dentist_name'] = Variable<String>(dentistName);
    }
    if (!nullToAbsent || dentalOffice != null) {
      map['dental_office'] = Variable<String>(dentalOffice);
    }
    map['appointment_date'] = Variable<DateTime>(appointmentDate);
    if (!nullToAbsent || toothNumbers != null) {
      map['tooth_numbers'] = Variable<String>(toothNumbers);
    }
    if (!nullToAbsent || treatmentArea != null) {
      map['treatment_area'] = Variable<String>(treatmentArea);
    }
    if (!nullToAbsent || chiefComplaint != null) {
      map['chief_complaint'] = Variable<String>(chiefComplaint);
    }
    if (!nullToAbsent || clinicalFindings != null) {
      map['clinical_findings'] = Variable<String>(clinicalFindings);
    }
    if (!nullToAbsent || diagnosis != null) {
      map['diagnosis'] = Variable<String>(diagnosis);
    }
    if (!nullToAbsent || treatmentProvided != null) {
      map['treatment_provided'] = Variable<String>(treatmentProvided);
    }
    if (!nullToAbsent || materialsUsed != null) {
      map['materials_used'] = Variable<String>(materialsUsed);
    }
    if (!nullToAbsent || anesthesiaUsed != null) {
      map['anesthesia_used'] = Variable<String>(anesthesiaUsed);
    }
    if (!nullToAbsent || postTreatmentInstructions != null) {
      map['post_treatment_instructions'] = Variable<String>(
        postTreatmentInstructions,
      );
    }
    if (!nullToAbsent || followUpRequired != null) {
      map['follow_up_required'] = Variable<String>(followUpRequired);
    }
    if (!nullToAbsent || nextAppointment != null) {
      map['next_appointment'] = Variable<DateTime>(nextAppointment);
    }
    if (!nullToAbsent || cost != null) {
      map['cost'] = Variable<double>(cost);
    }
    if (!nullToAbsent || insuranceClaim != null) {
      map['insurance_claim'] = Variable<String>(insuranceClaim);
    }
    map['is_emergency_visit'] = Variable<bool>(isEmergencyVisit);
    return map;
  }

  DentalRecordsCompanion toCompanion(bool nullToAbsent) {
    return DentalRecordsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      procedureType: Value(procedureType),
      dentistName: dentistName == null && nullToAbsent
          ? const Value.absent()
          : Value(dentistName),
      dentalOffice: dentalOffice == null && nullToAbsent
          ? const Value.absent()
          : Value(dentalOffice),
      appointmentDate: Value(appointmentDate),
      toothNumbers: toothNumbers == null && nullToAbsent
          ? const Value.absent()
          : Value(toothNumbers),
      treatmentArea: treatmentArea == null && nullToAbsent
          ? const Value.absent()
          : Value(treatmentArea),
      chiefComplaint: chiefComplaint == null && nullToAbsent
          ? const Value.absent()
          : Value(chiefComplaint),
      clinicalFindings: clinicalFindings == null && nullToAbsent
          ? const Value.absent()
          : Value(clinicalFindings),
      diagnosis: diagnosis == null && nullToAbsent
          ? const Value.absent()
          : Value(diagnosis),
      treatmentProvided: treatmentProvided == null && nullToAbsent
          ? const Value.absent()
          : Value(treatmentProvided),
      materialsUsed: materialsUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(materialsUsed),
      anesthesiaUsed: anesthesiaUsed == null && nullToAbsent
          ? const Value.absent()
          : Value(anesthesiaUsed),
      postTreatmentInstructions:
          postTreatmentInstructions == null && nullToAbsent
          ? const Value.absent()
          : Value(postTreatmentInstructions),
      followUpRequired: followUpRequired == null && nullToAbsent
          ? const Value.absent()
          : Value(followUpRequired),
      nextAppointment: nextAppointment == null && nullToAbsent
          ? const Value.absent()
          : Value(nextAppointment),
      cost: cost == null && nullToAbsent ? const Value.absent() : Value(cost),
      insuranceClaim: insuranceClaim == null && nullToAbsent
          ? const Value.absent()
          : Value(insuranceClaim),
      isEmergencyVisit: Value(isEmergencyVisit),
    );
  }

  factory DentalRecord.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DentalRecord(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      procedureType: serializer.fromJson<String>(json['procedureType']),
      dentistName: serializer.fromJson<String?>(json['dentistName']),
      dentalOffice: serializer.fromJson<String?>(json['dentalOffice']),
      appointmentDate: serializer.fromJson<DateTime>(json['appointmentDate']),
      toothNumbers: serializer.fromJson<String?>(json['toothNumbers']),
      treatmentArea: serializer.fromJson<String?>(json['treatmentArea']),
      chiefComplaint: serializer.fromJson<String?>(json['chiefComplaint']),
      clinicalFindings: serializer.fromJson<String?>(json['clinicalFindings']),
      diagnosis: serializer.fromJson<String?>(json['diagnosis']),
      treatmentProvided: serializer.fromJson<String?>(
        json['treatmentProvided'],
      ),
      materialsUsed: serializer.fromJson<String?>(json['materialsUsed']),
      anesthesiaUsed: serializer.fromJson<String?>(json['anesthesiaUsed']),
      postTreatmentInstructions: serializer.fromJson<String?>(
        json['postTreatmentInstructions'],
      ),
      followUpRequired: serializer.fromJson<String?>(json['followUpRequired']),
      nextAppointment: serializer.fromJson<DateTime?>(json['nextAppointment']),
      cost: serializer.fromJson<double?>(json['cost']),
      insuranceClaim: serializer.fromJson<String?>(json['insuranceClaim']),
      isEmergencyVisit: serializer.fromJson<bool>(json['isEmergencyVisit']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'procedureType': serializer.toJson<String>(procedureType),
      'dentistName': serializer.toJson<String?>(dentistName),
      'dentalOffice': serializer.toJson<String?>(dentalOffice),
      'appointmentDate': serializer.toJson<DateTime>(appointmentDate),
      'toothNumbers': serializer.toJson<String?>(toothNumbers),
      'treatmentArea': serializer.toJson<String?>(treatmentArea),
      'chiefComplaint': serializer.toJson<String?>(chiefComplaint),
      'clinicalFindings': serializer.toJson<String?>(clinicalFindings),
      'diagnosis': serializer.toJson<String?>(diagnosis),
      'treatmentProvided': serializer.toJson<String?>(treatmentProvided),
      'materialsUsed': serializer.toJson<String?>(materialsUsed),
      'anesthesiaUsed': serializer.toJson<String?>(anesthesiaUsed),
      'postTreatmentInstructions': serializer.toJson<String?>(
        postTreatmentInstructions,
      ),
      'followUpRequired': serializer.toJson<String?>(followUpRequired),
      'nextAppointment': serializer.toJson<DateTime?>(nextAppointment),
      'cost': serializer.toJson<double?>(cost),
      'insuranceClaim': serializer.toJson<String?>(insuranceClaim),
      'isEmergencyVisit': serializer.toJson<bool>(isEmergencyVisit),
    };
  }

  DentalRecord copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? procedureType,
    Value<String?> dentistName = const Value.absent(),
    Value<String?> dentalOffice = const Value.absent(),
    DateTime? appointmentDate,
    Value<String?> toothNumbers = const Value.absent(),
    Value<String?> treatmentArea = const Value.absent(),
    Value<String?> chiefComplaint = const Value.absent(),
    Value<String?> clinicalFindings = const Value.absent(),
    Value<String?> diagnosis = const Value.absent(),
    Value<String?> treatmentProvided = const Value.absent(),
    Value<String?> materialsUsed = const Value.absent(),
    Value<String?> anesthesiaUsed = const Value.absent(),
    Value<String?> postTreatmentInstructions = const Value.absent(),
    Value<String?> followUpRequired = const Value.absent(),
    Value<DateTime?> nextAppointment = const Value.absent(),
    Value<double?> cost = const Value.absent(),
    Value<String?> insuranceClaim = const Value.absent(),
    bool? isEmergencyVisit,
  }) => DentalRecord(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    procedureType: procedureType ?? this.procedureType,
    dentistName: dentistName.present ? dentistName.value : this.dentistName,
    dentalOffice: dentalOffice.present ? dentalOffice.value : this.dentalOffice,
    appointmentDate: appointmentDate ?? this.appointmentDate,
    toothNumbers: toothNumbers.present ? toothNumbers.value : this.toothNumbers,
    treatmentArea: treatmentArea.present
        ? treatmentArea.value
        : this.treatmentArea,
    chiefComplaint: chiefComplaint.present
        ? chiefComplaint.value
        : this.chiefComplaint,
    clinicalFindings: clinicalFindings.present
        ? clinicalFindings.value
        : this.clinicalFindings,
    diagnosis: diagnosis.present ? diagnosis.value : this.diagnosis,
    treatmentProvided: treatmentProvided.present
        ? treatmentProvided.value
        : this.treatmentProvided,
    materialsUsed: materialsUsed.present
        ? materialsUsed.value
        : this.materialsUsed,
    anesthesiaUsed: anesthesiaUsed.present
        ? anesthesiaUsed.value
        : this.anesthesiaUsed,
    postTreatmentInstructions: postTreatmentInstructions.present
        ? postTreatmentInstructions.value
        : this.postTreatmentInstructions,
    followUpRequired: followUpRequired.present
        ? followUpRequired.value
        : this.followUpRequired,
    nextAppointment: nextAppointment.present
        ? nextAppointment.value
        : this.nextAppointment,
    cost: cost.present ? cost.value : this.cost,
    insuranceClaim: insuranceClaim.present
        ? insuranceClaim.value
        : this.insuranceClaim,
    isEmergencyVisit: isEmergencyVisit ?? this.isEmergencyVisit,
  );
  DentalRecord copyWithCompanion(DentalRecordsCompanion data) {
    return DentalRecord(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      procedureType: data.procedureType.present
          ? data.procedureType.value
          : this.procedureType,
      dentistName: data.dentistName.present
          ? data.dentistName.value
          : this.dentistName,
      dentalOffice: data.dentalOffice.present
          ? data.dentalOffice.value
          : this.dentalOffice,
      appointmentDate: data.appointmentDate.present
          ? data.appointmentDate.value
          : this.appointmentDate,
      toothNumbers: data.toothNumbers.present
          ? data.toothNumbers.value
          : this.toothNumbers,
      treatmentArea: data.treatmentArea.present
          ? data.treatmentArea.value
          : this.treatmentArea,
      chiefComplaint: data.chiefComplaint.present
          ? data.chiefComplaint.value
          : this.chiefComplaint,
      clinicalFindings: data.clinicalFindings.present
          ? data.clinicalFindings.value
          : this.clinicalFindings,
      diagnosis: data.diagnosis.present ? data.diagnosis.value : this.diagnosis,
      treatmentProvided: data.treatmentProvided.present
          ? data.treatmentProvided.value
          : this.treatmentProvided,
      materialsUsed: data.materialsUsed.present
          ? data.materialsUsed.value
          : this.materialsUsed,
      anesthesiaUsed: data.anesthesiaUsed.present
          ? data.anesthesiaUsed.value
          : this.anesthesiaUsed,
      postTreatmentInstructions: data.postTreatmentInstructions.present
          ? data.postTreatmentInstructions.value
          : this.postTreatmentInstructions,
      followUpRequired: data.followUpRequired.present
          ? data.followUpRequired.value
          : this.followUpRequired,
      nextAppointment: data.nextAppointment.present
          ? data.nextAppointment.value
          : this.nextAppointment,
      cost: data.cost.present ? data.cost.value : this.cost,
      insuranceClaim: data.insuranceClaim.present
          ? data.insuranceClaim.value
          : this.insuranceClaim,
      isEmergencyVisit: data.isEmergencyVisit.present
          ? data.isEmergencyVisit.value
          : this.isEmergencyVisit,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DentalRecord(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('procedureType: $procedureType, ')
          ..write('dentistName: $dentistName, ')
          ..write('dentalOffice: $dentalOffice, ')
          ..write('appointmentDate: $appointmentDate, ')
          ..write('toothNumbers: $toothNumbers, ')
          ..write('treatmentArea: $treatmentArea, ')
          ..write('chiefComplaint: $chiefComplaint, ')
          ..write('clinicalFindings: $clinicalFindings, ')
          ..write('diagnosis: $diagnosis, ')
          ..write('treatmentProvided: $treatmentProvided, ')
          ..write('materialsUsed: $materialsUsed, ')
          ..write('anesthesiaUsed: $anesthesiaUsed, ')
          ..write('postTreatmentInstructions: $postTreatmentInstructions, ')
          ..write('followUpRequired: $followUpRequired, ')
          ..write('nextAppointment: $nextAppointment, ')
          ..write('cost: $cost, ')
          ..write('insuranceClaim: $insuranceClaim, ')
          ..write('isEmergencyVisit: $isEmergencyVisit')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    procedureType,
    dentistName,
    dentalOffice,
    appointmentDate,
    toothNumbers,
    treatmentArea,
    chiefComplaint,
    clinicalFindings,
    diagnosis,
    treatmentProvided,
    materialsUsed,
    anesthesiaUsed,
    postTreatmentInstructions,
    followUpRequired,
    nextAppointment,
    cost,
    insuranceClaim,
    isEmergencyVisit,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DentalRecord &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.procedureType == this.procedureType &&
          other.dentistName == this.dentistName &&
          other.dentalOffice == this.dentalOffice &&
          other.appointmentDate == this.appointmentDate &&
          other.toothNumbers == this.toothNumbers &&
          other.treatmentArea == this.treatmentArea &&
          other.chiefComplaint == this.chiefComplaint &&
          other.clinicalFindings == this.clinicalFindings &&
          other.diagnosis == this.diagnosis &&
          other.treatmentProvided == this.treatmentProvided &&
          other.materialsUsed == this.materialsUsed &&
          other.anesthesiaUsed == this.anesthesiaUsed &&
          other.postTreatmentInstructions == this.postTreatmentInstructions &&
          other.followUpRequired == this.followUpRequired &&
          other.nextAppointment == this.nextAppointment &&
          other.cost == this.cost &&
          other.insuranceClaim == this.insuranceClaim &&
          other.isEmergencyVisit == this.isEmergencyVisit);
}

class DentalRecordsCompanion extends UpdateCompanion<DentalRecord> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> procedureType;
  final Value<String?> dentistName;
  final Value<String?> dentalOffice;
  final Value<DateTime> appointmentDate;
  final Value<String?> toothNumbers;
  final Value<String?> treatmentArea;
  final Value<String?> chiefComplaint;
  final Value<String?> clinicalFindings;
  final Value<String?> diagnosis;
  final Value<String?> treatmentProvided;
  final Value<String?> materialsUsed;
  final Value<String?> anesthesiaUsed;
  final Value<String?> postTreatmentInstructions;
  final Value<String?> followUpRequired;
  final Value<DateTime?> nextAppointment;
  final Value<double?> cost;
  final Value<String?> insuranceClaim;
  final Value<bool> isEmergencyVisit;
  final Value<int> rowid;
  const DentalRecordsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.procedureType = const Value.absent(),
    this.dentistName = const Value.absent(),
    this.dentalOffice = const Value.absent(),
    this.appointmentDate = const Value.absent(),
    this.toothNumbers = const Value.absent(),
    this.treatmentArea = const Value.absent(),
    this.chiefComplaint = const Value.absent(),
    this.clinicalFindings = const Value.absent(),
    this.diagnosis = const Value.absent(),
    this.treatmentProvided = const Value.absent(),
    this.materialsUsed = const Value.absent(),
    this.anesthesiaUsed = const Value.absent(),
    this.postTreatmentInstructions = const Value.absent(),
    this.followUpRequired = const Value.absent(),
    this.nextAppointment = const Value.absent(),
    this.cost = const Value.absent(),
    this.insuranceClaim = const Value.absent(),
    this.isEmergencyVisit = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DentalRecordsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String procedureType,
    this.dentistName = const Value.absent(),
    this.dentalOffice = const Value.absent(),
    required DateTime appointmentDate,
    this.toothNumbers = const Value.absent(),
    this.treatmentArea = const Value.absent(),
    this.chiefComplaint = const Value.absent(),
    this.clinicalFindings = const Value.absent(),
    this.diagnosis = const Value.absent(),
    this.treatmentProvided = const Value.absent(),
    this.materialsUsed = const Value.absent(),
    this.anesthesiaUsed = const Value.absent(),
    this.postTreatmentInstructions = const Value.absent(),
    this.followUpRequired = const Value.absent(),
    this.nextAppointment = const Value.absent(),
    this.cost = const Value.absent(),
    this.insuranceClaim = const Value.absent(),
    this.isEmergencyVisit = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       procedureType = Value(procedureType),
       appointmentDate = Value(appointmentDate);
  static Insertable<DentalRecord> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? procedureType,
    Expression<String>? dentistName,
    Expression<String>? dentalOffice,
    Expression<DateTime>? appointmentDate,
    Expression<String>? toothNumbers,
    Expression<String>? treatmentArea,
    Expression<String>? chiefComplaint,
    Expression<String>? clinicalFindings,
    Expression<String>? diagnosis,
    Expression<String>? treatmentProvided,
    Expression<String>? materialsUsed,
    Expression<String>? anesthesiaUsed,
    Expression<String>? postTreatmentInstructions,
    Expression<String>? followUpRequired,
    Expression<DateTime>? nextAppointment,
    Expression<double>? cost,
    Expression<String>? insuranceClaim,
    Expression<bool>? isEmergencyVisit,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (procedureType != null) 'procedure_type': procedureType,
      if (dentistName != null) 'dentist_name': dentistName,
      if (dentalOffice != null) 'dental_office': dentalOffice,
      if (appointmentDate != null) 'appointment_date': appointmentDate,
      if (toothNumbers != null) 'tooth_numbers': toothNumbers,
      if (treatmentArea != null) 'treatment_area': treatmentArea,
      if (chiefComplaint != null) 'chief_complaint': chiefComplaint,
      if (clinicalFindings != null) 'clinical_findings': clinicalFindings,
      if (diagnosis != null) 'diagnosis': diagnosis,
      if (treatmentProvided != null) 'treatment_provided': treatmentProvided,
      if (materialsUsed != null) 'materials_used': materialsUsed,
      if (anesthesiaUsed != null) 'anesthesia_used': anesthesiaUsed,
      if (postTreatmentInstructions != null)
        'post_treatment_instructions': postTreatmentInstructions,
      if (followUpRequired != null) 'follow_up_required': followUpRequired,
      if (nextAppointment != null) 'next_appointment': nextAppointment,
      if (cost != null) 'cost': cost,
      if (insuranceClaim != null) 'insurance_claim': insuranceClaim,
      if (isEmergencyVisit != null) 'is_emergency_visit': isEmergencyVisit,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DentalRecordsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? procedureType,
    Value<String?>? dentistName,
    Value<String?>? dentalOffice,
    Value<DateTime>? appointmentDate,
    Value<String?>? toothNumbers,
    Value<String?>? treatmentArea,
    Value<String?>? chiefComplaint,
    Value<String?>? clinicalFindings,
    Value<String?>? diagnosis,
    Value<String?>? treatmentProvided,
    Value<String?>? materialsUsed,
    Value<String?>? anesthesiaUsed,
    Value<String?>? postTreatmentInstructions,
    Value<String?>? followUpRequired,
    Value<DateTime?>? nextAppointment,
    Value<double?>? cost,
    Value<String?>? insuranceClaim,
    Value<bool>? isEmergencyVisit,
    Value<int>? rowid,
  }) {
    return DentalRecordsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      procedureType: procedureType ?? this.procedureType,
      dentistName: dentistName ?? this.dentistName,
      dentalOffice: dentalOffice ?? this.dentalOffice,
      appointmentDate: appointmentDate ?? this.appointmentDate,
      toothNumbers: toothNumbers ?? this.toothNumbers,
      treatmentArea: treatmentArea ?? this.treatmentArea,
      chiefComplaint: chiefComplaint ?? this.chiefComplaint,
      clinicalFindings: clinicalFindings ?? this.clinicalFindings,
      diagnosis: diagnosis ?? this.diagnosis,
      treatmentProvided: treatmentProvided ?? this.treatmentProvided,
      materialsUsed: materialsUsed ?? this.materialsUsed,
      anesthesiaUsed: anesthesiaUsed ?? this.anesthesiaUsed,
      postTreatmentInstructions:
          postTreatmentInstructions ?? this.postTreatmentInstructions,
      followUpRequired: followUpRequired ?? this.followUpRequired,
      nextAppointment: nextAppointment ?? this.nextAppointment,
      cost: cost ?? this.cost,
      insuranceClaim: insuranceClaim ?? this.insuranceClaim,
      isEmergencyVisit: isEmergencyVisit ?? this.isEmergencyVisit,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (procedureType.present) {
      map['procedure_type'] = Variable<String>(procedureType.value);
    }
    if (dentistName.present) {
      map['dentist_name'] = Variable<String>(dentistName.value);
    }
    if (dentalOffice.present) {
      map['dental_office'] = Variable<String>(dentalOffice.value);
    }
    if (appointmentDate.present) {
      map['appointment_date'] = Variable<DateTime>(appointmentDate.value);
    }
    if (toothNumbers.present) {
      map['tooth_numbers'] = Variable<String>(toothNumbers.value);
    }
    if (treatmentArea.present) {
      map['treatment_area'] = Variable<String>(treatmentArea.value);
    }
    if (chiefComplaint.present) {
      map['chief_complaint'] = Variable<String>(chiefComplaint.value);
    }
    if (clinicalFindings.present) {
      map['clinical_findings'] = Variable<String>(clinicalFindings.value);
    }
    if (diagnosis.present) {
      map['diagnosis'] = Variable<String>(diagnosis.value);
    }
    if (treatmentProvided.present) {
      map['treatment_provided'] = Variable<String>(treatmentProvided.value);
    }
    if (materialsUsed.present) {
      map['materials_used'] = Variable<String>(materialsUsed.value);
    }
    if (anesthesiaUsed.present) {
      map['anesthesia_used'] = Variable<String>(anesthesiaUsed.value);
    }
    if (postTreatmentInstructions.present) {
      map['post_treatment_instructions'] = Variable<String>(
        postTreatmentInstructions.value,
      );
    }
    if (followUpRequired.present) {
      map['follow_up_required'] = Variable<String>(followUpRequired.value);
    }
    if (nextAppointment.present) {
      map['next_appointment'] = Variable<DateTime>(nextAppointment.value);
    }
    if (cost.present) {
      map['cost'] = Variable<double>(cost.value);
    }
    if (insuranceClaim.present) {
      map['insurance_claim'] = Variable<String>(insuranceClaim.value);
    }
    if (isEmergencyVisit.present) {
      map['is_emergency_visit'] = Variable<bool>(isEmergencyVisit.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DentalRecordsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('procedureType: $procedureType, ')
          ..write('dentistName: $dentistName, ')
          ..write('dentalOffice: $dentalOffice, ')
          ..write('appointmentDate: $appointmentDate, ')
          ..write('toothNumbers: $toothNumbers, ')
          ..write('treatmentArea: $treatmentArea, ')
          ..write('chiefComplaint: $chiefComplaint, ')
          ..write('clinicalFindings: $clinicalFindings, ')
          ..write('diagnosis: $diagnosis, ')
          ..write('treatmentProvided: $treatmentProvided, ')
          ..write('materialsUsed: $materialsUsed, ')
          ..write('anesthesiaUsed: $anesthesiaUsed, ')
          ..write('postTreatmentInstructions: $postTreatmentInstructions, ')
          ..write('followUpRequired: $followUpRequired, ')
          ..write('nextAppointment: $nextAppointment, ')
          ..write('cost: $cost, ')
          ..write('insuranceClaim: $insuranceClaim, ')
          ..write('isEmergencyVisit: $isEmergencyVisit, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $MentalHealthRecordsTable extends MentalHealthRecords
    with TableInfo<$MentalHealthRecordsTable, MentalHealthRecord> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MentalHealthRecordsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('mental_health_record'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _sessionTypeMeta = const VerificationMeta(
    'sessionType',
  );
  @override
  late final GeneratedColumn<String> sessionType = GeneratedColumn<String>(
    'session_type',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _providerNameMeta = const VerificationMeta(
    'providerName',
  );
  @override
  late final GeneratedColumn<String> providerName = GeneratedColumn<String>(
    'provider_name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _providerTypeMeta = const VerificationMeta(
    'providerType',
  );
  @override
  late final GeneratedColumn<String> providerType = GeneratedColumn<String>(
    'provider_type',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _facilityMeta = const VerificationMeta(
    'facility',
  );
  @override
  late final GeneratedColumn<String> facility = GeneratedColumn<String>(
    'facility',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _sessionDateMeta = const VerificationMeta(
    'sessionDate',
  );
  @override
  late final GeneratedColumn<DateTime> sessionDate = GeneratedColumn<DateTime>(
    'session_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _sessionDurationMeta = const VerificationMeta(
    'sessionDuration',
  );
  @override
  late final GeneratedColumn<int> sessionDuration = GeneratedColumn<int>(
    'session_duration',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _presentingConcernsMeta =
      const VerificationMeta('presentingConcerns');
  @override
  late final GeneratedColumn<String> presentingConcerns =
      GeneratedColumn<String>(
        'presenting_concerns',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _moodAssessmentMeta = const VerificationMeta(
    'moodAssessment',
  );
  @override
  late final GeneratedColumn<String> moodAssessment = GeneratedColumn<String>(
    'mood_assessment',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _thoughtProcessMeta = const VerificationMeta(
    'thoughtProcess',
  );
  @override
  late final GeneratedColumn<String> thoughtProcess = GeneratedColumn<String>(
    'thought_process',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _riskAssessmentMeta = const VerificationMeta(
    'riskAssessment',
  );
  @override
  late final GeneratedColumn<String> riskAssessment = GeneratedColumn<String>(
    'risk_assessment',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _treatmentGoalsMeta = const VerificationMeta(
    'treatmentGoals',
  );
  @override
  late final GeneratedColumn<String> treatmentGoals = GeneratedColumn<String>(
    'treatment_goals',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _interventionsMeta = const VerificationMeta(
    'interventions',
  );
  @override
  late final GeneratedColumn<String> interventions = GeneratedColumn<String>(
    'interventions',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _homeworkMeta = const VerificationMeta(
    'homework',
  );
  @override
  late final GeneratedColumn<String> homework = GeneratedColumn<String>(
    'homework',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _medicationDiscussionMeta =
      const VerificationMeta('medicationDiscussion');
  @override
  late final GeneratedColumn<String> medicationDiscussion =
      GeneratedColumn<String>(
        'medication_discussion',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _progressNotesMeta = const VerificationMeta(
    'progressNotes',
  );
  @override
  late final GeneratedColumn<String> progressNotes = GeneratedColumn<String>(
    'progress_notes',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _planForNextSessionMeta =
      const VerificationMeta('planForNextSession');
  @override
  late final GeneratedColumn<String> planForNextSession =
      GeneratedColumn<String>(
        'plan_for_next_session',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _nextAppointmentMeta = const VerificationMeta(
    'nextAppointment',
  );
  @override
  late final GeneratedColumn<DateTime> nextAppointment =
      GeneratedColumn<DateTime>(
        'next_appointment',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _moodRatingMeta = const VerificationMeta(
    'moodRating',
  );
  @override
  late final GeneratedColumn<int> moodRating = GeneratedColumn<int>(
    'mood_rating',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _anxietyRatingMeta = const VerificationMeta(
    'anxietyRating',
  );
  @override
  late final GeneratedColumn<int> anxietyRating = GeneratedColumn<int>(
    'anxiety_rating',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _isCrisisSessionMeta = const VerificationMeta(
    'isCrisisSession',
  );
  @override
  late final GeneratedColumn<bool> isCrisisSession = GeneratedColumn<bool>(
    'is_crisis_session',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_crisis_session" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    sessionType,
    providerName,
    providerType,
    facility,
    sessionDate,
    sessionDuration,
    presentingConcerns,
    moodAssessment,
    thoughtProcess,
    riskAssessment,
    treatmentGoals,
    interventions,
    homework,
    medicationDiscussion,
    progressNotes,
    planForNextSession,
    nextAppointment,
    moodRating,
    anxietyRating,
    isCrisisSession,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'mental_health_records';
  @override
  VerificationContext validateIntegrity(
    Insertable<MentalHealthRecord> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('session_type')) {
      context.handle(
        _sessionTypeMeta,
        sessionType.isAcceptableOrUnknown(
          data['session_type']!,
          _sessionTypeMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_sessionTypeMeta);
    }
    if (data.containsKey('provider_name')) {
      context.handle(
        _providerNameMeta,
        providerName.isAcceptableOrUnknown(
          data['provider_name']!,
          _providerNameMeta,
        ),
      );
    }
    if (data.containsKey('provider_type')) {
      context.handle(
        _providerTypeMeta,
        providerType.isAcceptableOrUnknown(
          data['provider_type']!,
          _providerTypeMeta,
        ),
      );
    }
    if (data.containsKey('facility')) {
      context.handle(
        _facilityMeta,
        facility.isAcceptableOrUnknown(data['facility']!, _facilityMeta),
      );
    }
    if (data.containsKey('session_date')) {
      context.handle(
        _sessionDateMeta,
        sessionDate.isAcceptableOrUnknown(
          data['session_date']!,
          _sessionDateMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_sessionDateMeta);
    }
    if (data.containsKey('session_duration')) {
      context.handle(
        _sessionDurationMeta,
        sessionDuration.isAcceptableOrUnknown(
          data['session_duration']!,
          _sessionDurationMeta,
        ),
      );
    }
    if (data.containsKey('presenting_concerns')) {
      context.handle(
        _presentingConcernsMeta,
        presentingConcerns.isAcceptableOrUnknown(
          data['presenting_concerns']!,
          _presentingConcernsMeta,
        ),
      );
    }
    if (data.containsKey('mood_assessment')) {
      context.handle(
        _moodAssessmentMeta,
        moodAssessment.isAcceptableOrUnknown(
          data['mood_assessment']!,
          _moodAssessmentMeta,
        ),
      );
    }
    if (data.containsKey('thought_process')) {
      context.handle(
        _thoughtProcessMeta,
        thoughtProcess.isAcceptableOrUnknown(
          data['thought_process']!,
          _thoughtProcessMeta,
        ),
      );
    }
    if (data.containsKey('risk_assessment')) {
      context.handle(
        _riskAssessmentMeta,
        riskAssessment.isAcceptableOrUnknown(
          data['risk_assessment']!,
          _riskAssessmentMeta,
        ),
      );
    }
    if (data.containsKey('treatment_goals')) {
      context.handle(
        _treatmentGoalsMeta,
        treatmentGoals.isAcceptableOrUnknown(
          data['treatment_goals']!,
          _treatmentGoalsMeta,
        ),
      );
    }
    if (data.containsKey('interventions')) {
      context.handle(
        _interventionsMeta,
        interventions.isAcceptableOrUnknown(
          data['interventions']!,
          _interventionsMeta,
        ),
      );
    }
    if (data.containsKey('homework')) {
      context.handle(
        _homeworkMeta,
        homework.isAcceptableOrUnknown(data['homework']!, _homeworkMeta),
      );
    }
    if (data.containsKey('medication_discussion')) {
      context.handle(
        _medicationDiscussionMeta,
        medicationDiscussion.isAcceptableOrUnknown(
          data['medication_discussion']!,
          _medicationDiscussionMeta,
        ),
      );
    }
    if (data.containsKey('progress_notes')) {
      context.handle(
        _progressNotesMeta,
        progressNotes.isAcceptableOrUnknown(
          data['progress_notes']!,
          _progressNotesMeta,
        ),
      );
    }
    if (data.containsKey('plan_for_next_session')) {
      context.handle(
        _planForNextSessionMeta,
        planForNextSession.isAcceptableOrUnknown(
          data['plan_for_next_session']!,
          _planForNextSessionMeta,
        ),
      );
    }
    if (data.containsKey('next_appointment')) {
      context.handle(
        _nextAppointmentMeta,
        nextAppointment.isAcceptableOrUnknown(
          data['next_appointment']!,
          _nextAppointmentMeta,
        ),
      );
    }
    if (data.containsKey('mood_rating')) {
      context.handle(
        _moodRatingMeta,
        moodRating.isAcceptableOrUnknown(data['mood_rating']!, _moodRatingMeta),
      );
    }
    if (data.containsKey('anxiety_rating')) {
      context.handle(
        _anxietyRatingMeta,
        anxietyRating.isAcceptableOrUnknown(
          data['anxiety_rating']!,
          _anxietyRatingMeta,
        ),
      );
    }
    if (data.containsKey('is_crisis_session')) {
      context.handle(
        _isCrisisSessionMeta,
        isCrisisSession.isAcceptableOrUnknown(
          data['is_crisis_session']!,
          _isCrisisSessionMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  MentalHealthRecord map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return MentalHealthRecord(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      sessionType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}session_type'],
      )!,
      providerName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}provider_name'],
      ),
      providerType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}provider_type'],
      ),
      facility: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}facility'],
      ),
      sessionDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}session_date'],
      )!,
      sessionDuration: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}session_duration'],
      ),
      presentingConcerns: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}presenting_concerns'],
      ),
      moodAssessment: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}mood_assessment'],
      ),
      thoughtProcess: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}thought_process'],
      ),
      riskAssessment: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}risk_assessment'],
      ),
      treatmentGoals: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}treatment_goals'],
      ),
      interventions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}interventions'],
      ),
      homework: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}homework'],
      ),
      medicationDiscussion: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}medication_discussion'],
      ),
      progressNotes: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}progress_notes'],
      ),
      planForNextSession: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}plan_for_next_session'],
      ),
      nextAppointment: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}next_appointment'],
      ),
      moodRating: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}mood_rating'],
      ),
      anxietyRating: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}anxiety_rating'],
      ),
      isCrisisSession: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_crisis_session'],
      )!,
    );
  }

  @override
  $MentalHealthRecordsTable createAlias(String alias) {
    return $MentalHealthRecordsTable(attachedDatabase, alias);
  }
}

class MentalHealthRecord extends DataClass
    implements Insertable<MentalHealthRecord> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String sessionType;
  final String? providerName;
  final String? providerType;
  final String? facility;
  final DateTime sessionDate;
  final int? sessionDuration;
  final String? presentingConcerns;
  final String? moodAssessment;
  final String? thoughtProcess;
  final String? riskAssessment;
  final String? treatmentGoals;
  final String? interventions;
  final String? homework;
  final String? medicationDiscussion;
  final String? progressNotes;
  final String? planForNextSession;
  final DateTime? nextAppointment;
  final int? moodRating;
  final int? anxietyRating;
  final bool isCrisisSession;
  const MentalHealthRecord({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.sessionType,
    this.providerName,
    this.providerType,
    this.facility,
    required this.sessionDate,
    this.sessionDuration,
    this.presentingConcerns,
    this.moodAssessment,
    this.thoughtProcess,
    this.riskAssessment,
    this.treatmentGoals,
    this.interventions,
    this.homework,
    this.medicationDiscussion,
    this.progressNotes,
    this.planForNextSession,
    this.nextAppointment,
    this.moodRating,
    this.anxietyRating,
    required this.isCrisisSession,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['session_type'] = Variable<String>(sessionType);
    if (!nullToAbsent || providerName != null) {
      map['provider_name'] = Variable<String>(providerName);
    }
    if (!nullToAbsent || providerType != null) {
      map['provider_type'] = Variable<String>(providerType);
    }
    if (!nullToAbsent || facility != null) {
      map['facility'] = Variable<String>(facility);
    }
    map['session_date'] = Variable<DateTime>(sessionDate);
    if (!nullToAbsent || sessionDuration != null) {
      map['session_duration'] = Variable<int>(sessionDuration);
    }
    if (!nullToAbsent || presentingConcerns != null) {
      map['presenting_concerns'] = Variable<String>(presentingConcerns);
    }
    if (!nullToAbsent || moodAssessment != null) {
      map['mood_assessment'] = Variable<String>(moodAssessment);
    }
    if (!nullToAbsent || thoughtProcess != null) {
      map['thought_process'] = Variable<String>(thoughtProcess);
    }
    if (!nullToAbsent || riskAssessment != null) {
      map['risk_assessment'] = Variable<String>(riskAssessment);
    }
    if (!nullToAbsent || treatmentGoals != null) {
      map['treatment_goals'] = Variable<String>(treatmentGoals);
    }
    if (!nullToAbsent || interventions != null) {
      map['interventions'] = Variable<String>(interventions);
    }
    if (!nullToAbsent || homework != null) {
      map['homework'] = Variable<String>(homework);
    }
    if (!nullToAbsent || medicationDiscussion != null) {
      map['medication_discussion'] = Variable<String>(medicationDiscussion);
    }
    if (!nullToAbsent || progressNotes != null) {
      map['progress_notes'] = Variable<String>(progressNotes);
    }
    if (!nullToAbsent || planForNextSession != null) {
      map['plan_for_next_session'] = Variable<String>(planForNextSession);
    }
    if (!nullToAbsent || nextAppointment != null) {
      map['next_appointment'] = Variable<DateTime>(nextAppointment);
    }
    if (!nullToAbsent || moodRating != null) {
      map['mood_rating'] = Variable<int>(moodRating);
    }
    if (!nullToAbsent || anxietyRating != null) {
      map['anxiety_rating'] = Variable<int>(anxietyRating);
    }
    map['is_crisis_session'] = Variable<bool>(isCrisisSession);
    return map;
  }

  MentalHealthRecordsCompanion toCompanion(bool nullToAbsent) {
    return MentalHealthRecordsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      sessionType: Value(sessionType),
      providerName: providerName == null && nullToAbsent
          ? const Value.absent()
          : Value(providerName),
      providerType: providerType == null && nullToAbsent
          ? const Value.absent()
          : Value(providerType),
      facility: facility == null && nullToAbsent
          ? const Value.absent()
          : Value(facility),
      sessionDate: Value(sessionDate),
      sessionDuration: sessionDuration == null && nullToAbsent
          ? const Value.absent()
          : Value(sessionDuration),
      presentingConcerns: presentingConcerns == null && nullToAbsent
          ? const Value.absent()
          : Value(presentingConcerns),
      moodAssessment: moodAssessment == null && nullToAbsent
          ? const Value.absent()
          : Value(moodAssessment),
      thoughtProcess: thoughtProcess == null && nullToAbsent
          ? const Value.absent()
          : Value(thoughtProcess),
      riskAssessment: riskAssessment == null && nullToAbsent
          ? const Value.absent()
          : Value(riskAssessment),
      treatmentGoals: treatmentGoals == null && nullToAbsent
          ? const Value.absent()
          : Value(treatmentGoals),
      interventions: interventions == null && nullToAbsent
          ? const Value.absent()
          : Value(interventions),
      homework: homework == null && nullToAbsent
          ? const Value.absent()
          : Value(homework),
      medicationDiscussion: medicationDiscussion == null && nullToAbsent
          ? const Value.absent()
          : Value(medicationDiscussion),
      progressNotes: progressNotes == null && nullToAbsent
          ? const Value.absent()
          : Value(progressNotes),
      planForNextSession: planForNextSession == null && nullToAbsent
          ? const Value.absent()
          : Value(planForNextSession),
      nextAppointment: nextAppointment == null && nullToAbsent
          ? const Value.absent()
          : Value(nextAppointment),
      moodRating: moodRating == null && nullToAbsent
          ? const Value.absent()
          : Value(moodRating),
      anxietyRating: anxietyRating == null && nullToAbsent
          ? const Value.absent()
          : Value(anxietyRating),
      isCrisisSession: Value(isCrisisSession),
    );
  }

  factory MentalHealthRecord.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return MentalHealthRecord(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      sessionType: serializer.fromJson<String>(json['sessionType']),
      providerName: serializer.fromJson<String?>(json['providerName']),
      providerType: serializer.fromJson<String?>(json['providerType']),
      facility: serializer.fromJson<String?>(json['facility']),
      sessionDate: serializer.fromJson<DateTime>(json['sessionDate']),
      sessionDuration: serializer.fromJson<int?>(json['sessionDuration']),
      presentingConcerns: serializer.fromJson<String?>(
        json['presentingConcerns'],
      ),
      moodAssessment: serializer.fromJson<String?>(json['moodAssessment']),
      thoughtProcess: serializer.fromJson<String?>(json['thoughtProcess']),
      riskAssessment: serializer.fromJson<String?>(json['riskAssessment']),
      treatmentGoals: serializer.fromJson<String?>(json['treatmentGoals']),
      interventions: serializer.fromJson<String?>(json['interventions']),
      homework: serializer.fromJson<String?>(json['homework']),
      medicationDiscussion: serializer.fromJson<String?>(
        json['medicationDiscussion'],
      ),
      progressNotes: serializer.fromJson<String?>(json['progressNotes']),
      planForNextSession: serializer.fromJson<String?>(
        json['planForNextSession'],
      ),
      nextAppointment: serializer.fromJson<DateTime?>(json['nextAppointment']),
      moodRating: serializer.fromJson<int?>(json['moodRating']),
      anxietyRating: serializer.fromJson<int?>(json['anxietyRating']),
      isCrisisSession: serializer.fromJson<bool>(json['isCrisisSession']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'sessionType': serializer.toJson<String>(sessionType),
      'providerName': serializer.toJson<String?>(providerName),
      'providerType': serializer.toJson<String?>(providerType),
      'facility': serializer.toJson<String?>(facility),
      'sessionDate': serializer.toJson<DateTime>(sessionDate),
      'sessionDuration': serializer.toJson<int?>(sessionDuration),
      'presentingConcerns': serializer.toJson<String?>(presentingConcerns),
      'moodAssessment': serializer.toJson<String?>(moodAssessment),
      'thoughtProcess': serializer.toJson<String?>(thoughtProcess),
      'riskAssessment': serializer.toJson<String?>(riskAssessment),
      'treatmentGoals': serializer.toJson<String?>(treatmentGoals),
      'interventions': serializer.toJson<String?>(interventions),
      'homework': serializer.toJson<String?>(homework),
      'medicationDiscussion': serializer.toJson<String?>(medicationDiscussion),
      'progressNotes': serializer.toJson<String?>(progressNotes),
      'planForNextSession': serializer.toJson<String?>(planForNextSession),
      'nextAppointment': serializer.toJson<DateTime?>(nextAppointment),
      'moodRating': serializer.toJson<int?>(moodRating),
      'anxietyRating': serializer.toJson<int?>(anxietyRating),
      'isCrisisSession': serializer.toJson<bool>(isCrisisSession),
    };
  }

  MentalHealthRecord copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? sessionType,
    Value<String?> providerName = const Value.absent(),
    Value<String?> providerType = const Value.absent(),
    Value<String?> facility = const Value.absent(),
    DateTime? sessionDate,
    Value<int?> sessionDuration = const Value.absent(),
    Value<String?> presentingConcerns = const Value.absent(),
    Value<String?> moodAssessment = const Value.absent(),
    Value<String?> thoughtProcess = const Value.absent(),
    Value<String?> riskAssessment = const Value.absent(),
    Value<String?> treatmentGoals = const Value.absent(),
    Value<String?> interventions = const Value.absent(),
    Value<String?> homework = const Value.absent(),
    Value<String?> medicationDiscussion = const Value.absent(),
    Value<String?> progressNotes = const Value.absent(),
    Value<String?> planForNextSession = const Value.absent(),
    Value<DateTime?> nextAppointment = const Value.absent(),
    Value<int?> moodRating = const Value.absent(),
    Value<int?> anxietyRating = const Value.absent(),
    bool? isCrisisSession,
  }) => MentalHealthRecord(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    sessionType: sessionType ?? this.sessionType,
    providerName: providerName.present ? providerName.value : this.providerName,
    providerType: providerType.present ? providerType.value : this.providerType,
    facility: facility.present ? facility.value : this.facility,
    sessionDate: sessionDate ?? this.sessionDate,
    sessionDuration: sessionDuration.present
        ? sessionDuration.value
        : this.sessionDuration,
    presentingConcerns: presentingConcerns.present
        ? presentingConcerns.value
        : this.presentingConcerns,
    moodAssessment: moodAssessment.present
        ? moodAssessment.value
        : this.moodAssessment,
    thoughtProcess: thoughtProcess.present
        ? thoughtProcess.value
        : this.thoughtProcess,
    riskAssessment: riskAssessment.present
        ? riskAssessment.value
        : this.riskAssessment,
    treatmentGoals: treatmentGoals.present
        ? treatmentGoals.value
        : this.treatmentGoals,
    interventions: interventions.present
        ? interventions.value
        : this.interventions,
    homework: homework.present ? homework.value : this.homework,
    medicationDiscussion: medicationDiscussion.present
        ? medicationDiscussion.value
        : this.medicationDiscussion,
    progressNotes: progressNotes.present
        ? progressNotes.value
        : this.progressNotes,
    planForNextSession: planForNextSession.present
        ? planForNextSession.value
        : this.planForNextSession,
    nextAppointment: nextAppointment.present
        ? nextAppointment.value
        : this.nextAppointment,
    moodRating: moodRating.present ? moodRating.value : this.moodRating,
    anxietyRating: anxietyRating.present
        ? anxietyRating.value
        : this.anxietyRating,
    isCrisisSession: isCrisisSession ?? this.isCrisisSession,
  );
  MentalHealthRecord copyWithCompanion(MentalHealthRecordsCompanion data) {
    return MentalHealthRecord(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      sessionType: data.sessionType.present
          ? data.sessionType.value
          : this.sessionType,
      providerName: data.providerName.present
          ? data.providerName.value
          : this.providerName,
      providerType: data.providerType.present
          ? data.providerType.value
          : this.providerType,
      facility: data.facility.present ? data.facility.value : this.facility,
      sessionDate: data.sessionDate.present
          ? data.sessionDate.value
          : this.sessionDate,
      sessionDuration: data.sessionDuration.present
          ? data.sessionDuration.value
          : this.sessionDuration,
      presentingConcerns: data.presentingConcerns.present
          ? data.presentingConcerns.value
          : this.presentingConcerns,
      moodAssessment: data.moodAssessment.present
          ? data.moodAssessment.value
          : this.moodAssessment,
      thoughtProcess: data.thoughtProcess.present
          ? data.thoughtProcess.value
          : this.thoughtProcess,
      riskAssessment: data.riskAssessment.present
          ? data.riskAssessment.value
          : this.riskAssessment,
      treatmentGoals: data.treatmentGoals.present
          ? data.treatmentGoals.value
          : this.treatmentGoals,
      interventions: data.interventions.present
          ? data.interventions.value
          : this.interventions,
      homework: data.homework.present ? data.homework.value : this.homework,
      medicationDiscussion: data.medicationDiscussion.present
          ? data.medicationDiscussion.value
          : this.medicationDiscussion,
      progressNotes: data.progressNotes.present
          ? data.progressNotes.value
          : this.progressNotes,
      planForNextSession: data.planForNextSession.present
          ? data.planForNextSession.value
          : this.planForNextSession,
      nextAppointment: data.nextAppointment.present
          ? data.nextAppointment.value
          : this.nextAppointment,
      moodRating: data.moodRating.present
          ? data.moodRating.value
          : this.moodRating,
      anxietyRating: data.anxietyRating.present
          ? data.anxietyRating.value
          : this.anxietyRating,
      isCrisisSession: data.isCrisisSession.present
          ? data.isCrisisSession.value
          : this.isCrisisSession,
    );
  }

  @override
  String toString() {
    return (StringBuffer('MentalHealthRecord(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('sessionType: $sessionType, ')
          ..write('providerName: $providerName, ')
          ..write('providerType: $providerType, ')
          ..write('facility: $facility, ')
          ..write('sessionDate: $sessionDate, ')
          ..write('sessionDuration: $sessionDuration, ')
          ..write('presentingConcerns: $presentingConcerns, ')
          ..write('moodAssessment: $moodAssessment, ')
          ..write('thoughtProcess: $thoughtProcess, ')
          ..write('riskAssessment: $riskAssessment, ')
          ..write('treatmentGoals: $treatmentGoals, ')
          ..write('interventions: $interventions, ')
          ..write('homework: $homework, ')
          ..write('medicationDiscussion: $medicationDiscussion, ')
          ..write('progressNotes: $progressNotes, ')
          ..write('planForNextSession: $planForNextSession, ')
          ..write('nextAppointment: $nextAppointment, ')
          ..write('moodRating: $moodRating, ')
          ..write('anxietyRating: $anxietyRating, ')
          ..write('isCrisisSession: $isCrisisSession')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    sessionType,
    providerName,
    providerType,
    facility,
    sessionDate,
    sessionDuration,
    presentingConcerns,
    moodAssessment,
    thoughtProcess,
    riskAssessment,
    treatmentGoals,
    interventions,
    homework,
    medicationDiscussion,
    progressNotes,
    planForNextSession,
    nextAppointment,
    moodRating,
    anxietyRating,
    isCrisisSession,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is MentalHealthRecord &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.sessionType == this.sessionType &&
          other.providerName == this.providerName &&
          other.providerType == this.providerType &&
          other.facility == this.facility &&
          other.sessionDate == this.sessionDate &&
          other.sessionDuration == this.sessionDuration &&
          other.presentingConcerns == this.presentingConcerns &&
          other.moodAssessment == this.moodAssessment &&
          other.thoughtProcess == this.thoughtProcess &&
          other.riskAssessment == this.riskAssessment &&
          other.treatmentGoals == this.treatmentGoals &&
          other.interventions == this.interventions &&
          other.homework == this.homework &&
          other.medicationDiscussion == this.medicationDiscussion &&
          other.progressNotes == this.progressNotes &&
          other.planForNextSession == this.planForNextSession &&
          other.nextAppointment == this.nextAppointment &&
          other.moodRating == this.moodRating &&
          other.anxietyRating == this.anxietyRating &&
          other.isCrisisSession == this.isCrisisSession);
}

class MentalHealthRecordsCompanion extends UpdateCompanion<MentalHealthRecord> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> sessionType;
  final Value<String?> providerName;
  final Value<String?> providerType;
  final Value<String?> facility;
  final Value<DateTime> sessionDate;
  final Value<int?> sessionDuration;
  final Value<String?> presentingConcerns;
  final Value<String?> moodAssessment;
  final Value<String?> thoughtProcess;
  final Value<String?> riskAssessment;
  final Value<String?> treatmentGoals;
  final Value<String?> interventions;
  final Value<String?> homework;
  final Value<String?> medicationDiscussion;
  final Value<String?> progressNotes;
  final Value<String?> planForNextSession;
  final Value<DateTime?> nextAppointment;
  final Value<int?> moodRating;
  final Value<int?> anxietyRating;
  final Value<bool> isCrisisSession;
  final Value<int> rowid;
  const MentalHealthRecordsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.sessionType = const Value.absent(),
    this.providerName = const Value.absent(),
    this.providerType = const Value.absent(),
    this.facility = const Value.absent(),
    this.sessionDate = const Value.absent(),
    this.sessionDuration = const Value.absent(),
    this.presentingConcerns = const Value.absent(),
    this.moodAssessment = const Value.absent(),
    this.thoughtProcess = const Value.absent(),
    this.riskAssessment = const Value.absent(),
    this.treatmentGoals = const Value.absent(),
    this.interventions = const Value.absent(),
    this.homework = const Value.absent(),
    this.medicationDiscussion = const Value.absent(),
    this.progressNotes = const Value.absent(),
    this.planForNextSession = const Value.absent(),
    this.nextAppointment = const Value.absent(),
    this.moodRating = const Value.absent(),
    this.anxietyRating = const Value.absent(),
    this.isCrisisSession = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  MentalHealthRecordsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String sessionType,
    this.providerName = const Value.absent(),
    this.providerType = const Value.absent(),
    this.facility = const Value.absent(),
    required DateTime sessionDate,
    this.sessionDuration = const Value.absent(),
    this.presentingConcerns = const Value.absent(),
    this.moodAssessment = const Value.absent(),
    this.thoughtProcess = const Value.absent(),
    this.riskAssessment = const Value.absent(),
    this.treatmentGoals = const Value.absent(),
    this.interventions = const Value.absent(),
    this.homework = const Value.absent(),
    this.medicationDiscussion = const Value.absent(),
    this.progressNotes = const Value.absent(),
    this.planForNextSession = const Value.absent(),
    this.nextAppointment = const Value.absent(),
    this.moodRating = const Value.absent(),
    this.anxietyRating = const Value.absent(),
    this.isCrisisSession = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       sessionType = Value(sessionType),
       sessionDate = Value(sessionDate);
  static Insertable<MentalHealthRecord> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? sessionType,
    Expression<String>? providerName,
    Expression<String>? providerType,
    Expression<String>? facility,
    Expression<DateTime>? sessionDate,
    Expression<int>? sessionDuration,
    Expression<String>? presentingConcerns,
    Expression<String>? moodAssessment,
    Expression<String>? thoughtProcess,
    Expression<String>? riskAssessment,
    Expression<String>? treatmentGoals,
    Expression<String>? interventions,
    Expression<String>? homework,
    Expression<String>? medicationDiscussion,
    Expression<String>? progressNotes,
    Expression<String>? planForNextSession,
    Expression<DateTime>? nextAppointment,
    Expression<int>? moodRating,
    Expression<int>? anxietyRating,
    Expression<bool>? isCrisisSession,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (sessionType != null) 'session_type': sessionType,
      if (providerName != null) 'provider_name': providerName,
      if (providerType != null) 'provider_type': providerType,
      if (facility != null) 'facility': facility,
      if (sessionDate != null) 'session_date': sessionDate,
      if (sessionDuration != null) 'session_duration': sessionDuration,
      if (presentingConcerns != null) 'presenting_concerns': presentingConcerns,
      if (moodAssessment != null) 'mood_assessment': moodAssessment,
      if (thoughtProcess != null) 'thought_process': thoughtProcess,
      if (riskAssessment != null) 'risk_assessment': riskAssessment,
      if (treatmentGoals != null) 'treatment_goals': treatmentGoals,
      if (interventions != null) 'interventions': interventions,
      if (homework != null) 'homework': homework,
      if (medicationDiscussion != null)
        'medication_discussion': medicationDiscussion,
      if (progressNotes != null) 'progress_notes': progressNotes,
      if (planForNextSession != null)
        'plan_for_next_session': planForNextSession,
      if (nextAppointment != null) 'next_appointment': nextAppointment,
      if (moodRating != null) 'mood_rating': moodRating,
      if (anxietyRating != null) 'anxiety_rating': anxietyRating,
      if (isCrisisSession != null) 'is_crisis_session': isCrisisSession,
      if (rowid != null) 'rowid': rowid,
    });
  }

  MentalHealthRecordsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? sessionType,
    Value<String?>? providerName,
    Value<String?>? providerType,
    Value<String?>? facility,
    Value<DateTime>? sessionDate,
    Value<int?>? sessionDuration,
    Value<String?>? presentingConcerns,
    Value<String?>? moodAssessment,
    Value<String?>? thoughtProcess,
    Value<String?>? riskAssessment,
    Value<String?>? treatmentGoals,
    Value<String?>? interventions,
    Value<String?>? homework,
    Value<String?>? medicationDiscussion,
    Value<String?>? progressNotes,
    Value<String?>? planForNextSession,
    Value<DateTime?>? nextAppointment,
    Value<int?>? moodRating,
    Value<int?>? anxietyRating,
    Value<bool>? isCrisisSession,
    Value<int>? rowid,
  }) {
    return MentalHealthRecordsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      sessionType: sessionType ?? this.sessionType,
      providerName: providerName ?? this.providerName,
      providerType: providerType ?? this.providerType,
      facility: facility ?? this.facility,
      sessionDate: sessionDate ?? this.sessionDate,
      sessionDuration: sessionDuration ?? this.sessionDuration,
      presentingConcerns: presentingConcerns ?? this.presentingConcerns,
      moodAssessment: moodAssessment ?? this.moodAssessment,
      thoughtProcess: thoughtProcess ?? this.thoughtProcess,
      riskAssessment: riskAssessment ?? this.riskAssessment,
      treatmentGoals: treatmentGoals ?? this.treatmentGoals,
      interventions: interventions ?? this.interventions,
      homework: homework ?? this.homework,
      medicationDiscussion: medicationDiscussion ?? this.medicationDiscussion,
      progressNotes: progressNotes ?? this.progressNotes,
      planForNextSession: planForNextSession ?? this.planForNextSession,
      nextAppointment: nextAppointment ?? this.nextAppointment,
      moodRating: moodRating ?? this.moodRating,
      anxietyRating: anxietyRating ?? this.anxietyRating,
      isCrisisSession: isCrisisSession ?? this.isCrisisSession,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (sessionType.present) {
      map['session_type'] = Variable<String>(sessionType.value);
    }
    if (providerName.present) {
      map['provider_name'] = Variable<String>(providerName.value);
    }
    if (providerType.present) {
      map['provider_type'] = Variable<String>(providerType.value);
    }
    if (facility.present) {
      map['facility'] = Variable<String>(facility.value);
    }
    if (sessionDate.present) {
      map['session_date'] = Variable<DateTime>(sessionDate.value);
    }
    if (sessionDuration.present) {
      map['session_duration'] = Variable<int>(sessionDuration.value);
    }
    if (presentingConcerns.present) {
      map['presenting_concerns'] = Variable<String>(presentingConcerns.value);
    }
    if (moodAssessment.present) {
      map['mood_assessment'] = Variable<String>(moodAssessment.value);
    }
    if (thoughtProcess.present) {
      map['thought_process'] = Variable<String>(thoughtProcess.value);
    }
    if (riskAssessment.present) {
      map['risk_assessment'] = Variable<String>(riskAssessment.value);
    }
    if (treatmentGoals.present) {
      map['treatment_goals'] = Variable<String>(treatmentGoals.value);
    }
    if (interventions.present) {
      map['interventions'] = Variable<String>(interventions.value);
    }
    if (homework.present) {
      map['homework'] = Variable<String>(homework.value);
    }
    if (medicationDiscussion.present) {
      map['medication_discussion'] = Variable<String>(
        medicationDiscussion.value,
      );
    }
    if (progressNotes.present) {
      map['progress_notes'] = Variable<String>(progressNotes.value);
    }
    if (planForNextSession.present) {
      map['plan_for_next_session'] = Variable<String>(planForNextSession.value);
    }
    if (nextAppointment.present) {
      map['next_appointment'] = Variable<DateTime>(nextAppointment.value);
    }
    if (moodRating.present) {
      map['mood_rating'] = Variable<int>(moodRating.value);
    }
    if (anxietyRating.present) {
      map['anxiety_rating'] = Variable<int>(anxietyRating.value);
    }
    if (isCrisisSession.present) {
      map['is_crisis_session'] = Variable<bool>(isCrisisSession.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MentalHealthRecordsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('sessionType: $sessionType, ')
          ..write('providerName: $providerName, ')
          ..write('providerType: $providerType, ')
          ..write('facility: $facility, ')
          ..write('sessionDate: $sessionDate, ')
          ..write('sessionDuration: $sessionDuration, ')
          ..write('presentingConcerns: $presentingConcerns, ')
          ..write('moodAssessment: $moodAssessment, ')
          ..write('thoughtProcess: $thoughtProcess, ')
          ..write('riskAssessment: $riskAssessment, ')
          ..write('treatmentGoals: $treatmentGoals, ')
          ..write('interventions: $interventions, ')
          ..write('homework: $homework, ')
          ..write('medicationDiscussion: $medicationDiscussion, ')
          ..write('progressNotes: $progressNotes, ')
          ..write('planForNextSession: $planForNextSession, ')
          ..write('nextAppointment: $nextAppointment, ')
          ..write('moodRating: $moodRating, ')
          ..write('anxietyRating: $anxietyRating, ')
          ..write('isCrisisSession: $isCrisisSession, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $GeneralRecordsTable extends GeneralRecords
    with TableInfo<$GeneralRecordsTable, GeneralRecord> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $GeneralRecordsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordTypeMeta = const VerificationMeta(
    'recordType',
  );
  @override
  late final GeneratedColumn<String> recordType = GeneratedColumn<String>(
    'record_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    defaultValue: const Constant('general_record'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _recordDateMeta = const VerificationMeta(
    'recordDate',
  );
  @override
  late final GeneratedColumn<DateTime> recordDate = GeneratedColumn<DateTime>(
    'record_date',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _categoryMeta = const VerificationMeta(
    'category',
  );
  @override
  late final GeneratedColumn<String> category = GeneratedColumn<String>(
    'category',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _subcategoryMeta = const VerificationMeta(
    'subcategory',
  );
  @override
  late final GeneratedColumn<String> subcategory = GeneratedColumn<String>(
    'subcategory',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _providerNameMeta = const VerificationMeta(
    'providerName',
  );
  @override
  late final GeneratedColumn<String> providerName = GeneratedColumn<String>(
    'provider_name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _institutionMeta = const VerificationMeta(
    'institution',
  );
  @override
  late final GeneratedColumn<String> institution = GeneratedColumn<String>(
    'institution',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _documentDateMeta = const VerificationMeta(
    'documentDate',
  );
  @override
  late final GeneratedColumn<DateTime> documentDate = GeneratedColumn<DateTime>(
    'document_date',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _documentTypeMeta = const VerificationMeta(
    'documentType',
  );
  @override
  late final GeneratedColumn<String> documentType = GeneratedColumn<String>(
    'document_type',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _referenceNumberMeta = const VerificationMeta(
    'referenceNumber',
  );
  @override
  late final GeneratedColumn<String> referenceNumber = GeneratedColumn<String>(
    'reference_number',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _relatedConditionMeta = const VerificationMeta(
    'relatedCondition',
  );
  @override
  late final GeneratedColumn<String> relatedCondition = GeneratedColumn<String>(
    'related_condition',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _notesMeta = const VerificationMeta('notes');
  @override
  late final GeneratedColumn<String> notes = GeneratedColumn<String>(
    'notes',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _followUpRequiredMeta = const VerificationMeta(
    'followUpRequired',
  );
  @override
  late final GeneratedColumn<String> followUpRequired = GeneratedColumn<String>(
    'follow_up_required',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _expirationDateMeta = const VerificationMeta(
    'expirationDate',
  );
  @override
  late final GeneratedColumn<DateTime> expirationDate =
      GeneratedColumn<DateTime>(
        'expiration_date',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _reminderDateMeta = const VerificationMeta(
    'reminderDate',
  );
  @override
  late final GeneratedColumn<DateTime> reminderDate = GeneratedColumn<DateTime>(
    'reminder_date',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tagsMeta = const VerificationMeta('tags');
  @override
  late final GeneratedColumn<String> tags = GeneratedColumn<String>(
    'tags',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _isConfidentialMeta = const VerificationMeta(
    'isConfidential',
  );
  @override
  late final GeneratedColumn<bool> isConfidential = GeneratedColumn<bool>(
    'is_confidential',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_confidential" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  static const VerificationMeta _requiresActionMeta = const VerificationMeta(
    'requiresAction',
  );
  @override
  late final GeneratedColumn<bool> requiresAction = GeneratedColumn<bool>(
    'requires_action',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("requires_action" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    category,
    subcategory,
    providerName,
    institution,
    documentDate,
    documentType,
    referenceNumber,
    relatedCondition,
    notes,
    followUpRequired,
    expirationDate,
    reminderDate,
    tags,
    isConfidential,
    requiresAction,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'general_records';
  @override
  VerificationContext validateIntegrity(
    Insertable<GeneralRecord> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('record_type')) {
      context.handle(
        _recordTypeMeta,
        recordType.isAcceptableOrUnknown(data['record_type']!, _recordTypeMeta),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('record_date')) {
      context.handle(
        _recordDateMeta,
        recordDate.isAcceptableOrUnknown(data['record_date']!, _recordDateMeta),
      );
    } else if (isInserting) {
      context.missing(_recordDateMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('category')) {
      context.handle(
        _categoryMeta,
        category.isAcceptableOrUnknown(data['category']!, _categoryMeta),
      );
    } else if (isInserting) {
      context.missing(_categoryMeta);
    }
    if (data.containsKey('subcategory')) {
      context.handle(
        _subcategoryMeta,
        subcategory.isAcceptableOrUnknown(
          data['subcategory']!,
          _subcategoryMeta,
        ),
      );
    }
    if (data.containsKey('provider_name')) {
      context.handle(
        _providerNameMeta,
        providerName.isAcceptableOrUnknown(
          data['provider_name']!,
          _providerNameMeta,
        ),
      );
    }
    if (data.containsKey('institution')) {
      context.handle(
        _institutionMeta,
        institution.isAcceptableOrUnknown(
          data['institution']!,
          _institutionMeta,
        ),
      );
    }
    if (data.containsKey('document_date')) {
      context.handle(
        _documentDateMeta,
        documentDate.isAcceptableOrUnknown(
          data['document_date']!,
          _documentDateMeta,
        ),
      );
    }
    if (data.containsKey('document_type')) {
      context.handle(
        _documentTypeMeta,
        documentType.isAcceptableOrUnknown(
          data['document_type']!,
          _documentTypeMeta,
        ),
      );
    }
    if (data.containsKey('reference_number')) {
      context.handle(
        _referenceNumberMeta,
        referenceNumber.isAcceptableOrUnknown(
          data['reference_number']!,
          _referenceNumberMeta,
        ),
      );
    }
    if (data.containsKey('related_condition')) {
      context.handle(
        _relatedConditionMeta,
        relatedCondition.isAcceptableOrUnknown(
          data['related_condition']!,
          _relatedConditionMeta,
        ),
      );
    }
    if (data.containsKey('notes')) {
      context.handle(
        _notesMeta,
        notes.isAcceptableOrUnknown(data['notes']!, _notesMeta),
      );
    }
    if (data.containsKey('follow_up_required')) {
      context.handle(
        _followUpRequiredMeta,
        followUpRequired.isAcceptableOrUnknown(
          data['follow_up_required']!,
          _followUpRequiredMeta,
        ),
      );
    }
    if (data.containsKey('expiration_date')) {
      context.handle(
        _expirationDateMeta,
        expirationDate.isAcceptableOrUnknown(
          data['expiration_date']!,
          _expirationDateMeta,
        ),
      );
    }
    if (data.containsKey('reminder_date')) {
      context.handle(
        _reminderDateMeta,
        reminderDate.isAcceptableOrUnknown(
          data['reminder_date']!,
          _reminderDateMeta,
        ),
      );
    }
    if (data.containsKey('tags')) {
      context.handle(
        _tagsMeta,
        tags.isAcceptableOrUnknown(data['tags']!, _tagsMeta),
      );
    }
    if (data.containsKey('is_confidential')) {
      context.handle(
        _isConfidentialMeta,
        isConfidential.isAcceptableOrUnknown(
          data['is_confidential']!,
          _isConfidentialMeta,
        ),
      );
    }
    if (data.containsKey('requires_action')) {
      context.handle(
        _requiresActionMeta,
        requiresAction.isAcceptableOrUnknown(
          data['requires_action']!,
          _requiresActionMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  GeneralRecord map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return GeneralRecord(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      recordType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      recordDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}record_date'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      category: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}category'],
      )!,
      subcategory: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}subcategory'],
      ),
      providerName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}provider_name'],
      ),
      institution: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}institution'],
      ),
      documentDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}document_date'],
      ),
      documentType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}document_type'],
      ),
      referenceNumber: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}reference_number'],
      ),
      relatedCondition: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}related_condition'],
      ),
      notes: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}notes'],
      ),
      followUpRequired: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}follow_up_required'],
      ),
      expirationDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}expiration_date'],
      ),
      reminderDate: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}reminder_date'],
      ),
      tags: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tags'],
      ),
      isConfidential: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_confidential'],
      )!,
      requiresAction: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}requires_action'],
      )!,
    );
  }

  @override
  $GeneralRecordsTable createAlias(String alias) {
    return $GeneralRecordsTable(attachedDatabase, alias);
  }
}

class GeneralRecord extends DataClass implements Insertable<GeneralRecord> {
  final String id;
  final String profileId;
  final String recordType;
  final String title;
  final String? description;
  final DateTime recordDate;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final String category;
  final String? subcategory;
  final String? providerName;
  final String? institution;
  final DateTime? documentDate;
  final String? documentType;
  final String? referenceNumber;
  final String? relatedCondition;
  final String? notes;
  final String? followUpRequired;
  final DateTime? expirationDate;
  final DateTime? reminderDate;
  final String? tags;
  final bool isConfidential;
  final bool requiresAction;
  const GeneralRecord({
    required this.id,
    required this.profileId,
    required this.recordType,
    required this.title,
    this.description,
    required this.recordDate,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.category,
    this.subcategory,
    this.providerName,
    this.institution,
    this.documentDate,
    this.documentType,
    this.referenceNumber,
    this.relatedCondition,
    this.notes,
    this.followUpRequired,
    this.expirationDate,
    this.reminderDate,
    this.tags,
    required this.isConfidential,
    required this.requiresAction,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['record_type'] = Variable<String>(recordType);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['record_date'] = Variable<DateTime>(recordDate);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['category'] = Variable<String>(category);
    if (!nullToAbsent || subcategory != null) {
      map['subcategory'] = Variable<String>(subcategory);
    }
    if (!nullToAbsent || providerName != null) {
      map['provider_name'] = Variable<String>(providerName);
    }
    if (!nullToAbsent || institution != null) {
      map['institution'] = Variable<String>(institution);
    }
    if (!nullToAbsent || documentDate != null) {
      map['document_date'] = Variable<DateTime>(documentDate);
    }
    if (!nullToAbsent || documentType != null) {
      map['document_type'] = Variable<String>(documentType);
    }
    if (!nullToAbsent || referenceNumber != null) {
      map['reference_number'] = Variable<String>(referenceNumber);
    }
    if (!nullToAbsent || relatedCondition != null) {
      map['related_condition'] = Variable<String>(relatedCondition);
    }
    if (!nullToAbsent || notes != null) {
      map['notes'] = Variable<String>(notes);
    }
    if (!nullToAbsent || followUpRequired != null) {
      map['follow_up_required'] = Variable<String>(followUpRequired);
    }
    if (!nullToAbsent || expirationDate != null) {
      map['expiration_date'] = Variable<DateTime>(expirationDate);
    }
    if (!nullToAbsent || reminderDate != null) {
      map['reminder_date'] = Variable<DateTime>(reminderDate);
    }
    if (!nullToAbsent || tags != null) {
      map['tags'] = Variable<String>(tags);
    }
    map['is_confidential'] = Variable<bool>(isConfidential);
    map['requires_action'] = Variable<bool>(requiresAction);
    return map;
  }

  GeneralRecordsCompanion toCompanion(bool nullToAbsent) {
    return GeneralRecordsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      recordType: Value(recordType),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      recordDate: Value(recordDate),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      category: Value(category),
      subcategory: subcategory == null && nullToAbsent
          ? const Value.absent()
          : Value(subcategory),
      providerName: providerName == null && nullToAbsent
          ? const Value.absent()
          : Value(providerName),
      institution: institution == null && nullToAbsent
          ? const Value.absent()
          : Value(institution),
      documentDate: documentDate == null && nullToAbsent
          ? const Value.absent()
          : Value(documentDate),
      documentType: documentType == null && nullToAbsent
          ? const Value.absent()
          : Value(documentType),
      referenceNumber: referenceNumber == null && nullToAbsent
          ? const Value.absent()
          : Value(referenceNumber),
      relatedCondition: relatedCondition == null && nullToAbsent
          ? const Value.absent()
          : Value(relatedCondition),
      notes: notes == null && nullToAbsent
          ? const Value.absent()
          : Value(notes),
      followUpRequired: followUpRequired == null && nullToAbsent
          ? const Value.absent()
          : Value(followUpRequired),
      expirationDate: expirationDate == null && nullToAbsent
          ? const Value.absent()
          : Value(expirationDate),
      reminderDate: reminderDate == null && nullToAbsent
          ? const Value.absent()
          : Value(reminderDate),
      tags: tags == null && nullToAbsent ? const Value.absent() : Value(tags),
      isConfidential: Value(isConfidential),
      requiresAction: Value(requiresAction),
    );
  }

  factory GeneralRecord.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return GeneralRecord(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      recordType: serializer.fromJson<String>(json['recordType']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      recordDate: serializer.fromJson<DateTime>(json['recordDate']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      category: serializer.fromJson<String>(json['category']),
      subcategory: serializer.fromJson<String?>(json['subcategory']),
      providerName: serializer.fromJson<String?>(json['providerName']),
      institution: serializer.fromJson<String?>(json['institution']),
      documentDate: serializer.fromJson<DateTime?>(json['documentDate']),
      documentType: serializer.fromJson<String?>(json['documentType']),
      referenceNumber: serializer.fromJson<String?>(json['referenceNumber']),
      relatedCondition: serializer.fromJson<String?>(json['relatedCondition']),
      notes: serializer.fromJson<String?>(json['notes']),
      followUpRequired: serializer.fromJson<String?>(json['followUpRequired']),
      expirationDate: serializer.fromJson<DateTime?>(json['expirationDate']),
      reminderDate: serializer.fromJson<DateTime?>(json['reminderDate']),
      tags: serializer.fromJson<String?>(json['tags']),
      isConfidential: serializer.fromJson<bool>(json['isConfidential']),
      requiresAction: serializer.fromJson<bool>(json['requiresAction']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'recordType': serializer.toJson<String>(recordType),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'recordDate': serializer.toJson<DateTime>(recordDate),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'category': serializer.toJson<String>(category),
      'subcategory': serializer.toJson<String?>(subcategory),
      'providerName': serializer.toJson<String?>(providerName),
      'institution': serializer.toJson<String?>(institution),
      'documentDate': serializer.toJson<DateTime?>(documentDate),
      'documentType': serializer.toJson<String?>(documentType),
      'referenceNumber': serializer.toJson<String?>(referenceNumber),
      'relatedCondition': serializer.toJson<String?>(relatedCondition),
      'notes': serializer.toJson<String?>(notes),
      'followUpRequired': serializer.toJson<String?>(followUpRequired),
      'expirationDate': serializer.toJson<DateTime?>(expirationDate),
      'reminderDate': serializer.toJson<DateTime?>(reminderDate),
      'tags': serializer.toJson<String?>(tags),
      'isConfidential': serializer.toJson<bool>(isConfidential),
      'requiresAction': serializer.toJson<bool>(requiresAction),
    };
  }

  GeneralRecord copyWith({
    String? id,
    String? profileId,
    String? recordType,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? recordDate,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    String? category,
    Value<String?> subcategory = const Value.absent(),
    Value<String?> providerName = const Value.absent(),
    Value<String?> institution = const Value.absent(),
    Value<DateTime?> documentDate = const Value.absent(),
    Value<String?> documentType = const Value.absent(),
    Value<String?> referenceNumber = const Value.absent(),
    Value<String?> relatedCondition = const Value.absent(),
    Value<String?> notes = const Value.absent(),
    Value<String?> followUpRequired = const Value.absent(),
    Value<DateTime?> expirationDate = const Value.absent(),
    Value<DateTime?> reminderDate = const Value.absent(),
    Value<String?> tags = const Value.absent(),
    bool? isConfidential,
    bool? requiresAction,
  }) => GeneralRecord(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    recordType: recordType ?? this.recordType,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    recordDate: recordDate ?? this.recordDate,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    category: category ?? this.category,
    subcategory: subcategory.present ? subcategory.value : this.subcategory,
    providerName: providerName.present ? providerName.value : this.providerName,
    institution: institution.present ? institution.value : this.institution,
    documentDate: documentDate.present ? documentDate.value : this.documentDate,
    documentType: documentType.present ? documentType.value : this.documentType,
    referenceNumber: referenceNumber.present
        ? referenceNumber.value
        : this.referenceNumber,
    relatedCondition: relatedCondition.present
        ? relatedCondition.value
        : this.relatedCondition,
    notes: notes.present ? notes.value : this.notes,
    followUpRequired: followUpRequired.present
        ? followUpRequired.value
        : this.followUpRequired,
    expirationDate: expirationDate.present
        ? expirationDate.value
        : this.expirationDate,
    reminderDate: reminderDate.present ? reminderDate.value : this.reminderDate,
    tags: tags.present ? tags.value : this.tags,
    isConfidential: isConfidential ?? this.isConfidential,
    requiresAction: requiresAction ?? this.requiresAction,
  );
  GeneralRecord copyWithCompanion(GeneralRecordsCompanion data) {
    return GeneralRecord(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      recordType: data.recordType.present
          ? data.recordType.value
          : this.recordType,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      recordDate: data.recordDate.present
          ? data.recordDate.value
          : this.recordDate,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      category: data.category.present ? data.category.value : this.category,
      subcategory: data.subcategory.present
          ? data.subcategory.value
          : this.subcategory,
      providerName: data.providerName.present
          ? data.providerName.value
          : this.providerName,
      institution: data.institution.present
          ? data.institution.value
          : this.institution,
      documentDate: data.documentDate.present
          ? data.documentDate.value
          : this.documentDate,
      documentType: data.documentType.present
          ? data.documentType.value
          : this.documentType,
      referenceNumber: data.referenceNumber.present
          ? data.referenceNumber.value
          : this.referenceNumber,
      relatedCondition: data.relatedCondition.present
          ? data.relatedCondition.value
          : this.relatedCondition,
      notes: data.notes.present ? data.notes.value : this.notes,
      followUpRequired: data.followUpRequired.present
          ? data.followUpRequired.value
          : this.followUpRequired,
      expirationDate: data.expirationDate.present
          ? data.expirationDate.value
          : this.expirationDate,
      reminderDate: data.reminderDate.present
          ? data.reminderDate.value
          : this.reminderDate,
      tags: data.tags.present ? data.tags.value : this.tags,
      isConfidential: data.isConfidential.present
          ? data.isConfidential.value
          : this.isConfidential,
      requiresAction: data.requiresAction.present
          ? data.requiresAction.value
          : this.requiresAction,
    );
  }

  @override
  String toString() {
    return (StringBuffer('GeneralRecord(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('category: $category, ')
          ..write('subcategory: $subcategory, ')
          ..write('providerName: $providerName, ')
          ..write('institution: $institution, ')
          ..write('documentDate: $documentDate, ')
          ..write('documentType: $documentType, ')
          ..write('referenceNumber: $referenceNumber, ')
          ..write('relatedCondition: $relatedCondition, ')
          ..write('notes: $notes, ')
          ..write('followUpRequired: $followUpRequired, ')
          ..write('expirationDate: $expirationDate, ')
          ..write('reminderDate: $reminderDate, ')
          ..write('tags: $tags, ')
          ..write('isConfidential: $isConfidential, ')
          ..write('requiresAction: $requiresAction')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    profileId,
    recordType,
    title,
    description,
    recordDate,
    createdAt,
    updatedAt,
    isActive,
    category,
    subcategory,
    providerName,
    institution,
    documentDate,
    documentType,
    referenceNumber,
    relatedCondition,
    notes,
    followUpRequired,
    expirationDate,
    reminderDate,
    tags,
    isConfidential,
    requiresAction,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is GeneralRecord &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.recordType == this.recordType &&
          other.title == this.title &&
          other.description == this.description &&
          other.recordDate == this.recordDate &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.category == this.category &&
          other.subcategory == this.subcategory &&
          other.providerName == this.providerName &&
          other.institution == this.institution &&
          other.documentDate == this.documentDate &&
          other.documentType == this.documentType &&
          other.referenceNumber == this.referenceNumber &&
          other.relatedCondition == this.relatedCondition &&
          other.notes == this.notes &&
          other.followUpRequired == this.followUpRequired &&
          other.expirationDate == this.expirationDate &&
          other.reminderDate == this.reminderDate &&
          other.tags == this.tags &&
          other.isConfidential == this.isConfidential &&
          other.requiresAction == this.requiresAction);
}

class GeneralRecordsCompanion extends UpdateCompanion<GeneralRecord> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> recordType;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> recordDate;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<String> category;
  final Value<String?> subcategory;
  final Value<String?> providerName;
  final Value<String?> institution;
  final Value<DateTime?> documentDate;
  final Value<String?> documentType;
  final Value<String?> referenceNumber;
  final Value<String?> relatedCondition;
  final Value<String?> notes;
  final Value<String?> followUpRequired;
  final Value<DateTime?> expirationDate;
  final Value<DateTime?> reminderDate;
  final Value<String?> tags;
  final Value<bool> isConfidential;
  final Value<bool> requiresAction;
  final Value<int> rowid;
  const GeneralRecordsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.recordType = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.recordDate = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.category = const Value.absent(),
    this.subcategory = const Value.absent(),
    this.providerName = const Value.absent(),
    this.institution = const Value.absent(),
    this.documentDate = const Value.absent(),
    this.documentType = const Value.absent(),
    this.referenceNumber = const Value.absent(),
    this.relatedCondition = const Value.absent(),
    this.notes = const Value.absent(),
    this.followUpRequired = const Value.absent(),
    this.expirationDate = const Value.absent(),
    this.reminderDate = const Value.absent(),
    this.tags = const Value.absent(),
    this.isConfidential = const Value.absent(),
    this.requiresAction = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  GeneralRecordsCompanion.insert({
    required String id,
    required String profileId,
    this.recordType = const Value.absent(),
    required String title,
    this.description = const Value.absent(),
    required DateTime recordDate,
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    required String category,
    this.subcategory = const Value.absent(),
    this.providerName = const Value.absent(),
    this.institution = const Value.absent(),
    this.documentDate = const Value.absent(),
    this.documentType = const Value.absent(),
    this.referenceNumber = const Value.absent(),
    this.relatedCondition = const Value.absent(),
    this.notes = const Value.absent(),
    this.followUpRequired = const Value.absent(),
    this.expirationDate = const Value.absent(),
    this.reminderDate = const Value.absent(),
    this.tags = const Value.absent(),
    this.isConfidential = const Value.absent(),
    this.requiresAction = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       title = Value(title),
       recordDate = Value(recordDate),
       category = Value(category);
  static Insertable<GeneralRecord> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? recordType,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? recordDate,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<String>? category,
    Expression<String>? subcategory,
    Expression<String>? providerName,
    Expression<String>? institution,
    Expression<DateTime>? documentDate,
    Expression<String>? documentType,
    Expression<String>? referenceNumber,
    Expression<String>? relatedCondition,
    Expression<String>? notes,
    Expression<String>? followUpRequired,
    Expression<DateTime>? expirationDate,
    Expression<DateTime>? reminderDate,
    Expression<String>? tags,
    Expression<bool>? isConfidential,
    Expression<bool>? requiresAction,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (recordType != null) 'record_type': recordType,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (recordDate != null) 'record_date': recordDate,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (category != null) 'category': category,
      if (subcategory != null) 'subcategory': subcategory,
      if (providerName != null) 'provider_name': providerName,
      if (institution != null) 'institution': institution,
      if (documentDate != null) 'document_date': documentDate,
      if (documentType != null) 'document_type': documentType,
      if (referenceNumber != null) 'reference_number': referenceNumber,
      if (relatedCondition != null) 'related_condition': relatedCondition,
      if (notes != null) 'notes': notes,
      if (followUpRequired != null) 'follow_up_required': followUpRequired,
      if (expirationDate != null) 'expiration_date': expirationDate,
      if (reminderDate != null) 'reminder_date': reminderDate,
      if (tags != null) 'tags': tags,
      if (isConfidential != null) 'is_confidential': isConfidential,
      if (requiresAction != null) 'requires_action': requiresAction,
      if (rowid != null) 'rowid': rowid,
    });
  }

  GeneralRecordsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? recordType,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? recordDate,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<String>? category,
    Value<String?>? subcategory,
    Value<String?>? providerName,
    Value<String?>? institution,
    Value<DateTime?>? documentDate,
    Value<String?>? documentType,
    Value<String?>? referenceNumber,
    Value<String?>? relatedCondition,
    Value<String?>? notes,
    Value<String?>? followUpRequired,
    Value<DateTime?>? expirationDate,
    Value<DateTime?>? reminderDate,
    Value<String?>? tags,
    Value<bool>? isConfidential,
    Value<bool>? requiresAction,
    Value<int>? rowid,
  }) {
    return GeneralRecordsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      recordType: recordType ?? this.recordType,
      title: title ?? this.title,
      description: description ?? this.description,
      recordDate: recordDate ?? this.recordDate,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      category: category ?? this.category,
      subcategory: subcategory ?? this.subcategory,
      providerName: providerName ?? this.providerName,
      institution: institution ?? this.institution,
      documentDate: documentDate ?? this.documentDate,
      documentType: documentType ?? this.documentType,
      referenceNumber: referenceNumber ?? this.referenceNumber,
      relatedCondition: relatedCondition ?? this.relatedCondition,
      notes: notes ?? this.notes,
      followUpRequired: followUpRequired ?? this.followUpRequired,
      expirationDate: expirationDate ?? this.expirationDate,
      reminderDate: reminderDate ?? this.reminderDate,
      tags: tags ?? this.tags,
      isConfidential: isConfidential ?? this.isConfidential,
      requiresAction: requiresAction ?? this.requiresAction,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (recordType.present) {
      map['record_type'] = Variable<String>(recordType.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (recordDate.present) {
      map['record_date'] = Variable<DateTime>(recordDate.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (category.present) {
      map['category'] = Variable<String>(category.value);
    }
    if (subcategory.present) {
      map['subcategory'] = Variable<String>(subcategory.value);
    }
    if (providerName.present) {
      map['provider_name'] = Variable<String>(providerName.value);
    }
    if (institution.present) {
      map['institution'] = Variable<String>(institution.value);
    }
    if (documentDate.present) {
      map['document_date'] = Variable<DateTime>(documentDate.value);
    }
    if (documentType.present) {
      map['document_type'] = Variable<String>(documentType.value);
    }
    if (referenceNumber.present) {
      map['reference_number'] = Variable<String>(referenceNumber.value);
    }
    if (relatedCondition.present) {
      map['related_condition'] = Variable<String>(relatedCondition.value);
    }
    if (notes.present) {
      map['notes'] = Variable<String>(notes.value);
    }
    if (followUpRequired.present) {
      map['follow_up_required'] = Variable<String>(followUpRequired.value);
    }
    if (expirationDate.present) {
      map['expiration_date'] = Variable<DateTime>(expirationDate.value);
    }
    if (reminderDate.present) {
      map['reminder_date'] = Variable<DateTime>(reminderDate.value);
    }
    if (tags.present) {
      map['tags'] = Variable<String>(tags.value);
    }
    if (isConfidential.present) {
      map['is_confidential'] = Variable<bool>(isConfidential.value);
    }
    if (requiresAction.present) {
      map['requires_action'] = Variable<bool>(requiresAction.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('GeneralRecordsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('recordType: $recordType, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('recordDate: $recordDate, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('category: $category, ')
          ..write('subcategory: $subcategory, ')
          ..write('providerName: $providerName, ')
          ..write('institution: $institution, ')
          ..write('documentDate: $documentDate, ')
          ..write('documentType: $documentType, ')
          ..write('referenceNumber: $referenceNumber, ')
          ..write('relatedCondition: $relatedCondition, ')
          ..write('notes: $notes, ')
          ..write('followUpRequired: $followUpRequired, ')
          ..write('expirationDate: $expirationDate, ')
          ..write('reminderDate: $reminderDate, ')
          ..write('tags: $tags, ')
          ..write('isConfidential: $isConfidential, ')
          ..write('requiresAction: $requiresAction, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $TagsTable extends Tags with TableInfo<$TagsTable, Tag> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TagsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  @override
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'name',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 50,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    defaultConstraints: GeneratedColumn.constraintIsAlways('UNIQUE'),
  );
  static const VerificationMeta _colorMeta = const VerificationMeta('color');
  @override
  late final GeneratedColumn<String> color = GeneratedColumn<String>(
    'color',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _categoryMeta = const VerificationMeta(
    'category',
  );
  @override
  late final GeneratedColumn<String> category = GeneratedColumn<String>(
    'category',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _iconMeta = const VerificationMeta('icon');
  @override
  late final GeneratedColumn<String> icon = GeneratedColumn<String>(
    'icon',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _isSystemMeta = const VerificationMeta(
    'isSystem',
  );
  @override
  late final GeneratedColumn<bool> isSystem = GeneratedColumn<bool>(
    'is_system',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_system" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _usageCountMeta = const VerificationMeta(
    'usageCount',
  );
  @override
  late final GeneratedColumn<int> usageCount = GeneratedColumn<int>(
    'usage_count',
    aliasedName,
    false,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    defaultValue: const Constant(0),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    name,
    color,
    description,
    category,
    icon,
    isSystem,
    isActive,
    createdAt,
    updatedAt,
    usageCount,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'tags';
  @override
  VerificationContext validateIntegrity(
    Insertable<Tag> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['name']!, _nameMeta),
      );
    } else if (isInserting) {
      context.missing(_nameMeta);
    }
    if (data.containsKey('color')) {
      context.handle(
        _colorMeta,
        color.isAcceptableOrUnknown(data['color']!, _colorMeta),
      );
    } else if (isInserting) {
      context.missing(_colorMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('category')) {
      context.handle(
        _categoryMeta,
        category.isAcceptableOrUnknown(data['category']!, _categoryMeta),
      );
    }
    if (data.containsKey('icon')) {
      context.handle(
        _iconMeta,
        icon.isAcceptableOrUnknown(data['icon']!, _iconMeta),
      );
    }
    if (data.containsKey('is_system')) {
      context.handle(
        _isSystemMeta,
        isSystem.isAcceptableOrUnknown(data['is_system']!, _isSystemMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('usage_count')) {
      context.handle(
        _usageCountMeta,
        usageCount.isAcceptableOrUnknown(data['usage_count']!, _usageCountMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Tag map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return Tag(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}name'],
      )!,
      color: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}color'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      category: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}category'],
      ),
      icon: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}icon'],
      ),
      isSystem: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_system'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      usageCount: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usage_count'],
      )!,
    );
  }

  @override
  $TagsTable createAlias(String alias) {
    return $TagsTable(attachedDatabase, alias);
  }
}

class Tag extends DataClass implements Insertable<Tag> {
  final String id;
  final String name;
  final String color;
  final String? description;
  final String? category;
  final String? icon;
  final bool isSystem;
  final bool isActive;
  final DateTime createdAt;
  final DateTime updatedAt;
  final int usageCount;
  const Tag({
    required this.id,
    required this.name,
    required this.color,
    this.description,
    this.category,
    this.icon,
    required this.isSystem,
    required this.isActive,
    required this.createdAt,
    required this.updatedAt,
    required this.usageCount,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['name'] = Variable<String>(name);
    map['color'] = Variable<String>(color);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || category != null) {
      map['category'] = Variable<String>(category);
    }
    if (!nullToAbsent || icon != null) {
      map['icon'] = Variable<String>(icon);
    }
    map['is_system'] = Variable<bool>(isSystem);
    map['is_active'] = Variable<bool>(isActive);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['usage_count'] = Variable<int>(usageCount);
    return map;
  }

  TagsCompanion toCompanion(bool nullToAbsent) {
    return TagsCompanion(
      id: Value(id),
      name: Value(name),
      color: Value(color),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      category: category == null && nullToAbsent
          ? const Value.absent()
          : Value(category),
      icon: icon == null && nullToAbsent ? const Value.absent() : Value(icon),
      isSystem: Value(isSystem),
      isActive: Value(isActive),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      usageCount: Value(usageCount),
    );
  }

  factory Tag.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Tag(
      id: serializer.fromJson<String>(json['id']),
      name: serializer.fromJson<String>(json['name']),
      color: serializer.fromJson<String>(json['color']),
      description: serializer.fromJson<String?>(json['description']),
      category: serializer.fromJson<String?>(json['category']),
      icon: serializer.fromJson<String?>(json['icon']),
      isSystem: serializer.fromJson<bool>(json['isSystem']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      usageCount: serializer.fromJson<int>(json['usageCount']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'name': serializer.toJson<String>(name),
      'color': serializer.toJson<String>(color),
      'description': serializer.toJson<String?>(description),
      'category': serializer.toJson<String?>(category),
      'icon': serializer.toJson<String?>(icon),
      'isSystem': serializer.toJson<bool>(isSystem),
      'isActive': serializer.toJson<bool>(isActive),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'usageCount': serializer.toJson<int>(usageCount),
    };
  }

  Tag copyWith({
    String? id,
    String? name,
    String? color,
    Value<String?> description = const Value.absent(),
    Value<String?> category = const Value.absent(),
    Value<String?> icon = const Value.absent(),
    bool? isSystem,
    bool? isActive,
    DateTime? createdAt,
    DateTime? updatedAt,
    int? usageCount,
  }) => Tag(
    id: id ?? this.id,
    name: name ?? this.name,
    color: color ?? this.color,
    description: description.present ? description.value : this.description,
    category: category.present ? category.value : this.category,
    icon: icon.present ? icon.value : this.icon,
    isSystem: isSystem ?? this.isSystem,
    isActive: isActive ?? this.isActive,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    usageCount: usageCount ?? this.usageCount,
  );
  Tag copyWithCompanion(TagsCompanion data) {
    return Tag(
      id: data.id.present ? data.id.value : this.id,
      name: data.name.present ? data.name.value : this.name,
      color: data.color.present ? data.color.value : this.color,
      description: data.description.present
          ? data.description.value
          : this.description,
      category: data.category.present ? data.category.value : this.category,
      icon: data.icon.present ? data.icon.value : this.icon,
      isSystem: data.isSystem.present ? data.isSystem.value : this.isSystem,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      usageCount: data.usageCount.present
          ? data.usageCount.value
          : this.usageCount,
    );
  }

  @override
  String toString() {
    return (StringBuffer('Tag(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('color: $color, ')
          ..write('description: $description, ')
          ..write('category: $category, ')
          ..write('icon: $icon, ')
          ..write('isSystem: $isSystem, ')
          ..write('isActive: $isActive, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('usageCount: $usageCount')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    name,
    color,
    description,
    category,
    icon,
    isSystem,
    isActive,
    createdAt,
    updatedAt,
    usageCount,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Tag &&
          other.id == this.id &&
          other.name == this.name &&
          other.color == this.color &&
          other.description == this.description &&
          other.category == this.category &&
          other.icon == this.icon &&
          other.isSystem == this.isSystem &&
          other.isActive == this.isActive &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.usageCount == this.usageCount);
}

class TagsCompanion extends UpdateCompanion<Tag> {
  final Value<String> id;
  final Value<String> name;
  final Value<String> color;
  final Value<String?> description;
  final Value<String?> category;
  final Value<String?> icon;
  final Value<bool> isSystem;
  final Value<bool> isActive;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<int> usageCount;
  final Value<int> rowid;
  const TagsCompanion({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.color = const Value.absent(),
    this.description = const Value.absent(),
    this.category = const Value.absent(),
    this.icon = const Value.absent(),
    this.isSystem = const Value.absent(),
    this.isActive = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.usageCount = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  TagsCompanion.insert({
    required String id,
    required String name,
    required String color,
    this.description = const Value.absent(),
    this.category = const Value.absent(),
    this.icon = const Value.absent(),
    this.isSystem = const Value.absent(),
    this.isActive = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.usageCount = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       name = Value(name),
       color = Value(color);
  static Insertable<Tag> custom({
    Expression<String>? id,
    Expression<String>? name,
    Expression<String>? color,
    Expression<String>? description,
    Expression<String>? category,
    Expression<String>? icon,
    Expression<bool>? isSystem,
    Expression<bool>? isActive,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<int>? usageCount,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (name != null) 'name': name,
      if (color != null) 'color': color,
      if (description != null) 'description': description,
      if (category != null) 'category': category,
      if (icon != null) 'icon': icon,
      if (isSystem != null) 'is_system': isSystem,
      if (isActive != null) 'is_active': isActive,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (usageCount != null) 'usage_count': usageCount,
      if (rowid != null) 'rowid': rowid,
    });
  }

  TagsCompanion copyWith({
    Value<String>? id,
    Value<String>? name,
    Value<String>? color,
    Value<String?>? description,
    Value<String?>? category,
    Value<String?>? icon,
    Value<bool>? isSystem,
    Value<bool>? isActive,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<int>? usageCount,
    Value<int>? rowid,
  }) {
    return TagsCompanion(
      id: id ?? this.id,
      name: name ?? this.name,
      color: color ?? this.color,
      description: description ?? this.description,
      category: category ?? this.category,
      icon: icon ?? this.icon,
      isSystem: isSystem ?? this.isSystem,
      isActive: isActive ?? this.isActive,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      usageCount: usageCount ?? this.usageCount,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (name.present) {
      map['name'] = Variable<String>(name.value);
    }
    if (color.present) {
      map['color'] = Variable<String>(color.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (category.present) {
      map['category'] = Variable<String>(category.value);
    }
    if (icon.present) {
      map['icon'] = Variable<String>(icon.value);
    }
    if (isSystem.present) {
      map['is_system'] = Variable<bool>(isSystem.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (usageCount.present) {
      map['usage_count'] = Variable<int>(usageCount.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TagsCompanion(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('color: $color, ')
          ..write('description: $description, ')
          ..write('category: $category, ')
          ..write('icon: $icon, ')
          ..write('isSystem: $isSystem, ')
          ..write('isActive: $isActive, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('usageCount: $usageCount, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $AttachmentsTable extends Attachments
    with TableInfo<$AttachmentsTable, Attachment> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $AttachmentsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordIdMeta = const VerificationMeta(
    'recordId',
  );
  @override
  late final GeneratedColumn<String> recordId = GeneratedColumn<String>(
    'record_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _fileNameMeta = const VerificationMeta(
    'fileName',
  );
  @override
  late final GeneratedColumn<String> fileName = GeneratedColumn<String>(
    'file_name',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _filePathMeta = const VerificationMeta(
    'filePath',
  );
  @override
  late final GeneratedColumn<String> filePath = GeneratedColumn<String>(
    'file_path',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _fileTypeMeta = const VerificationMeta(
    'fileType',
  );
  @override
  late final GeneratedColumn<String> fileType = GeneratedColumn<String>(
    'file_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _mimeTypeMeta = const VerificationMeta(
    'mimeType',
  );
  @override
  late final GeneratedColumn<String> mimeType = GeneratedColumn<String>(
    'mime_type',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _fileSizeMeta = const VerificationMeta(
    'fileSize',
  );
  @override
  late final GeneratedColumn<int> fileSize = GeneratedColumn<int>(
    'file_size',
    aliasedName,
    false,
    type: DriftSqlType.int,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _thumbnailPathMeta = const VerificationMeta(
    'thumbnailPath',
  );
  @override
  late final GeneratedColumn<String> thumbnailPath = GeneratedColumn<String>(
    'thumbnail_path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _sortOrderMeta = const VerificationMeta(
    'sortOrder',
  );
  @override
  late final GeneratedColumn<int> sortOrder = GeneratedColumn<int>(
    'sort_order',
    aliasedName,
    false,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    defaultValue: const Constant(0),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  @override
  late final GeneratedColumn<DateTime> updatedAt = GeneratedColumn<DateTime>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _isSyncedMeta = const VerificationMeta(
    'isSynced',
  );
  @override
  late final GeneratedColumn<bool> isSynced = GeneratedColumn<bool>(
    'is_synced',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_synced" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  static const VerificationMeta _isConfidentialMeta = const VerificationMeta(
    'isConfidential',
  );
  @override
  late final GeneratedColumn<bool> isConfidential = GeneratedColumn<bool>(
    'is_confidential',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_confidential" IN (0, 1))',
    ),
    defaultValue: const Constant(false),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    recordId,
    fileName,
    filePath,
    fileType,
    mimeType,
    fileSize,
    description,
    thumbnailPath,
    sortOrder,
    createdAt,
    updatedAt,
    isActive,
    isSynced,
    isConfidential,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'attachments';
  @override
  VerificationContext validateIntegrity(
    Insertable<Attachment> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('record_id')) {
      context.handle(
        _recordIdMeta,
        recordId.isAcceptableOrUnknown(data['record_id']!, _recordIdMeta),
      );
    } else if (isInserting) {
      context.missing(_recordIdMeta);
    }
    if (data.containsKey('file_name')) {
      context.handle(
        _fileNameMeta,
        fileName.isAcceptableOrUnknown(data['file_name']!, _fileNameMeta),
      );
    } else if (isInserting) {
      context.missing(_fileNameMeta);
    }
    if (data.containsKey('file_path')) {
      context.handle(
        _filePathMeta,
        filePath.isAcceptableOrUnknown(data['file_path']!, _filePathMeta),
      );
    } else if (isInserting) {
      context.missing(_filePathMeta);
    }
    if (data.containsKey('file_type')) {
      context.handle(
        _fileTypeMeta,
        fileType.isAcceptableOrUnknown(data['file_type']!, _fileTypeMeta),
      );
    } else if (isInserting) {
      context.missing(_fileTypeMeta);
    }
    if (data.containsKey('mime_type')) {
      context.handle(
        _mimeTypeMeta,
        mimeType.isAcceptableOrUnknown(data['mime_type']!, _mimeTypeMeta),
      );
    }
    if (data.containsKey('file_size')) {
      context.handle(
        _fileSizeMeta,
        fileSize.isAcceptableOrUnknown(data['file_size']!, _fileSizeMeta),
      );
    } else if (isInserting) {
      context.missing(_fileSizeMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('thumbnail_path')) {
      context.handle(
        _thumbnailPathMeta,
        thumbnailPath.isAcceptableOrUnknown(
          data['thumbnail_path']!,
          _thumbnailPathMeta,
        ),
      );
    }
    if (data.containsKey('sort_order')) {
      context.handle(
        _sortOrderMeta,
        sortOrder.isAcceptableOrUnknown(data['sort_order']!, _sortOrderMeta),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('is_synced')) {
      context.handle(
        _isSyncedMeta,
        isSynced.isAcceptableOrUnknown(data['is_synced']!, _isSyncedMeta),
      );
    }
    if (data.containsKey('is_confidential')) {
      context.handle(
        _isConfidentialMeta,
        isConfidential.isAcceptableOrUnknown(
          data['is_confidential']!,
          _isConfidentialMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Attachment map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return Attachment(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      recordId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_id'],
      )!,
      fileName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}file_name'],
      )!,
      filePath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}file_path'],
      )!,
      fileType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}file_type'],
      )!,
      mimeType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}mime_type'],
      ),
      fileSize: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}file_size'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      thumbnailPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}thumbnail_path'],
      ),
      sortOrder: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}sort_order'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}updated_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      isSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_synced'],
      )!,
      isConfidential: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_confidential'],
      )!,
    );
  }

  @override
  $AttachmentsTable createAlias(String alias) {
    return $AttachmentsTable(attachedDatabase, alias);
  }
}

class Attachment extends DataClass implements Insertable<Attachment> {
  final String id;
  final String recordId;
  final String fileName;
  final String filePath;
  final String fileType;
  final String? mimeType;
  final int fileSize;
  final String? description;
  final String? thumbnailPath;
  final int sortOrder;
  final DateTime createdAt;
  final DateTime updatedAt;
  final bool isActive;
  final bool isSynced;
  final bool isConfidential;
  const Attachment({
    required this.id,
    required this.recordId,
    required this.fileName,
    required this.filePath,
    required this.fileType,
    this.mimeType,
    required this.fileSize,
    this.description,
    this.thumbnailPath,
    required this.sortOrder,
    required this.createdAt,
    required this.updatedAt,
    required this.isActive,
    required this.isSynced,
    required this.isConfidential,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['record_id'] = Variable<String>(recordId);
    map['file_name'] = Variable<String>(fileName);
    map['file_path'] = Variable<String>(filePath);
    map['file_type'] = Variable<String>(fileType);
    if (!nullToAbsent || mimeType != null) {
      map['mime_type'] = Variable<String>(mimeType);
    }
    map['file_size'] = Variable<int>(fileSize);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || thumbnailPath != null) {
      map['thumbnail_path'] = Variable<String>(thumbnailPath);
    }
    map['sort_order'] = Variable<int>(sortOrder);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['updated_at'] = Variable<DateTime>(updatedAt);
    map['is_active'] = Variable<bool>(isActive);
    map['is_synced'] = Variable<bool>(isSynced);
    map['is_confidential'] = Variable<bool>(isConfidential);
    return map;
  }

  AttachmentsCompanion toCompanion(bool nullToAbsent) {
    return AttachmentsCompanion(
      id: Value(id),
      recordId: Value(recordId),
      fileName: Value(fileName),
      filePath: Value(filePath),
      fileType: Value(fileType),
      mimeType: mimeType == null && nullToAbsent
          ? const Value.absent()
          : Value(mimeType),
      fileSize: Value(fileSize),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      thumbnailPath: thumbnailPath == null && nullToAbsent
          ? const Value.absent()
          : Value(thumbnailPath),
      sortOrder: Value(sortOrder),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
      isActive: Value(isActive),
      isSynced: Value(isSynced),
      isConfidential: Value(isConfidential),
    );
  }

  factory Attachment.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Attachment(
      id: serializer.fromJson<String>(json['id']),
      recordId: serializer.fromJson<String>(json['recordId']),
      fileName: serializer.fromJson<String>(json['fileName']),
      filePath: serializer.fromJson<String>(json['filePath']),
      fileType: serializer.fromJson<String>(json['fileType']),
      mimeType: serializer.fromJson<String?>(json['mimeType']),
      fileSize: serializer.fromJson<int>(json['fileSize']),
      description: serializer.fromJson<String?>(json['description']),
      thumbnailPath: serializer.fromJson<String?>(json['thumbnailPath']),
      sortOrder: serializer.fromJson<int>(json['sortOrder']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      updatedAt: serializer.fromJson<DateTime>(json['updatedAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      isSynced: serializer.fromJson<bool>(json['isSynced']),
      isConfidential: serializer.fromJson<bool>(json['isConfidential']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'recordId': serializer.toJson<String>(recordId),
      'fileName': serializer.toJson<String>(fileName),
      'filePath': serializer.toJson<String>(filePath),
      'fileType': serializer.toJson<String>(fileType),
      'mimeType': serializer.toJson<String?>(mimeType),
      'fileSize': serializer.toJson<int>(fileSize),
      'description': serializer.toJson<String?>(description),
      'thumbnailPath': serializer.toJson<String?>(thumbnailPath),
      'sortOrder': serializer.toJson<int>(sortOrder),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'updatedAt': serializer.toJson<DateTime>(updatedAt),
      'isActive': serializer.toJson<bool>(isActive),
      'isSynced': serializer.toJson<bool>(isSynced),
      'isConfidential': serializer.toJson<bool>(isConfidential),
    };
  }

  Attachment copyWith({
    String? id,
    String? recordId,
    String? fileName,
    String? filePath,
    String? fileType,
    Value<String?> mimeType = const Value.absent(),
    int? fileSize,
    Value<String?> description = const Value.absent(),
    Value<String?> thumbnailPath = const Value.absent(),
    int? sortOrder,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? isActive,
    bool? isSynced,
    bool? isConfidential,
  }) => Attachment(
    id: id ?? this.id,
    recordId: recordId ?? this.recordId,
    fileName: fileName ?? this.fileName,
    filePath: filePath ?? this.filePath,
    fileType: fileType ?? this.fileType,
    mimeType: mimeType.present ? mimeType.value : this.mimeType,
    fileSize: fileSize ?? this.fileSize,
    description: description.present ? description.value : this.description,
    thumbnailPath: thumbnailPath.present
        ? thumbnailPath.value
        : this.thumbnailPath,
    sortOrder: sortOrder ?? this.sortOrder,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
    isActive: isActive ?? this.isActive,
    isSynced: isSynced ?? this.isSynced,
    isConfidential: isConfidential ?? this.isConfidential,
  );
  Attachment copyWithCompanion(AttachmentsCompanion data) {
    return Attachment(
      id: data.id.present ? data.id.value : this.id,
      recordId: data.recordId.present ? data.recordId.value : this.recordId,
      fileName: data.fileName.present ? data.fileName.value : this.fileName,
      filePath: data.filePath.present ? data.filePath.value : this.filePath,
      fileType: data.fileType.present ? data.fileType.value : this.fileType,
      mimeType: data.mimeType.present ? data.mimeType.value : this.mimeType,
      fileSize: data.fileSize.present ? data.fileSize.value : this.fileSize,
      description: data.description.present
          ? data.description.value
          : this.description,
      thumbnailPath: data.thumbnailPath.present
          ? data.thumbnailPath.value
          : this.thumbnailPath,
      sortOrder: data.sortOrder.present ? data.sortOrder.value : this.sortOrder,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      isSynced: data.isSynced.present ? data.isSynced.value : this.isSynced,
      isConfidential: data.isConfidential.present
          ? data.isConfidential.value
          : this.isConfidential,
    );
  }

  @override
  String toString() {
    return (StringBuffer('Attachment(')
          ..write('id: $id, ')
          ..write('recordId: $recordId, ')
          ..write('fileName: $fileName, ')
          ..write('filePath: $filePath, ')
          ..write('fileType: $fileType, ')
          ..write('mimeType: $mimeType, ')
          ..write('fileSize: $fileSize, ')
          ..write('description: $description, ')
          ..write('thumbnailPath: $thumbnailPath, ')
          ..write('sortOrder: $sortOrder, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('isSynced: $isSynced, ')
          ..write('isConfidential: $isConfidential')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    recordId,
    fileName,
    filePath,
    fileType,
    mimeType,
    fileSize,
    description,
    thumbnailPath,
    sortOrder,
    createdAt,
    updatedAt,
    isActive,
    isSynced,
    isConfidential,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Attachment &&
          other.id == this.id &&
          other.recordId == this.recordId &&
          other.fileName == this.fileName &&
          other.filePath == this.filePath &&
          other.fileType == this.fileType &&
          other.mimeType == this.mimeType &&
          other.fileSize == this.fileSize &&
          other.description == this.description &&
          other.thumbnailPath == this.thumbnailPath &&
          other.sortOrder == this.sortOrder &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt &&
          other.isActive == this.isActive &&
          other.isSynced == this.isSynced &&
          other.isConfidential == this.isConfidential);
}

class AttachmentsCompanion extends UpdateCompanion<Attachment> {
  final Value<String> id;
  final Value<String> recordId;
  final Value<String> fileName;
  final Value<String> filePath;
  final Value<String> fileType;
  final Value<String?> mimeType;
  final Value<int> fileSize;
  final Value<String?> description;
  final Value<String?> thumbnailPath;
  final Value<int> sortOrder;
  final Value<DateTime> createdAt;
  final Value<DateTime> updatedAt;
  final Value<bool> isActive;
  final Value<bool> isSynced;
  final Value<bool> isConfidential;
  final Value<int> rowid;
  const AttachmentsCompanion({
    this.id = const Value.absent(),
    this.recordId = const Value.absent(),
    this.fileName = const Value.absent(),
    this.filePath = const Value.absent(),
    this.fileType = const Value.absent(),
    this.mimeType = const Value.absent(),
    this.fileSize = const Value.absent(),
    this.description = const Value.absent(),
    this.thumbnailPath = const Value.absent(),
    this.sortOrder = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.isSynced = const Value.absent(),
    this.isConfidential = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  AttachmentsCompanion.insert({
    required String id,
    required String recordId,
    required String fileName,
    required String filePath,
    required String fileType,
    this.mimeType = const Value.absent(),
    required int fileSize,
    this.description = const Value.absent(),
    this.thumbnailPath = const Value.absent(),
    this.sortOrder = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.isSynced = const Value.absent(),
    this.isConfidential = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       recordId = Value(recordId),
       fileName = Value(fileName),
       filePath = Value(filePath),
       fileType = Value(fileType),
       fileSize = Value(fileSize);
  static Insertable<Attachment> custom({
    Expression<String>? id,
    Expression<String>? recordId,
    Expression<String>? fileName,
    Expression<String>? filePath,
    Expression<String>? fileType,
    Expression<String>? mimeType,
    Expression<int>? fileSize,
    Expression<String>? description,
    Expression<String>? thumbnailPath,
    Expression<int>? sortOrder,
    Expression<DateTime>? createdAt,
    Expression<DateTime>? updatedAt,
    Expression<bool>? isActive,
    Expression<bool>? isSynced,
    Expression<bool>? isConfidential,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (recordId != null) 'record_id': recordId,
      if (fileName != null) 'file_name': fileName,
      if (filePath != null) 'file_path': filePath,
      if (fileType != null) 'file_type': fileType,
      if (mimeType != null) 'mime_type': mimeType,
      if (fileSize != null) 'file_size': fileSize,
      if (description != null) 'description': description,
      if (thumbnailPath != null) 'thumbnail_path': thumbnailPath,
      if (sortOrder != null) 'sort_order': sortOrder,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (isActive != null) 'is_active': isActive,
      if (isSynced != null) 'is_synced': isSynced,
      if (isConfidential != null) 'is_confidential': isConfidential,
      if (rowid != null) 'rowid': rowid,
    });
  }

  AttachmentsCompanion copyWith({
    Value<String>? id,
    Value<String>? recordId,
    Value<String>? fileName,
    Value<String>? filePath,
    Value<String>? fileType,
    Value<String?>? mimeType,
    Value<int>? fileSize,
    Value<String?>? description,
    Value<String?>? thumbnailPath,
    Value<int>? sortOrder,
    Value<DateTime>? createdAt,
    Value<DateTime>? updatedAt,
    Value<bool>? isActive,
    Value<bool>? isSynced,
    Value<bool>? isConfidential,
    Value<int>? rowid,
  }) {
    return AttachmentsCompanion(
      id: id ?? this.id,
      recordId: recordId ?? this.recordId,
      fileName: fileName ?? this.fileName,
      filePath: filePath ?? this.filePath,
      fileType: fileType ?? this.fileType,
      mimeType: mimeType ?? this.mimeType,
      fileSize: fileSize ?? this.fileSize,
      description: description ?? this.description,
      thumbnailPath: thumbnailPath ?? this.thumbnailPath,
      sortOrder: sortOrder ?? this.sortOrder,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      isActive: isActive ?? this.isActive,
      isSynced: isSynced ?? this.isSynced,
      isConfidential: isConfidential ?? this.isConfidential,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (recordId.present) {
      map['record_id'] = Variable<String>(recordId.value);
    }
    if (fileName.present) {
      map['file_name'] = Variable<String>(fileName.value);
    }
    if (filePath.present) {
      map['file_path'] = Variable<String>(filePath.value);
    }
    if (fileType.present) {
      map['file_type'] = Variable<String>(fileType.value);
    }
    if (mimeType.present) {
      map['mime_type'] = Variable<String>(mimeType.value);
    }
    if (fileSize.present) {
      map['file_size'] = Variable<int>(fileSize.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (thumbnailPath.present) {
      map['thumbnail_path'] = Variable<String>(thumbnailPath.value);
    }
    if (sortOrder.present) {
      map['sort_order'] = Variable<int>(sortOrder.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<DateTime>(updatedAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (isSynced.present) {
      map['is_synced'] = Variable<bool>(isSynced.value);
    }
    if (isConfidential.present) {
      map['is_confidential'] = Variable<bool>(isConfidential.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AttachmentsCompanion(')
          ..write('id: $id, ')
          ..write('recordId: $recordId, ')
          ..write('fileName: $fileName, ')
          ..write('filePath: $filePath, ')
          ..write('fileType: $fileType, ')
          ..write('mimeType: $mimeType, ')
          ..write('fileSize: $fileSize, ')
          ..write('description: $description, ')
          ..write('thumbnailPath: $thumbnailPath, ')
          ..write('sortOrder: $sortOrder, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('isActive: $isActive, ')
          ..write('isSynced: $isSynced, ')
          ..write('isConfidential: $isConfidential, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $RemindersTable extends Reminders
    with TableInfo<$RemindersTable, Reminder> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $RemindersTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _recordIdMeta = const VerificationMeta(
    'recordId',
  );
  @override
  late final GeneratedColumn<String> recordId = GeneratedColumn<String>(
    'record_id',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _medicationIdMeta = const VerificationMeta(
    'medicationId',
  );
  @override
  late final GeneratedColumn<String> medicationId = GeneratedColumn<String>(
    'medication_id',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _typeMeta = const VerificationMeta('type');
  @override
  late final GeneratedColumn<String> type = GeneratedColumn<String>(
    'type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  @override
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  @override
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _scheduledTimeMeta = const VerificationMeta(
    'scheduledTime',
  );
  @override
  late final GeneratedColumn<DateTime> scheduledTime =
      GeneratedColumn<DateTime>(
        'scheduled_time',
        aliasedName,
        false,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _frequencyMeta = const VerificationMeta(
    'frequency',
  );
  @override
  late final GeneratedColumn<String> frequency = GeneratedColumn<String>(
    'frequency',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _daysOfWeekMeta = const VerificationMeta(
    'daysOfWeek',
  );
  @override
  late final GeneratedColumn<String> daysOfWeek = GeneratedColumn<String>(
    'days_of_week',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _timeSlotsMeta = const VerificationMeta(
    'timeSlots',
  );
  @override
  late final GeneratedColumn<String> timeSlots = GeneratedColumn<String>(
    'time_slots',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  static const VerificationMeta _lastSentMeta = const VerificationMeta(
    'lastSent',
  );
  @override
  late final GeneratedColumn<DateTime> lastSent = GeneratedColumn<DateTime>(
    'last_sent',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nextScheduledMeta = const VerificationMeta(
    'nextScheduled',
  );
  @override
  late final GeneratedColumn<DateTime> nextScheduled =
      GeneratedColumn<DateTime>(
        'next_scheduled',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _snoozeMinutesMeta = const VerificationMeta(
    'snoozeMinutes',
  );
  @override
  late final GeneratedColumn<int> snoozeMinutes = GeneratedColumn<int>(
    'snooze_minutes',
    aliasedName,
    false,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    defaultValue: const Constant(15),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    recordId,
    medicationId,
    type,
    title,
    description,
    scheduledTime,
    frequency,
    daysOfWeek,
    timeSlots,
    isActive,
    lastSent,
    nextScheduled,
    snoozeMinutes,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'reminders';
  @override
  VerificationContext validateIntegrity(
    Insertable<Reminder> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('record_id')) {
      context.handle(
        _recordIdMeta,
        recordId.isAcceptableOrUnknown(data['record_id']!, _recordIdMeta),
      );
    }
    if (data.containsKey('medication_id')) {
      context.handle(
        _medicationIdMeta,
        medicationId.isAcceptableOrUnknown(
          data['medication_id']!,
          _medicationIdMeta,
        ),
      );
    }
    if (data.containsKey('type')) {
      context.handle(
        _typeMeta,
        type.isAcceptableOrUnknown(data['type']!, _typeMeta),
      );
    } else if (isInserting) {
      context.missing(_typeMeta);
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    } else if (isInserting) {
      context.missing(_titleMeta);
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('scheduled_time')) {
      context.handle(
        _scheduledTimeMeta,
        scheduledTime.isAcceptableOrUnknown(
          data['scheduled_time']!,
          _scheduledTimeMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_scheduledTimeMeta);
    }
    if (data.containsKey('frequency')) {
      context.handle(
        _frequencyMeta,
        frequency.isAcceptableOrUnknown(data['frequency']!, _frequencyMeta),
      );
    } else if (isInserting) {
      context.missing(_frequencyMeta);
    }
    if (data.containsKey('days_of_week')) {
      context.handle(
        _daysOfWeekMeta,
        daysOfWeek.isAcceptableOrUnknown(
          data['days_of_week']!,
          _daysOfWeekMeta,
        ),
      );
    }
    if (data.containsKey('time_slots')) {
      context.handle(
        _timeSlotsMeta,
        timeSlots.isAcceptableOrUnknown(data['time_slots']!, _timeSlotsMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    if (data.containsKey('last_sent')) {
      context.handle(
        _lastSentMeta,
        lastSent.isAcceptableOrUnknown(data['last_sent']!, _lastSentMeta),
      );
    }
    if (data.containsKey('next_scheduled')) {
      context.handle(
        _nextScheduledMeta,
        nextScheduled.isAcceptableOrUnknown(
          data['next_scheduled']!,
          _nextScheduledMeta,
        ),
      );
    }
    if (data.containsKey('snooze_minutes')) {
      context.handle(
        _snoozeMinutesMeta,
        snoozeMinutes.isAcceptableOrUnknown(
          data['snooze_minutes']!,
          _snoozeMinutesMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Reminder map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return Reminder(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      recordId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_id'],
      ),
      medicationId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}medication_id'],
      ),
      type: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}type'],
      )!,
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      )!,
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      scheduledTime: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}scheduled_time'],
      )!,
      frequency: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}frequency'],
      )!,
      daysOfWeek: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}days_of_week'],
      ),
      timeSlots: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}time_slots'],
      ),
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
      lastSent: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}last_sent'],
      ),
      nextScheduled: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}next_scheduled'],
      ),
      snoozeMinutes: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}snooze_minutes'],
      )!,
    );
  }

  @override
  $RemindersTable createAlias(String alias) {
    return $RemindersTable(attachedDatabase, alias);
  }
}

class Reminder extends DataClass implements Insertable<Reminder> {
  final String id;
  final String? recordId;
  final String? medicationId;
  final String type;
  final String title;
  final String? description;
  final DateTime scheduledTime;
  final String frequency;
  final String? daysOfWeek;
  final String? timeSlots;
  final bool isActive;
  final DateTime? lastSent;
  final DateTime? nextScheduled;
  final int snoozeMinutes;
  const Reminder({
    required this.id,
    this.recordId,
    this.medicationId,
    required this.type,
    required this.title,
    this.description,
    required this.scheduledTime,
    required this.frequency,
    this.daysOfWeek,
    this.timeSlots,
    required this.isActive,
    this.lastSent,
    this.nextScheduled,
    required this.snoozeMinutes,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    if (!nullToAbsent || recordId != null) {
      map['record_id'] = Variable<String>(recordId);
    }
    if (!nullToAbsent || medicationId != null) {
      map['medication_id'] = Variable<String>(medicationId);
    }
    map['type'] = Variable<String>(type);
    map['title'] = Variable<String>(title);
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    map['scheduled_time'] = Variable<DateTime>(scheduledTime);
    map['frequency'] = Variable<String>(frequency);
    if (!nullToAbsent || daysOfWeek != null) {
      map['days_of_week'] = Variable<String>(daysOfWeek);
    }
    if (!nullToAbsent || timeSlots != null) {
      map['time_slots'] = Variable<String>(timeSlots);
    }
    map['is_active'] = Variable<bool>(isActive);
    if (!nullToAbsent || lastSent != null) {
      map['last_sent'] = Variable<DateTime>(lastSent);
    }
    if (!nullToAbsent || nextScheduled != null) {
      map['next_scheduled'] = Variable<DateTime>(nextScheduled);
    }
    map['snooze_minutes'] = Variable<int>(snoozeMinutes);
    return map;
  }

  RemindersCompanion toCompanion(bool nullToAbsent) {
    return RemindersCompanion(
      id: Value(id),
      recordId: recordId == null && nullToAbsent
          ? const Value.absent()
          : Value(recordId),
      medicationId: medicationId == null && nullToAbsent
          ? const Value.absent()
          : Value(medicationId),
      type: Value(type),
      title: Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      scheduledTime: Value(scheduledTime),
      frequency: Value(frequency),
      daysOfWeek: daysOfWeek == null && nullToAbsent
          ? const Value.absent()
          : Value(daysOfWeek),
      timeSlots: timeSlots == null && nullToAbsent
          ? const Value.absent()
          : Value(timeSlots),
      isActive: Value(isActive),
      lastSent: lastSent == null && nullToAbsent
          ? const Value.absent()
          : Value(lastSent),
      nextScheduled: nextScheduled == null && nullToAbsent
          ? const Value.absent()
          : Value(nextScheduled),
      snoozeMinutes: Value(snoozeMinutes),
    );
  }

  factory Reminder.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Reminder(
      id: serializer.fromJson<String>(json['id']),
      recordId: serializer.fromJson<String?>(json['recordId']),
      medicationId: serializer.fromJson<String?>(json['medicationId']),
      type: serializer.fromJson<String>(json['type']),
      title: serializer.fromJson<String>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      scheduledTime: serializer.fromJson<DateTime>(json['scheduledTime']),
      frequency: serializer.fromJson<String>(json['frequency']),
      daysOfWeek: serializer.fromJson<String?>(json['daysOfWeek']),
      timeSlots: serializer.fromJson<String?>(json['timeSlots']),
      isActive: serializer.fromJson<bool>(json['isActive']),
      lastSent: serializer.fromJson<DateTime?>(json['lastSent']),
      nextScheduled: serializer.fromJson<DateTime?>(json['nextScheduled']),
      snoozeMinutes: serializer.fromJson<int>(json['snoozeMinutes']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'recordId': serializer.toJson<String?>(recordId),
      'medicationId': serializer.toJson<String?>(medicationId),
      'type': serializer.toJson<String>(type),
      'title': serializer.toJson<String>(title),
      'description': serializer.toJson<String?>(description),
      'scheduledTime': serializer.toJson<DateTime>(scheduledTime),
      'frequency': serializer.toJson<String>(frequency),
      'daysOfWeek': serializer.toJson<String?>(daysOfWeek),
      'timeSlots': serializer.toJson<String?>(timeSlots),
      'isActive': serializer.toJson<bool>(isActive),
      'lastSent': serializer.toJson<DateTime?>(lastSent),
      'nextScheduled': serializer.toJson<DateTime?>(nextScheduled),
      'snoozeMinutes': serializer.toJson<int>(snoozeMinutes),
    };
  }

  Reminder copyWith({
    String? id,
    Value<String?> recordId = const Value.absent(),
    Value<String?> medicationId = const Value.absent(),
    String? type,
    String? title,
    Value<String?> description = const Value.absent(),
    DateTime? scheduledTime,
    String? frequency,
    Value<String?> daysOfWeek = const Value.absent(),
    Value<String?> timeSlots = const Value.absent(),
    bool? isActive,
    Value<DateTime?> lastSent = const Value.absent(),
    Value<DateTime?> nextScheduled = const Value.absent(),
    int? snoozeMinutes,
  }) => Reminder(
    id: id ?? this.id,
    recordId: recordId.present ? recordId.value : this.recordId,
    medicationId: medicationId.present ? medicationId.value : this.medicationId,
    type: type ?? this.type,
    title: title ?? this.title,
    description: description.present ? description.value : this.description,
    scheduledTime: scheduledTime ?? this.scheduledTime,
    frequency: frequency ?? this.frequency,
    daysOfWeek: daysOfWeek.present ? daysOfWeek.value : this.daysOfWeek,
    timeSlots: timeSlots.present ? timeSlots.value : this.timeSlots,
    isActive: isActive ?? this.isActive,
    lastSent: lastSent.present ? lastSent.value : this.lastSent,
    nextScheduled: nextScheduled.present
        ? nextScheduled.value
        : this.nextScheduled,
    snoozeMinutes: snoozeMinutes ?? this.snoozeMinutes,
  );
  Reminder copyWithCompanion(RemindersCompanion data) {
    return Reminder(
      id: data.id.present ? data.id.value : this.id,
      recordId: data.recordId.present ? data.recordId.value : this.recordId,
      medicationId: data.medicationId.present
          ? data.medicationId.value
          : this.medicationId,
      type: data.type.present ? data.type.value : this.type,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      scheduledTime: data.scheduledTime.present
          ? data.scheduledTime.value
          : this.scheduledTime,
      frequency: data.frequency.present ? data.frequency.value : this.frequency,
      daysOfWeek: data.daysOfWeek.present
          ? data.daysOfWeek.value
          : this.daysOfWeek,
      timeSlots: data.timeSlots.present ? data.timeSlots.value : this.timeSlots,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
      lastSent: data.lastSent.present ? data.lastSent.value : this.lastSent,
      nextScheduled: data.nextScheduled.present
          ? data.nextScheduled.value
          : this.nextScheduled,
      snoozeMinutes: data.snoozeMinutes.present
          ? data.snoozeMinutes.value
          : this.snoozeMinutes,
    );
  }

  @override
  String toString() {
    return (StringBuffer('Reminder(')
          ..write('id: $id, ')
          ..write('recordId: $recordId, ')
          ..write('medicationId: $medicationId, ')
          ..write('type: $type, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('scheduledTime: $scheduledTime, ')
          ..write('frequency: $frequency, ')
          ..write('daysOfWeek: $daysOfWeek, ')
          ..write('timeSlots: $timeSlots, ')
          ..write('isActive: $isActive, ')
          ..write('lastSent: $lastSent, ')
          ..write('nextScheduled: $nextScheduled, ')
          ..write('snoozeMinutes: $snoozeMinutes')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    recordId,
    medicationId,
    type,
    title,
    description,
    scheduledTime,
    frequency,
    daysOfWeek,
    timeSlots,
    isActive,
    lastSent,
    nextScheduled,
    snoozeMinutes,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Reminder &&
          other.id == this.id &&
          other.recordId == this.recordId &&
          other.medicationId == this.medicationId &&
          other.type == this.type &&
          other.title == this.title &&
          other.description == this.description &&
          other.scheduledTime == this.scheduledTime &&
          other.frequency == this.frequency &&
          other.daysOfWeek == this.daysOfWeek &&
          other.timeSlots == this.timeSlots &&
          other.isActive == this.isActive &&
          other.lastSent == this.lastSent &&
          other.nextScheduled == this.nextScheduled &&
          other.snoozeMinutes == this.snoozeMinutes);
}

class RemindersCompanion extends UpdateCompanion<Reminder> {
  final Value<String> id;
  final Value<String?> recordId;
  final Value<String?> medicationId;
  final Value<String> type;
  final Value<String> title;
  final Value<String?> description;
  final Value<DateTime> scheduledTime;
  final Value<String> frequency;
  final Value<String?> daysOfWeek;
  final Value<String?> timeSlots;
  final Value<bool> isActive;
  final Value<DateTime?> lastSent;
  final Value<DateTime?> nextScheduled;
  final Value<int> snoozeMinutes;
  final Value<int> rowid;
  const RemindersCompanion({
    this.id = const Value.absent(),
    this.recordId = const Value.absent(),
    this.medicationId = const Value.absent(),
    this.type = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.scheduledTime = const Value.absent(),
    this.frequency = const Value.absent(),
    this.daysOfWeek = const Value.absent(),
    this.timeSlots = const Value.absent(),
    this.isActive = const Value.absent(),
    this.lastSent = const Value.absent(),
    this.nextScheduled = const Value.absent(),
    this.snoozeMinutes = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  RemindersCompanion.insert({
    required String id,
    this.recordId = const Value.absent(),
    this.medicationId = const Value.absent(),
    required String type,
    required String title,
    this.description = const Value.absent(),
    required DateTime scheduledTime,
    required String frequency,
    this.daysOfWeek = const Value.absent(),
    this.timeSlots = const Value.absent(),
    this.isActive = const Value.absent(),
    this.lastSent = const Value.absent(),
    this.nextScheduled = const Value.absent(),
    this.snoozeMinutes = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       type = Value(type),
       title = Value(title),
       scheduledTime = Value(scheduledTime),
       frequency = Value(frequency);
  static Insertable<Reminder> custom({
    Expression<String>? id,
    Expression<String>? recordId,
    Expression<String>? medicationId,
    Expression<String>? type,
    Expression<String>? title,
    Expression<String>? description,
    Expression<DateTime>? scheduledTime,
    Expression<String>? frequency,
    Expression<String>? daysOfWeek,
    Expression<String>? timeSlots,
    Expression<bool>? isActive,
    Expression<DateTime>? lastSent,
    Expression<DateTime>? nextScheduled,
    Expression<int>? snoozeMinutes,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (recordId != null) 'record_id': recordId,
      if (medicationId != null) 'medication_id': medicationId,
      if (type != null) 'type': type,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (scheduledTime != null) 'scheduled_time': scheduledTime,
      if (frequency != null) 'frequency': frequency,
      if (daysOfWeek != null) 'days_of_week': daysOfWeek,
      if (timeSlots != null) 'time_slots': timeSlots,
      if (isActive != null) 'is_active': isActive,
      if (lastSent != null) 'last_sent': lastSent,
      if (nextScheduled != null) 'next_scheduled': nextScheduled,
      if (snoozeMinutes != null) 'snooze_minutes': snoozeMinutes,
      if (rowid != null) 'rowid': rowid,
    });
  }

  RemindersCompanion copyWith({
    Value<String>? id,
    Value<String?>? recordId,
    Value<String?>? medicationId,
    Value<String>? type,
    Value<String>? title,
    Value<String?>? description,
    Value<DateTime>? scheduledTime,
    Value<String>? frequency,
    Value<String?>? daysOfWeek,
    Value<String?>? timeSlots,
    Value<bool>? isActive,
    Value<DateTime?>? lastSent,
    Value<DateTime?>? nextScheduled,
    Value<int>? snoozeMinutes,
    Value<int>? rowid,
  }) {
    return RemindersCompanion(
      id: id ?? this.id,
      recordId: recordId ?? this.recordId,
      medicationId: medicationId ?? this.medicationId,
      type: type ?? this.type,
      title: title ?? this.title,
      description: description ?? this.description,
      scheduledTime: scheduledTime ?? this.scheduledTime,
      frequency: frequency ?? this.frequency,
      daysOfWeek: daysOfWeek ?? this.daysOfWeek,
      timeSlots: timeSlots ?? this.timeSlots,
      isActive: isActive ?? this.isActive,
      lastSent: lastSent ?? this.lastSent,
      nextScheduled: nextScheduled ?? this.nextScheduled,
      snoozeMinutes: snoozeMinutes ?? this.snoozeMinutes,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (recordId.present) {
      map['record_id'] = Variable<String>(recordId.value);
    }
    if (medicationId.present) {
      map['medication_id'] = Variable<String>(medicationId.value);
    }
    if (type.present) {
      map['type'] = Variable<String>(type.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (scheduledTime.present) {
      map['scheduled_time'] = Variable<DateTime>(scheduledTime.value);
    }
    if (frequency.present) {
      map['frequency'] = Variable<String>(frequency.value);
    }
    if (daysOfWeek.present) {
      map['days_of_week'] = Variable<String>(daysOfWeek.value);
    }
    if (timeSlots.present) {
      map['time_slots'] = Variable<String>(timeSlots.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (lastSent.present) {
      map['last_sent'] = Variable<DateTime>(lastSent.value);
    }
    if (nextScheduled.present) {
      map['next_scheduled'] = Variable<DateTime>(nextScheduled.value);
    }
    if (snoozeMinutes.present) {
      map['snooze_minutes'] = Variable<int>(snoozeMinutes.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RemindersCompanion(')
          ..write('id: $id, ')
          ..write('recordId: $recordId, ')
          ..write('medicationId: $medicationId, ')
          ..write('type: $type, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('scheduledTime: $scheduledTime, ')
          ..write('frequency: $frequency, ')
          ..write('daysOfWeek: $daysOfWeek, ')
          ..write('timeSlots: $timeSlots, ')
          ..write('isActive: $isActive, ')
          ..write('lastSent: $lastSent, ')
          ..write('nextScheduled: $nextScheduled, ')
          ..write('snoozeMinutes: $snoozeMinutes, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $EmergencyCardsTable extends EmergencyCards
    with TableInfo<$EmergencyCardsTable, EmergencyCard> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EmergencyCardsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _profileIdMeta = const VerificationMeta(
    'profileId',
  );
  @override
  late final GeneratedColumn<String> profileId = GeneratedColumn<String>(
    'profile_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _criticalAllergiesMeta = const VerificationMeta(
    'criticalAllergies',
  );
  @override
  late final GeneratedColumn<String> criticalAllergies =
      GeneratedColumn<String>(
        'critical_allergies',
        aliasedName,
        false,
        type: DriftSqlType.string,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _currentMedicationsMeta =
      const VerificationMeta('currentMedications');
  @override
  late final GeneratedColumn<String> currentMedications =
      GeneratedColumn<String>(
        'current_medications',
        aliasedName,
        false,
        type: DriftSqlType.string,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _medicalConditionsMeta = const VerificationMeta(
    'medicalConditions',
  );
  @override
  late final GeneratedColumn<String> medicalConditions =
      GeneratedColumn<String>(
        'medical_conditions',
        aliasedName,
        false,
        type: DriftSqlType.string,
        requiredDuringInsert: true,
      );
  static const VerificationMeta _emergencyContactMeta = const VerificationMeta(
    'emergencyContact',
  );
  @override
  late final GeneratedColumn<String> emergencyContact = GeneratedColumn<String>(
    'emergency_contact',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _secondaryContactMeta = const VerificationMeta(
    'secondaryContact',
  );
  @override
  late final GeneratedColumn<String> secondaryContact = GeneratedColumn<String>(
    'secondary_contact',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _insuranceInfoMeta = const VerificationMeta(
    'insuranceInfo',
  );
  @override
  late final GeneratedColumn<String> insuranceInfo = GeneratedColumn<String>(
    'insurance_info',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _additionalNotesMeta = const VerificationMeta(
    'additionalNotes',
  );
  @override
  late final GeneratedColumn<String> additionalNotes = GeneratedColumn<String>(
    'additional_notes',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _lastUpdatedMeta = const VerificationMeta(
    'lastUpdated',
  );
  @override
  late final GeneratedColumn<DateTime> lastUpdated = GeneratedColumn<DateTime>(
    'last_updated',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    profileId,
    criticalAllergies,
    currentMedications,
    medicalConditions,
    emergencyContact,
    secondaryContact,
    insuranceInfo,
    additionalNotes,
    lastUpdated,
    isActive,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'emergency_cards';
  @override
  VerificationContext validateIntegrity(
    Insertable<EmergencyCard> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('profile_id')) {
      context.handle(
        _profileIdMeta,
        profileId.isAcceptableOrUnknown(data['profile_id']!, _profileIdMeta),
      );
    } else if (isInserting) {
      context.missing(_profileIdMeta);
    }
    if (data.containsKey('critical_allergies')) {
      context.handle(
        _criticalAllergiesMeta,
        criticalAllergies.isAcceptableOrUnknown(
          data['critical_allergies']!,
          _criticalAllergiesMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_criticalAllergiesMeta);
    }
    if (data.containsKey('current_medications')) {
      context.handle(
        _currentMedicationsMeta,
        currentMedications.isAcceptableOrUnknown(
          data['current_medications']!,
          _currentMedicationsMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_currentMedicationsMeta);
    }
    if (data.containsKey('medical_conditions')) {
      context.handle(
        _medicalConditionsMeta,
        medicalConditions.isAcceptableOrUnknown(
          data['medical_conditions']!,
          _medicalConditionsMeta,
        ),
      );
    } else if (isInserting) {
      context.missing(_medicalConditionsMeta);
    }
    if (data.containsKey('emergency_contact')) {
      context.handle(
        _emergencyContactMeta,
        emergencyContact.isAcceptableOrUnknown(
          data['emergency_contact']!,
          _emergencyContactMeta,
        ),
      );
    }
    if (data.containsKey('secondary_contact')) {
      context.handle(
        _secondaryContactMeta,
        secondaryContact.isAcceptableOrUnknown(
          data['secondary_contact']!,
          _secondaryContactMeta,
        ),
      );
    }
    if (data.containsKey('insurance_info')) {
      context.handle(
        _insuranceInfoMeta,
        insuranceInfo.isAcceptableOrUnknown(
          data['insurance_info']!,
          _insuranceInfoMeta,
        ),
      );
    }
    if (data.containsKey('additional_notes')) {
      context.handle(
        _additionalNotesMeta,
        additionalNotes.isAcceptableOrUnknown(
          data['additional_notes']!,
          _additionalNotesMeta,
        ),
      );
    }
    if (data.containsKey('last_updated')) {
      context.handle(
        _lastUpdatedMeta,
        lastUpdated.isAcceptableOrUnknown(
          data['last_updated']!,
          _lastUpdatedMeta,
        ),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EmergencyCard map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return EmergencyCard(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      profileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}profile_id'],
      )!,
      criticalAllergies: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}critical_allergies'],
      )!,
      currentMedications: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}current_medications'],
      )!,
      medicalConditions: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}medical_conditions'],
      )!,
      emergencyContact: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}emergency_contact'],
      ),
      secondaryContact: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}secondary_contact'],
      ),
      insuranceInfo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}insurance_info'],
      ),
      additionalNotes: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}additional_notes'],
      ),
      lastUpdated: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}last_updated'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
    );
  }

  @override
  $EmergencyCardsTable createAlias(String alias) {
    return $EmergencyCardsTable(attachedDatabase, alias);
  }
}

class EmergencyCard extends DataClass implements Insertable<EmergencyCard> {
  final String id;
  final String profileId;
  final String criticalAllergies;
  final String currentMedications;
  final String medicalConditions;
  final String? emergencyContact;
  final String? secondaryContact;
  final String? insuranceInfo;
  final String? additionalNotes;
  final DateTime lastUpdated;
  final bool isActive;
  const EmergencyCard({
    required this.id,
    required this.profileId,
    required this.criticalAllergies,
    required this.currentMedications,
    required this.medicalConditions,
    this.emergencyContact,
    this.secondaryContact,
    this.insuranceInfo,
    this.additionalNotes,
    required this.lastUpdated,
    required this.isActive,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['profile_id'] = Variable<String>(profileId);
    map['critical_allergies'] = Variable<String>(criticalAllergies);
    map['current_medications'] = Variable<String>(currentMedications);
    map['medical_conditions'] = Variable<String>(medicalConditions);
    if (!nullToAbsent || emergencyContact != null) {
      map['emergency_contact'] = Variable<String>(emergencyContact);
    }
    if (!nullToAbsent || secondaryContact != null) {
      map['secondary_contact'] = Variable<String>(secondaryContact);
    }
    if (!nullToAbsent || insuranceInfo != null) {
      map['insurance_info'] = Variable<String>(insuranceInfo);
    }
    if (!nullToAbsent || additionalNotes != null) {
      map['additional_notes'] = Variable<String>(additionalNotes);
    }
    map['last_updated'] = Variable<DateTime>(lastUpdated);
    map['is_active'] = Variable<bool>(isActive);
    return map;
  }

  EmergencyCardsCompanion toCompanion(bool nullToAbsent) {
    return EmergencyCardsCompanion(
      id: Value(id),
      profileId: Value(profileId),
      criticalAllergies: Value(criticalAllergies),
      currentMedications: Value(currentMedications),
      medicalConditions: Value(medicalConditions),
      emergencyContact: emergencyContact == null && nullToAbsent
          ? const Value.absent()
          : Value(emergencyContact),
      secondaryContact: secondaryContact == null && nullToAbsent
          ? const Value.absent()
          : Value(secondaryContact),
      insuranceInfo: insuranceInfo == null && nullToAbsent
          ? const Value.absent()
          : Value(insuranceInfo),
      additionalNotes: additionalNotes == null && nullToAbsent
          ? const Value.absent()
          : Value(additionalNotes),
      lastUpdated: Value(lastUpdated),
      isActive: Value(isActive),
    );
  }

  factory EmergencyCard.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EmergencyCard(
      id: serializer.fromJson<String>(json['id']),
      profileId: serializer.fromJson<String>(json['profileId']),
      criticalAllergies: serializer.fromJson<String>(json['criticalAllergies']),
      currentMedications: serializer.fromJson<String>(
        json['currentMedications'],
      ),
      medicalConditions: serializer.fromJson<String>(json['medicalConditions']),
      emergencyContact: serializer.fromJson<String?>(json['emergencyContact']),
      secondaryContact: serializer.fromJson<String?>(json['secondaryContact']),
      insuranceInfo: serializer.fromJson<String?>(json['insuranceInfo']),
      additionalNotes: serializer.fromJson<String?>(json['additionalNotes']),
      lastUpdated: serializer.fromJson<DateTime>(json['lastUpdated']),
      isActive: serializer.fromJson<bool>(json['isActive']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'profileId': serializer.toJson<String>(profileId),
      'criticalAllergies': serializer.toJson<String>(criticalAllergies),
      'currentMedications': serializer.toJson<String>(currentMedications),
      'medicalConditions': serializer.toJson<String>(medicalConditions),
      'emergencyContact': serializer.toJson<String?>(emergencyContact),
      'secondaryContact': serializer.toJson<String?>(secondaryContact),
      'insuranceInfo': serializer.toJson<String?>(insuranceInfo),
      'additionalNotes': serializer.toJson<String?>(additionalNotes),
      'lastUpdated': serializer.toJson<DateTime>(lastUpdated),
      'isActive': serializer.toJson<bool>(isActive),
    };
  }

  EmergencyCard copyWith({
    String? id,
    String? profileId,
    String? criticalAllergies,
    String? currentMedications,
    String? medicalConditions,
    Value<String?> emergencyContact = const Value.absent(),
    Value<String?> secondaryContact = const Value.absent(),
    Value<String?> insuranceInfo = const Value.absent(),
    Value<String?> additionalNotes = const Value.absent(),
    DateTime? lastUpdated,
    bool? isActive,
  }) => EmergencyCard(
    id: id ?? this.id,
    profileId: profileId ?? this.profileId,
    criticalAllergies: criticalAllergies ?? this.criticalAllergies,
    currentMedications: currentMedications ?? this.currentMedications,
    medicalConditions: medicalConditions ?? this.medicalConditions,
    emergencyContact: emergencyContact.present
        ? emergencyContact.value
        : this.emergencyContact,
    secondaryContact: secondaryContact.present
        ? secondaryContact.value
        : this.secondaryContact,
    insuranceInfo: insuranceInfo.present
        ? insuranceInfo.value
        : this.insuranceInfo,
    additionalNotes: additionalNotes.present
        ? additionalNotes.value
        : this.additionalNotes,
    lastUpdated: lastUpdated ?? this.lastUpdated,
    isActive: isActive ?? this.isActive,
  );
  EmergencyCard copyWithCompanion(EmergencyCardsCompanion data) {
    return EmergencyCard(
      id: data.id.present ? data.id.value : this.id,
      profileId: data.profileId.present ? data.profileId.value : this.profileId,
      criticalAllergies: data.criticalAllergies.present
          ? data.criticalAllergies.value
          : this.criticalAllergies,
      currentMedications: data.currentMedications.present
          ? data.currentMedications.value
          : this.currentMedications,
      medicalConditions: data.medicalConditions.present
          ? data.medicalConditions.value
          : this.medicalConditions,
      emergencyContact: data.emergencyContact.present
          ? data.emergencyContact.value
          : this.emergencyContact,
      secondaryContact: data.secondaryContact.present
          ? data.secondaryContact.value
          : this.secondaryContact,
      insuranceInfo: data.insuranceInfo.present
          ? data.insuranceInfo.value
          : this.insuranceInfo,
      additionalNotes: data.additionalNotes.present
          ? data.additionalNotes.value
          : this.additionalNotes,
      lastUpdated: data.lastUpdated.present
          ? data.lastUpdated.value
          : this.lastUpdated,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
    );
  }

  @override
  String toString() {
    return (StringBuffer('EmergencyCard(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('criticalAllergies: $criticalAllergies, ')
          ..write('currentMedications: $currentMedications, ')
          ..write('medicalConditions: $medicalConditions, ')
          ..write('emergencyContact: $emergencyContact, ')
          ..write('secondaryContact: $secondaryContact, ')
          ..write('insuranceInfo: $insuranceInfo, ')
          ..write('additionalNotes: $additionalNotes, ')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('isActive: $isActive')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    profileId,
    criticalAllergies,
    currentMedications,
    medicalConditions,
    emergencyContact,
    secondaryContact,
    insuranceInfo,
    additionalNotes,
    lastUpdated,
    isActive,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EmergencyCard &&
          other.id == this.id &&
          other.profileId == this.profileId &&
          other.criticalAllergies == this.criticalAllergies &&
          other.currentMedications == this.currentMedications &&
          other.medicalConditions == this.medicalConditions &&
          other.emergencyContact == this.emergencyContact &&
          other.secondaryContact == this.secondaryContact &&
          other.insuranceInfo == this.insuranceInfo &&
          other.additionalNotes == this.additionalNotes &&
          other.lastUpdated == this.lastUpdated &&
          other.isActive == this.isActive);
}

class EmergencyCardsCompanion extends UpdateCompanion<EmergencyCard> {
  final Value<String> id;
  final Value<String> profileId;
  final Value<String> criticalAllergies;
  final Value<String> currentMedications;
  final Value<String> medicalConditions;
  final Value<String?> emergencyContact;
  final Value<String?> secondaryContact;
  final Value<String?> insuranceInfo;
  final Value<String?> additionalNotes;
  final Value<DateTime> lastUpdated;
  final Value<bool> isActive;
  final Value<int> rowid;
  const EmergencyCardsCompanion({
    this.id = const Value.absent(),
    this.profileId = const Value.absent(),
    this.criticalAllergies = const Value.absent(),
    this.currentMedications = const Value.absent(),
    this.medicalConditions = const Value.absent(),
    this.emergencyContact = const Value.absent(),
    this.secondaryContact = const Value.absent(),
    this.insuranceInfo = const Value.absent(),
    this.additionalNotes = const Value.absent(),
    this.lastUpdated = const Value.absent(),
    this.isActive = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  EmergencyCardsCompanion.insert({
    required String id,
    required String profileId,
    required String criticalAllergies,
    required String currentMedications,
    required String medicalConditions,
    this.emergencyContact = const Value.absent(),
    this.secondaryContact = const Value.absent(),
    this.insuranceInfo = const Value.absent(),
    this.additionalNotes = const Value.absent(),
    this.lastUpdated = const Value.absent(),
    this.isActive = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       profileId = Value(profileId),
       criticalAllergies = Value(criticalAllergies),
       currentMedications = Value(currentMedications),
       medicalConditions = Value(medicalConditions);
  static Insertable<EmergencyCard> custom({
    Expression<String>? id,
    Expression<String>? profileId,
    Expression<String>? criticalAllergies,
    Expression<String>? currentMedications,
    Expression<String>? medicalConditions,
    Expression<String>? emergencyContact,
    Expression<String>? secondaryContact,
    Expression<String>? insuranceInfo,
    Expression<String>? additionalNotes,
    Expression<DateTime>? lastUpdated,
    Expression<bool>? isActive,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (profileId != null) 'profile_id': profileId,
      if (criticalAllergies != null) 'critical_allergies': criticalAllergies,
      if (currentMedications != null) 'current_medications': currentMedications,
      if (medicalConditions != null) 'medical_conditions': medicalConditions,
      if (emergencyContact != null) 'emergency_contact': emergencyContact,
      if (secondaryContact != null) 'secondary_contact': secondaryContact,
      if (insuranceInfo != null) 'insurance_info': insuranceInfo,
      if (additionalNotes != null) 'additional_notes': additionalNotes,
      if (lastUpdated != null) 'last_updated': lastUpdated,
      if (isActive != null) 'is_active': isActive,
      if (rowid != null) 'rowid': rowid,
    });
  }

  EmergencyCardsCompanion copyWith({
    Value<String>? id,
    Value<String>? profileId,
    Value<String>? criticalAllergies,
    Value<String>? currentMedications,
    Value<String>? medicalConditions,
    Value<String?>? emergencyContact,
    Value<String?>? secondaryContact,
    Value<String?>? insuranceInfo,
    Value<String?>? additionalNotes,
    Value<DateTime>? lastUpdated,
    Value<bool>? isActive,
    Value<int>? rowid,
  }) {
    return EmergencyCardsCompanion(
      id: id ?? this.id,
      profileId: profileId ?? this.profileId,
      criticalAllergies: criticalAllergies ?? this.criticalAllergies,
      currentMedications: currentMedications ?? this.currentMedications,
      medicalConditions: medicalConditions ?? this.medicalConditions,
      emergencyContact: emergencyContact ?? this.emergencyContact,
      secondaryContact: secondaryContact ?? this.secondaryContact,
      insuranceInfo: insuranceInfo ?? this.insuranceInfo,
      additionalNotes: additionalNotes ?? this.additionalNotes,
      lastUpdated: lastUpdated ?? this.lastUpdated,
      isActive: isActive ?? this.isActive,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (profileId.present) {
      map['profile_id'] = Variable<String>(profileId.value);
    }
    if (criticalAllergies.present) {
      map['critical_allergies'] = Variable<String>(criticalAllergies.value);
    }
    if (currentMedications.present) {
      map['current_medications'] = Variable<String>(currentMedications.value);
    }
    if (medicalConditions.present) {
      map['medical_conditions'] = Variable<String>(medicalConditions.value);
    }
    if (emergencyContact.present) {
      map['emergency_contact'] = Variable<String>(emergencyContact.value);
    }
    if (secondaryContact.present) {
      map['secondary_contact'] = Variable<String>(secondaryContact.value);
    }
    if (insuranceInfo.present) {
      map['insurance_info'] = Variable<String>(insuranceInfo.value);
    }
    if (additionalNotes.present) {
      map['additional_notes'] = Variable<String>(additionalNotes.value);
    }
    if (lastUpdated.present) {
      map['last_updated'] = Variable<DateTime>(lastUpdated.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EmergencyCardsCompanion(')
          ..write('id: $id, ')
          ..write('profileId: $profileId, ')
          ..write('criticalAllergies: $criticalAllergies, ')
          ..write('currentMedications: $currentMedications, ')
          ..write('medicalConditions: $medicalConditions, ')
          ..write('emergencyContact: $emergencyContact, ')
          ..write('secondaryContact: $secondaryContact, ')
          ..write('insuranceInfo: $insuranceInfo, ')
          ..write('additionalNotes: $additionalNotes, ')
          ..write('lastUpdated: $lastUpdated, ')
          ..write('isActive: $isActive, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $RecordTagsTable extends RecordTags
    with TableInfo<$RecordTagsTable, RecordTag> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $RecordTagsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _recordIdMeta = const VerificationMeta(
    'recordId',
  );
  @override
  late final GeneratedColumn<String> recordId = GeneratedColumn<String>(
    'record_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _tagIdMeta = const VerificationMeta('tagId');
  @override
  late final GeneratedColumn<String> tagId = GeneratedColumn<String>(
    'tag_id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  @override
  List<GeneratedColumn> get $columns => [recordId, tagId, createdAt];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'record_tags';
  @override
  VerificationContext validateIntegrity(
    Insertable<RecordTag> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('record_id')) {
      context.handle(
        _recordIdMeta,
        recordId.isAcceptableOrUnknown(data['record_id']!, _recordIdMeta),
      );
    } else if (isInserting) {
      context.missing(_recordIdMeta);
    }
    if (data.containsKey('tag_id')) {
      context.handle(
        _tagIdMeta,
        tagId.isAcceptableOrUnknown(data['tag_id']!, _tagIdMeta),
      );
    } else if (isInserting) {
      context.missing(_tagIdMeta);
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {recordId, tagId};
  @override
  RecordTag map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return RecordTag(
      recordId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}record_id'],
      )!,
      tagId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tag_id'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
    );
  }

  @override
  $RecordTagsTable createAlias(String alias) {
    return $RecordTagsTable(attachedDatabase, alias);
  }
}

class RecordTag extends DataClass implements Insertable<RecordTag> {
  final String recordId;
  final String tagId;
  final DateTime createdAt;
  const RecordTag({
    required this.recordId,
    required this.tagId,
    required this.createdAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['record_id'] = Variable<String>(recordId);
    map['tag_id'] = Variable<String>(tagId);
    map['created_at'] = Variable<DateTime>(createdAt);
    return map;
  }

  RecordTagsCompanion toCompanion(bool nullToAbsent) {
    return RecordTagsCompanion(
      recordId: Value(recordId),
      tagId: Value(tagId),
      createdAt: Value(createdAt),
    );
  }

  factory RecordTag.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return RecordTag(
      recordId: serializer.fromJson<String>(json['recordId']),
      tagId: serializer.fromJson<String>(json['tagId']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'recordId': serializer.toJson<String>(recordId),
      'tagId': serializer.toJson<String>(tagId),
      'createdAt': serializer.toJson<DateTime>(createdAt),
    };
  }

  RecordTag copyWith({String? recordId, String? tagId, DateTime? createdAt}) =>
      RecordTag(
        recordId: recordId ?? this.recordId,
        tagId: tagId ?? this.tagId,
        createdAt: createdAt ?? this.createdAt,
      );
  RecordTag copyWithCompanion(RecordTagsCompanion data) {
    return RecordTag(
      recordId: data.recordId.present ? data.recordId.value : this.recordId,
      tagId: data.tagId.present ? data.tagId.value : this.tagId,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('RecordTag(')
          ..write('recordId: $recordId, ')
          ..write('tagId: $tagId, ')
          ..write('createdAt: $createdAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(recordId, tagId, createdAt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is RecordTag &&
          other.recordId == this.recordId &&
          other.tagId == this.tagId &&
          other.createdAt == this.createdAt);
}

class RecordTagsCompanion extends UpdateCompanion<RecordTag> {
  final Value<String> recordId;
  final Value<String> tagId;
  final Value<DateTime> createdAt;
  final Value<int> rowid;
  const RecordTagsCompanion({
    this.recordId = const Value.absent(),
    this.tagId = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  RecordTagsCompanion.insert({
    required String recordId,
    required String tagId,
    this.createdAt = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : recordId = Value(recordId),
       tagId = Value(tagId);
  static Insertable<RecordTag> custom({
    Expression<String>? recordId,
    Expression<String>? tagId,
    Expression<DateTime>? createdAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (recordId != null) 'record_id': recordId,
      if (tagId != null) 'tag_id': tagId,
      if (createdAt != null) 'created_at': createdAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  RecordTagsCompanion copyWith({
    Value<String>? recordId,
    Value<String>? tagId,
    Value<DateTime>? createdAt,
    Value<int>? rowid,
  }) {
    return RecordTagsCompanion(
      recordId: recordId ?? this.recordId,
      tagId: tagId ?? this.tagId,
      createdAt: createdAt ?? this.createdAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (recordId.present) {
      map['record_id'] = Variable<String>(recordId.value);
    }
    if (tagId.present) {
      map['tag_id'] = Variable<String>(tagId.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('RecordTagsCompanion(')
          ..write('recordId: $recordId, ')
          ..write('tagId: $tagId, ')
          ..write('createdAt: $createdAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class $SearchHistoryTable extends SearchHistory
    with TableInfo<$SearchHistoryTable, SearchHistoryData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $SearchHistoryTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'id',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _searchTermMeta = const VerificationMeta(
    'searchTerm',
  );
  @override
  late final GeneratedColumn<String> searchTerm = GeneratedColumn<String>(
    'search_term',
    aliasedName,
    false,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 1,
      maxTextLength: 200,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _searchTypeMeta = const VerificationMeta(
    'searchType',
  );
  @override
  late final GeneratedColumn<String> searchType = GeneratedColumn<String>(
    'search_type',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
  );
  static const VerificationMeta _searchCountMeta = const VerificationMeta(
    'searchCount',
  );
  @override
  late final GeneratedColumn<int> searchCount = GeneratedColumn<int>(
    'search_count',
    aliasedName,
    false,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    defaultValue: const Constant(1),
  );
  static const VerificationMeta _lastSearchedMeta = const VerificationMeta(
    'lastSearched',
  );
  @override
  late final GeneratedColumn<DateTime> lastSearched = GeneratedColumn<DateTime>(
    'last_searched',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  @override
  late final GeneratedColumn<DateTime> createdAt = GeneratedColumn<DateTime>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
    defaultValue: currentDateAndTime,
  );
  static const VerificationMeta _isActiveMeta = const VerificationMeta(
    'isActive',
  );
  @override
  late final GeneratedColumn<bool> isActive = GeneratedColumn<bool>(
    'is_active',
    aliasedName,
    false,
    type: DriftSqlType.bool,
    requiredDuringInsert: false,
    defaultConstraints: GeneratedColumn.constraintIsAlways(
      'CHECK ("is_active" IN (0, 1))',
    ),
    defaultValue: const Constant(true),
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    searchTerm,
    searchType,
    searchCount,
    lastSearched,
    createdAt,
    isActive,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'search_history';
  @override
  VerificationContext validateIntegrity(
    Insertable<SearchHistoryData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    } else if (isInserting) {
      context.missing(_idMeta);
    }
    if (data.containsKey('search_term')) {
      context.handle(
        _searchTermMeta,
        searchTerm.isAcceptableOrUnknown(data['search_term']!, _searchTermMeta),
      );
    } else if (isInserting) {
      context.missing(_searchTermMeta);
    }
    if (data.containsKey('search_type')) {
      context.handle(
        _searchTypeMeta,
        searchType.isAcceptableOrUnknown(data['search_type']!, _searchTypeMeta),
      );
    } else if (isInserting) {
      context.missing(_searchTypeMeta);
    }
    if (data.containsKey('search_count')) {
      context.handle(
        _searchCountMeta,
        searchCount.isAcceptableOrUnknown(
          data['search_count']!,
          _searchCountMeta,
        ),
      );
    }
    if (data.containsKey('last_searched')) {
      context.handle(
        _lastSearchedMeta,
        lastSearched.isAcceptableOrUnknown(
          data['last_searched']!,
          _lastSearchedMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    }
    if (data.containsKey('is_active')) {
      context.handle(
        _isActiveMeta,
        isActive.isAcceptableOrUnknown(data['is_active']!, _isActiveMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  SearchHistoryData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return SearchHistoryData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id'],
      )!,
      searchTerm: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}search_term'],
      )!,
      searchType: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}search_type'],
      )!,
      searchCount: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}search_count'],
      )!,
      lastSearched: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}last_searched'],
      )!,
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}created_at'],
      )!,
      isActive: attachedDatabase.typeMapping.read(
        DriftSqlType.bool,
        data['${effectivePrefix}is_active'],
      )!,
    );
  }

  @override
  $SearchHistoryTable createAlias(String alias) {
    return $SearchHistoryTable(attachedDatabase, alias);
  }
}

class SearchHistoryData extends DataClass
    implements Insertable<SearchHistoryData> {
  final String id;
  final String searchTerm;
  final String searchType;
  final int searchCount;
  final DateTime lastSearched;
  final DateTime createdAt;
  final bool isActive;
  const SearchHistoryData({
    required this.id,
    required this.searchTerm,
    required this.searchType,
    required this.searchCount,
    required this.lastSearched,
    required this.createdAt,
    required this.isActive,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['id'] = Variable<String>(id);
    map['search_term'] = Variable<String>(searchTerm);
    map['search_type'] = Variable<String>(searchType);
    map['search_count'] = Variable<int>(searchCount);
    map['last_searched'] = Variable<DateTime>(lastSearched);
    map['created_at'] = Variable<DateTime>(createdAt);
    map['is_active'] = Variable<bool>(isActive);
    return map;
  }

  SearchHistoryCompanion toCompanion(bool nullToAbsent) {
    return SearchHistoryCompanion(
      id: Value(id),
      searchTerm: Value(searchTerm),
      searchType: Value(searchType),
      searchCount: Value(searchCount),
      lastSearched: Value(lastSearched),
      createdAt: Value(createdAt),
      isActive: Value(isActive),
    );
  }

  factory SearchHistoryData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return SearchHistoryData(
      id: serializer.fromJson<String>(json['id']),
      searchTerm: serializer.fromJson<String>(json['searchTerm']),
      searchType: serializer.fromJson<String>(json['searchType']),
      searchCount: serializer.fromJson<int>(json['searchCount']),
      lastSearched: serializer.fromJson<DateTime>(json['lastSearched']),
      createdAt: serializer.fromJson<DateTime>(json['createdAt']),
      isActive: serializer.fromJson<bool>(json['isActive']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<String>(id),
      'searchTerm': serializer.toJson<String>(searchTerm),
      'searchType': serializer.toJson<String>(searchType),
      'searchCount': serializer.toJson<int>(searchCount),
      'lastSearched': serializer.toJson<DateTime>(lastSearched),
      'createdAt': serializer.toJson<DateTime>(createdAt),
      'isActive': serializer.toJson<bool>(isActive),
    };
  }

  SearchHistoryData copyWith({
    String? id,
    String? searchTerm,
    String? searchType,
    int? searchCount,
    DateTime? lastSearched,
    DateTime? createdAt,
    bool? isActive,
  }) => SearchHistoryData(
    id: id ?? this.id,
    searchTerm: searchTerm ?? this.searchTerm,
    searchType: searchType ?? this.searchType,
    searchCount: searchCount ?? this.searchCount,
    lastSearched: lastSearched ?? this.lastSearched,
    createdAt: createdAt ?? this.createdAt,
    isActive: isActive ?? this.isActive,
  );
  SearchHistoryData copyWithCompanion(SearchHistoryCompanion data) {
    return SearchHistoryData(
      id: data.id.present ? data.id.value : this.id,
      searchTerm: data.searchTerm.present
          ? data.searchTerm.value
          : this.searchTerm,
      searchType: data.searchType.present
          ? data.searchType.value
          : this.searchType,
      searchCount: data.searchCount.present
          ? data.searchCount.value
          : this.searchCount,
      lastSearched: data.lastSearched.present
          ? data.lastSearched.value
          : this.lastSearched,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      isActive: data.isActive.present ? data.isActive.value : this.isActive,
    );
  }

  @override
  String toString() {
    return (StringBuffer('SearchHistoryData(')
          ..write('id: $id, ')
          ..write('searchTerm: $searchTerm, ')
          ..write('searchType: $searchType, ')
          ..write('searchCount: $searchCount, ')
          ..write('lastSearched: $lastSearched, ')
          ..write('createdAt: $createdAt, ')
          ..write('isActive: $isActive')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    searchTerm,
    searchType,
    searchCount,
    lastSearched,
    createdAt,
    isActive,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SearchHistoryData &&
          other.id == this.id &&
          other.searchTerm == this.searchTerm &&
          other.searchType == this.searchType &&
          other.searchCount == this.searchCount &&
          other.lastSearched == this.lastSearched &&
          other.createdAt == this.createdAt &&
          other.isActive == this.isActive);
}

class SearchHistoryCompanion extends UpdateCompanion<SearchHistoryData> {
  final Value<String> id;
  final Value<String> searchTerm;
  final Value<String> searchType;
  final Value<int> searchCount;
  final Value<DateTime> lastSearched;
  final Value<DateTime> createdAt;
  final Value<bool> isActive;
  final Value<int> rowid;
  const SearchHistoryCompanion({
    this.id = const Value.absent(),
    this.searchTerm = const Value.absent(),
    this.searchType = const Value.absent(),
    this.searchCount = const Value.absent(),
    this.lastSearched = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  SearchHistoryCompanion.insert({
    required String id,
    required String searchTerm,
    required String searchType,
    this.searchCount = const Value.absent(),
    this.lastSearched = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.isActive = const Value.absent(),
    this.rowid = const Value.absent(),
  }) : id = Value(id),
       searchTerm = Value(searchTerm),
       searchType = Value(searchType);
  static Insertable<SearchHistoryData> custom({
    Expression<String>? id,
    Expression<String>? searchTerm,
    Expression<String>? searchType,
    Expression<int>? searchCount,
    Expression<DateTime>? lastSearched,
    Expression<DateTime>? createdAt,
    Expression<bool>? isActive,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (searchTerm != null) 'search_term': searchTerm,
      if (searchType != null) 'search_type': searchType,
      if (searchCount != null) 'search_count': searchCount,
      if (lastSearched != null) 'last_searched': lastSearched,
      if (createdAt != null) 'created_at': createdAt,
      if (isActive != null) 'is_active': isActive,
      if (rowid != null) 'rowid': rowid,
    });
  }

  SearchHistoryCompanion copyWith({
    Value<String>? id,
    Value<String>? searchTerm,
    Value<String>? searchType,
    Value<int>? searchCount,
    Value<DateTime>? lastSearched,
    Value<DateTime>? createdAt,
    Value<bool>? isActive,
    Value<int>? rowid,
  }) {
    return SearchHistoryCompanion(
      id: id ?? this.id,
      searchTerm: searchTerm ?? this.searchTerm,
      searchType: searchType ?? this.searchType,
      searchCount: searchCount ?? this.searchCount,
      lastSearched: lastSearched ?? this.lastSearched,
      createdAt: createdAt ?? this.createdAt,
      isActive: isActive ?? this.isActive,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<String>(id.value);
    }
    if (searchTerm.present) {
      map['search_term'] = Variable<String>(searchTerm.value);
    }
    if (searchType.present) {
      map['search_type'] = Variable<String>(searchType.value);
    }
    if (searchCount.present) {
      map['search_count'] = Variable<int>(searchCount.value);
    }
    if (lastSearched.present) {
      map['last_searched'] = Variable<DateTime>(lastSearched.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<DateTime>(createdAt.value);
    }
    if (isActive.present) {
      map['is_active'] = Variable<bool>(isActive.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SearchHistoryCompanion(')
          ..write('id: $id, ')
          ..write('searchTerm: $searchTerm, ')
          ..write('searchType: $searchType, ')
          ..write('searchCount: $searchCount, ')
          ..write('lastSearched: $lastSearched, ')
          ..write('createdAt: $createdAt, ')
          ..write('isActive: $isActive, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(QueryExecutor e) : super(e);
  $AppDatabaseManager get managers => $AppDatabaseManager(this);
  late final $FamilyMemberProfilesTable familyMemberProfiles =
      $FamilyMemberProfilesTable(this);
  late final $MedicalRecordsTable medicalRecords = $MedicalRecordsTable(this);
  late final $PrescriptionsTable prescriptions = $PrescriptionsTable(this);
  late final $LabReportsTable labReports = $LabReportsTable(this);
  late final $MedicationsTable medications = $MedicationsTable(this);
  late final $VaccinationsTable vaccinations = $VaccinationsTable(this);
  late final $AllergiesTable allergies = $AllergiesTable(this);
  late final $ChronicConditionsTable chronicConditions =
      $ChronicConditionsTable(this);
  late final $SurgicalRecordsTable surgicalRecords = $SurgicalRecordsTable(
    this,
  );
  late final $RadiologyRecordsTable radiologyRecords = $RadiologyRecordsTable(
    this,
  );
  late final $PathologyRecordsTable pathologyRecords = $PathologyRecordsTable(
    this,
  );
  late final $DischargeSummariesTable dischargeSummaries =
      $DischargeSummariesTable(this);
  late final $HospitalAdmissionsTable hospitalAdmissions =
      $HospitalAdmissionsTable(this);
  late final $DentalRecordsTable dentalRecords = $DentalRecordsTable(this);
  late final $MentalHealthRecordsTable mentalHealthRecords =
      $MentalHealthRecordsTable(this);
  late final $GeneralRecordsTable generalRecords = $GeneralRecordsTable(this);
  late final $TagsTable tags = $TagsTable(this);
  late final $AttachmentsTable attachments = $AttachmentsTable(this);
  late final $RemindersTable reminders = $RemindersTable(this);
  late final $EmergencyCardsTable emergencyCards = $EmergencyCardsTable(this);
  late final $RecordTagsTable recordTags = $RecordTagsTable(this);
  late final $SearchHistoryTable searchHistory = $SearchHistoryTable(this);
  @override
  Iterable<TableInfo<Table, Object?>> get allTables =>
      allSchemaEntities.whereType<TableInfo<Table, Object?>>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
    familyMemberProfiles,
    medicalRecords,
    prescriptions,
    labReports,
    medications,
    vaccinations,
    allergies,
    chronicConditions,
    surgicalRecords,
    radiologyRecords,
    pathologyRecords,
    dischargeSummaries,
    hospitalAdmissions,
    dentalRecords,
    mentalHealthRecords,
    generalRecords,
    tags,
    attachments,
    reminders,
    emergencyCards,
    recordTags,
    searchHistory,
  ];
}

typedef $$FamilyMemberProfilesTableCreateCompanionBuilder =
    FamilyMemberProfilesCompanion Function({
      required String id,
      required String firstName,
      required String lastName,
      Value<String?> middleName,
      required DateTime dateOfBirth,
      required String gender,
      Value<String?> bloodType,
      Value<double?> height,
      Value<double?> weight,
      Value<String?> emergencyContact,
      Value<String?> insuranceInfo,
      Value<String?> profileImagePath,
      Value<String?> relationship,
      Value<String?> phone,
      Value<String?> email,
      Value<String?> address,
      Value<String?> medicalConditions,
      Value<String?> allergies,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<int> rowid,
    });
typedef $$FamilyMemberProfilesTableUpdateCompanionBuilder =
    FamilyMemberProfilesCompanion Function({
      Value<String> id,
      Value<String> firstName,
      Value<String> lastName,
      Value<String?> middleName,
      Value<DateTime> dateOfBirth,
      Value<String> gender,
      Value<String?> bloodType,
      Value<double?> height,
      Value<double?> weight,
      Value<String?> emergencyContact,
      Value<String?> insuranceInfo,
      Value<String?> profileImagePath,
      Value<String?> relationship,
      Value<String?> phone,
      Value<String?> email,
      Value<String?> address,
      Value<String?> medicalConditions,
      Value<String?> allergies,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<int> rowid,
    });

class $$FamilyMemberProfilesTableFilterComposer
    extends Composer<_$AppDatabase, $FamilyMemberProfilesTable> {
  $$FamilyMemberProfilesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get firstName => $composableBuilder(
    column: $table.firstName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get lastName => $composableBuilder(
    column: $table.lastName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get middleName => $composableBuilder(
    column: $table.middleName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dateOfBirth => $composableBuilder(
    column: $table.dateOfBirth,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get gender => $composableBuilder(
    column: $table.gender,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bloodType => $composableBuilder(
    column: $table.bloodType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get height => $composableBuilder(
    column: $table.height,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get weight => $composableBuilder(
    column: $table.weight,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get insuranceInfo => $composableBuilder(
    column: $table.insuranceInfo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileImagePath => $composableBuilder(
    column: $table.profileImagePath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get relationship => $composableBuilder(
    column: $table.relationship,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get phone => $composableBuilder(
    column: $table.phone,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get address => $composableBuilder(
    column: $table.address,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get medicalConditions => $composableBuilder(
    column: $table.medicalConditions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get allergies => $composableBuilder(
    column: $table.allergies,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );
}

class $$FamilyMemberProfilesTableOrderingComposer
    extends Composer<_$AppDatabase, $FamilyMemberProfilesTable> {
  $$FamilyMemberProfilesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get firstName => $composableBuilder(
    column: $table.firstName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get lastName => $composableBuilder(
    column: $table.lastName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get middleName => $composableBuilder(
    column: $table.middleName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dateOfBirth => $composableBuilder(
    column: $table.dateOfBirth,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get gender => $composableBuilder(
    column: $table.gender,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bloodType => $composableBuilder(
    column: $table.bloodType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get height => $composableBuilder(
    column: $table.height,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get weight => $composableBuilder(
    column: $table.weight,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get insuranceInfo => $composableBuilder(
    column: $table.insuranceInfo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileImagePath => $composableBuilder(
    column: $table.profileImagePath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get relationship => $composableBuilder(
    column: $table.relationship,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get phone => $composableBuilder(
    column: $table.phone,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get address => $composableBuilder(
    column: $table.address,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get medicalConditions => $composableBuilder(
    column: $table.medicalConditions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get allergies => $composableBuilder(
    column: $table.allergies,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$FamilyMemberProfilesTableAnnotationComposer
    extends Composer<_$AppDatabase, $FamilyMemberProfilesTable> {
  $$FamilyMemberProfilesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get firstName =>
      $composableBuilder(column: $table.firstName, builder: (column) => column);

  GeneratedColumn<String> get lastName =>
      $composableBuilder(column: $table.lastName, builder: (column) => column);

  GeneratedColumn<String> get middleName => $composableBuilder(
    column: $table.middleName,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dateOfBirth => $composableBuilder(
    column: $table.dateOfBirth,
    builder: (column) => column,
  );

  GeneratedColumn<String> get gender =>
      $composableBuilder(column: $table.gender, builder: (column) => column);

  GeneratedColumn<String> get bloodType =>
      $composableBuilder(column: $table.bloodType, builder: (column) => column);

  GeneratedColumn<double> get height =>
      $composableBuilder(column: $table.height, builder: (column) => column);

  GeneratedColumn<double> get weight =>
      $composableBuilder(column: $table.weight, builder: (column) => column);

  GeneratedColumn<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => column,
  );

  GeneratedColumn<String> get insuranceInfo => $composableBuilder(
    column: $table.insuranceInfo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get profileImagePath => $composableBuilder(
    column: $table.profileImagePath,
    builder: (column) => column,
  );

  GeneratedColumn<String> get relationship => $composableBuilder(
    column: $table.relationship,
    builder: (column) => column,
  );

  GeneratedColumn<String> get phone =>
      $composableBuilder(column: $table.phone, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get address =>
      $composableBuilder(column: $table.address, builder: (column) => column);

  GeneratedColumn<String> get medicalConditions => $composableBuilder(
    column: $table.medicalConditions,
    builder: (column) => column,
  );

  GeneratedColumn<String> get allergies =>
      $composableBuilder(column: $table.allergies, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);
}

class $$FamilyMemberProfilesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $FamilyMemberProfilesTable,
          FamilyMemberProfile,
          $$FamilyMemberProfilesTableFilterComposer,
          $$FamilyMemberProfilesTableOrderingComposer,
          $$FamilyMemberProfilesTableAnnotationComposer,
          $$FamilyMemberProfilesTableCreateCompanionBuilder,
          $$FamilyMemberProfilesTableUpdateCompanionBuilder,
          (
            FamilyMemberProfile,
            BaseReferences<
              _$AppDatabase,
              $FamilyMemberProfilesTable,
              FamilyMemberProfile
            >,
          ),
          FamilyMemberProfile,
          PrefetchHooks Function()
        > {
  $$FamilyMemberProfilesTableTableManager(
    _$AppDatabase db,
    $FamilyMemberProfilesTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$FamilyMemberProfilesTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$FamilyMemberProfilesTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer: () =>
              $$FamilyMemberProfilesTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> firstName = const Value.absent(),
                Value<String> lastName = const Value.absent(),
                Value<String?> middleName = const Value.absent(),
                Value<DateTime> dateOfBirth = const Value.absent(),
                Value<String> gender = const Value.absent(),
                Value<String?> bloodType = const Value.absent(),
                Value<double?> height = const Value.absent(),
                Value<double?> weight = const Value.absent(),
                Value<String?> emergencyContact = const Value.absent(),
                Value<String?> insuranceInfo = const Value.absent(),
                Value<String?> profileImagePath = const Value.absent(),
                Value<String?> relationship = const Value.absent(),
                Value<String?> phone = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> address = const Value.absent(),
                Value<String?> medicalConditions = const Value.absent(),
                Value<String?> allergies = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => FamilyMemberProfilesCompanion(
                id: id,
                firstName: firstName,
                lastName: lastName,
                middleName: middleName,
                dateOfBirth: dateOfBirth,
                gender: gender,
                bloodType: bloodType,
                height: height,
                weight: weight,
                emergencyContact: emergencyContact,
                insuranceInfo: insuranceInfo,
                profileImagePath: profileImagePath,
                relationship: relationship,
                phone: phone,
                email: email,
                address: address,
                medicalConditions: medicalConditions,
                allergies: allergies,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String firstName,
                required String lastName,
                Value<String?> middleName = const Value.absent(),
                required DateTime dateOfBirth,
                required String gender,
                Value<String?> bloodType = const Value.absent(),
                Value<double?> height = const Value.absent(),
                Value<double?> weight = const Value.absent(),
                Value<String?> emergencyContact = const Value.absent(),
                Value<String?> insuranceInfo = const Value.absent(),
                Value<String?> profileImagePath = const Value.absent(),
                Value<String?> relationship = const Value.absent(),
                Value<String?> phone = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> address = const Value.absent(),
                Value<String?> medicalConditions = const Value.absent(),
                Value<String?> allergies = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => FamilyMemberProfilesCompanion.insert(
                id: id,
                firstName: firstName,
                lastName: lastName,
                middleName: middleName,
                dateOfBirth: dateOfBirth,
                gender: gender,
                bloodType: bloodType,
                height: height,
                weight: weight,
                emergencyContact: emergencyContact,
                insuranceInfo: insuranceInfo,
                profileImagePath: profileImagePath,
                relationship: relationship,
                phone: phone,
                email: email,
                address: address,
                medicalConditions: medicalConditions,
                allergies: allergies,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$FamilyMemberProfilesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $FamilyMemberProfilesTable,
      FamilyMemberProfile,
      $$FamilyMemberProfilesTableFilterComposer,
      $$FamilyMemberProfilesTableOrderingComposer,
      $$FamilyMemberProfilesTableAnnotationComposer,
      $$FamilyMemberProfilesTableCreateCompanionBuilder,
      $$FamilyMemberProfilesTableUpdateCompanionBuilder,
      (
        FamilyMemberProfile,
        BaseReferences<
          _$AppDatabase,
          $FamilyMemberProfilesTable,
          FamilyMemberProfile
        >,
      ),
      FamilyMemberProfile,
      PrefetchHooks Function()
    >;
typedef $$MedicalRecordsTableCreateCompanionBuilder =
    MedicalRecordsCompanion Function({
      required String id,
      required String profileId,
      required String recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<int> rowid,
    });
typedef $$MedicalRecordsTableUpdateCompanionBuilder =
    MedicalRecordsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<int> rowid,
    });

class $$MedicalRecordsTableFilterComposer
    extends Composer<_$AppDatabase, $MedicalRecordsTable> {
  $$MedicalRecordsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );
}

class $$MedicalRecordsTableOrderingComposer
    extends Composer<_$AppDatabase, $MedicalRecordsTable> {
  $$MedicalRecordsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$MedicalRecordsTableAnnotationComposer
    extends Composer<_$AppDatabase, $MedicalRecordsTable> {
  $$MedicalRecordsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);
}

class $$MedicalRecordsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $MedicalRecordsTable,
          MedicalRecord,
          $$MedicalRecordsTableFilterComposer,
          $$MedicalRecordsTableOrderingComposer,
          $$MedicalRecordsTableAnnotationComposer,
          $$MedicalRecordsTableCreateCompanionBuilder,
          $$MedicalRecordsTableUpdateCompanionBuilder,
          (
            MedicalRecord,
            BaseReferences<_$AppDatabase, $MedicalRecordsTable, MedicalRecord>,
          ),
          MedicalRecord,
          PrefetchHooks Function()
        > {
  $$MedicalRecordsTableTableManager(
    _$AppDatabase db,
    $MedicalRecordsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MedicalRecordsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$MedicalRecordsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$MedicalRecordsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => MedicalRecordsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                required String recordType,
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => MedicalRecordsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$MedicalRecordsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $MedicalRecordsTable,
      MedicalRecord,
      $$MedicalRecordsTableFilterComposer,
      $$MedicalRecordsTableOrderingComposer,
      $$MedicalRecordsTableAnnotationComposer,
      $$MedicalRecordsTableCreateCompanionBuilder,
      $$MedicalRecordsTableUpdateCompanionBuilder,
      (
        MedicalRecord,
        BaseReferences<_$AppDatabase, $MedicalRecordsTable, MedicalRecord>,
      ),
      MedicalRecord,
      PrefetchHooks Function()
    >;
typedef $$PrescriptionsTableCreateCompanionBuilder =
    PrescriptionsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String prescriptionType,
      Value<String?> medicationName,
      Value<String?> dosage,
      Value<String?> frequency,
      Value<String?> instructions,
      Value<String?> prescribingDoctor,
      Value<String?> pharmacy,
      Value<DateTime?> startDate,
      Value<DateTime?> endDate,
      Value<int?> refillsRemaining,
      Value<bool> isPrescriptionActive,
      Value<DateTime?> appointmentDate,
      Value<String?> appointmentTime,
      Value<String?> doctorName,
      Value<String?> specialty,
      Value<String?> clinicName,
      Value<String?> clinicAddress,
      Value<String?> appointmentType,
      Value<String?> reasonForVisit,
      Value<String?> appointmentStatus,
      Value<String?> appointmentNotes,
      Value<bool> reminderSet,
      Value<int?> reminderMinutes,
      Value<int> rowid,
    });
typedef $$PrescriptionsTableUpdateCompanionBuilder =
    PrescriptionsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> prescriptionType,
      Value<String?> medicationName,
      Value<String?> dosage,
      Value<String?> frequency,
      Value<String?> instructions,
      Value<String?> prescribingDoctor,
      Value<String?> pharmacy,
      Value<DateTime?> startDate,
      Value<DateTime?> endDate,
      Value<int?> refillsRemaining,
      Value<bool> isPrescriptionActive,
      Value<DateTime?> appointmentDate,
      Value<String?> appointmentTime,
      Value<String?> doctorName,
      Value<String?> specialty,
      Value<String?> clinicName,
      Value<String?> clinicAddress,
      Value<String?> appointmentType,
      Value<String?> reasonForVisit,
      Value<String?> appointmentStatus,
      Value<String?> appointmentNotes,
      Value<bool> reminderSet,
      Value<int?> reminderMinutes,
      Value<int> rowid,
    });

class $$PrescriptionsTableFilterComposer
    extends Composer<_$AppDatabase, $PrescriptionsTable> {
  $$PrescriptionsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get prescriptionType => $composableBuilder(
    column: $table.prescriptionType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get medicationName => $composableBuilder(
    column: $table.medicationName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dosage => $composableBuilder(
    column: $table.dosage,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get frequency => $composableBuilder(
    column: $table.frequency,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get instructions => $composableBuilder(
    column: $table.instructions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get prescribingDoctor => $composableBuilder(
    column: $table.prescribingDoctor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get pharmacy => $composableBuilder(
    column: $table.pharmacy,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get startDate => $composableBuilder(
    column: $table.startDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get endDate => $composableBuilder(
    column: $table.endDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get refillsRemaining => $composableBuilder(
    column: $table.refillsRemaining,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isPrescriptionActive => $composableBuilder(
    column: $table.isPrescriptionActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get appointmentDate => $composableBuilder(
    column: $table.appointmentDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get appointmentTime => $composableBuilder(
    column: $table.appointmentTime,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get doctorName => $composableBuilder(
    column: $table.doctorName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get specialty => $composableBuilder(
    column: $table.specialty,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get clinicName => $composableBuilder(
    column: $table.clinicName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get clinicAddress => $composableBuilder(
    column: $table.clinicAddress,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get appointmentType => $composableBuilder(
    column: $table.appointmentType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reasonForVisit => $composableBuilder(
    column: $table.reasonForVisit,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get appointmentStatus => $composableBuilder(
    column: $table.appointmentStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get appointmentNotes => $composableBuilder(
    column: $table.appointmentNotes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get reminderSet => $composableBuilder(
    column: $table.reminderSet,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get reminderMinutes => $composableBuilder(
    column: $table.reminderMinutes,
    builder: (column) => ColumnFilters(column),
  );
}

class $$PrescriptionsTableOrderingComposer
    extends Composer<_$AppDatabase, $PrescriptionsTable> {
  $$PrescriptionsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get prescriptionType => $composableBuilder(
    column: $table.prescriptionType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get medicationName => $composableBuilder(
    column: $table.medicationName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dosage => $composableBuilder(
    column: $table.dosage,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get frequency => $composableBuilder(
    column: $table.frequency,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get instructions => $composableBuilder(
    column: $table.instructions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get prescribingDoctor => $composableBuilder(
    column: $table.prescribingDoctor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get pharmacy => $composableBuilder(
    column: $table.pharmacy,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get startDate => $composableBuilder(
    column: $table.startDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get endDate => $composableBuilder(
    column: $table.endDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get refillsRemaining => $composableBuilder(
    column: $table.refillsRemaining,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isPrescriptionActive => $composableBuilder(
    column: $table.isPrescriptionActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get appointmentDate => $composableBuilder(
    column: $table.appointmentDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get appointmentTime => $composableBuilder(
    column: $table.appointmentTime,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get doctorName => $composableBuilder(
    column: $table.doctorName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get specialty => $composableBuilder(
    column: $table.specialty,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get clinicName => $composableBuilder(
    column: $table.clinicName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get clinicAddress => $composableBuilder(
    column: $table.clinicAddress,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get appointmentType => $composableBuilder(
    column: $table.appointmentType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reasonForVisit => $composableBuilder(
    column: $table.reasonForVisit,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get appointmentStatus => $composableBuilder(
    column: $table.appointmentStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get appointmentNotes => $composableBuilder(
    column: $table.appointmentNotes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get reminderSet => $composableBuilder(
    column: $table.reminderSet,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get reminderMinutes => $composableBuilder(
    column: $table.reminderMinutes,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$PrescriptionsTableAnnotationComposer
    extends Composer<_$AppDatabase, $PrescriptionsTable> {
  $$PrescriptionsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get prescriptionType => $composableBuilder(
    column: $table.prescriptionType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get medicationName => $composableBuilder(
    column: $table.medicationName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dosage =>
      $composableBuilder(column: $table.dosage, builder: (column) => column);

  GeneratedColumn<String> get frequency =>
      $composableBuilder(column: $table.frequency, builder: (column) => column);

  GeneratedColumn<String> get instructions => $composableBuilder(
    column: $table.instructions,
    builder: (column) => column,
  );

  GeneratedColumn<String> get prescribingDoctor => $composableBuilder(
    column: $table.prescribingDoctor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get pharmacy =>
      $composableBuilder(column: $table.pharmacy, builder: (column) => column);

  GeneratedColumn<DateTime> get startDate =>
      $composableBuilder(column: $table.startDate, builder: (column) => column);

  GeneratedColumn<DateTime> get endDate =>
      $composableBuilder(column: $table.endDate, builder: (column) => column);

  GeneratedColumn<int> get refillsRemaining => $composableBuilder(
    column: $table.refillsRemaining,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get isPrescriptionActive => $composableBuilder(
    column: $table.isPrescriptionActive,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get appointmentDate => $composableBuilder(
    column: $table.appointmentDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get appointmentTime => $composableBuilder(
    column: $table.appointmentTime,
    builder: (column) => column,
  );

  GeneratedColumn<String> get doctorName => $composableBuilder(
    column: $table.doctorName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get specialty =>
      $composableBuilder(column: $table.specialty, builder: (column) => column);

  GeneratedColumn<String> get clinicName => $composableBuilder(
    column: $table.clinicName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get clinicAddress => $composableBuilder(
    column: $table.clinicAddress,
    builder: (column) => column,
  );

  GeneratedColumn<String> get appointmentType => $composableBuilder(
    column: $table.appointmentType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get reasonForVisit => $composableBuilder(
    column: $table.reasonForVisit,
    builder: (column) => column,
  );

  GeneratedColumn<String> get appointmentStatus => $composableBuilder(
    column: $table.appointmentStatus,
    builder: (column) => column,
  );

  GeneratedColumn<String> get appointmentNotes => $composableBuilder(
    column: $table.appointmentNotes,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get reminderSet => $composableBuilder(
    column: $table.reminderSet,
    builder: (column) => column,
  );

  GeneratedColumn<int> get reminderMinutes => $composableBuilder(
    column: $table.reminderMinutes,
    builder: (column) => column,
  );
}

class $$PrescriptionsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $PrescriptionsTable,
          Prescription,
          $$PrescriptionsTableFilterComposer,
          $$PrescriptionsTableOrderingComposer,
          $$PrescriptionsTableAnnotationComposer,
          $$PrescriptionsTableCreateCompanionBuilder,
          $$PrescriptionsTableUpdateCompanionBuilder,
          (
            Prescription,
            BaseReferences<_$AppDatabase, $PrescriptionsTable, Prescription>,
          ),
          Prescription,
          PrefetchHooks Function()
        > {
  $$PrescriptionsTableTableManager(_$AppDatabase db, $PrescriptionsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$PrescriptionsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$PrescriptionsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$PrescriptionsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> prescriptionType = const Value.absent(),
                Value<String?> medicationName = const Value.absent(),
                Value<String?> dosage = const Value.absent(),
                Value<String?> frequency = const Value.absent(),
                Value<String?> instructions = const Value.absent(),
                Value<String?> prescribingDoctor = const Value.absent(),
                Value<String?> pharmacy = const Value.absent(),
                Value<DateTime?> startDate = const Value.absent(),
                Value<DateTime?> endDate = const Value.absent(),
                Value<int?> refillsRemaining = const Value.absent(),
                Value<bool> isPrescriptionActive = const Value.absent(),
                Value<DateTime?> appointmentDate = const Value.absent(),
                Value<String?> appointmentTime = const Value.absent(),
                Value<String?> doctorName = const Value.absent(),
                Value<String?> specialty = const Value.absent(),
                Value<String?> clinicName = const Value.absent(),
                Value<String?> clinicAddress = const Value.absent(),
                Value<String?> appointmentType = const Value.absent(),
                Value<String?> reasonForVisit = const Value.absent(),
                Value<String?> appointmentStatus = const Value.absent(),
                Value<String?> appointmentNotes = const Value.absent(),
                Value<bool> reminderSet = const Value.absent(),
                Value<int?> reminderMinutes = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => PrescriptionsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                prescriptionType: prescriptionType,
                medicationName: medicationName,
                dosage: dosage,
                frequency: frequency,
                instructions: instructions,
                prescribingDoctor: prescribingDoctor,
                pharmacy: pharmacy,
                startDate: startDate,
                endDate: endDate,
                refillsRemaining: refillsRemaining,
                isPrescriptionActive: isPrescriptionActive,
                appointmentDate: appointmentDate,
                appointmentTime: appointmentTime,
                doctorName: doctorName,
                specialty: specialty,
                clinicName: clinicName,
                clinicAddress: clinicAddress,
                appointmentType: appointmentType,
                reasonForVisit: reasonForVisit,
                appointmentStatus: appointmentStatus,
                appointmentNotes: appointmentNotes,
                reminderSet: reminderSet,
                reminderMinutes: reminderMinutes,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String prescriptionType,
                Value<String?> medicationName = const Value.absent(),
                Value<String?> dosage = const Value.absent(),
                Value<String?> frequency = const Value.absent(),
                Value<String?> instructions = const Value.absent(),
                Value<String?> prescribingDoctor = const Value.absent(),
                Value<String?> pharmacy = const Value.absent(),
                Value<DateTime?> startDate = const Value.absent(),
                Value<DateTime?> endDate = const Value.absent(),
                Value<int?> refillsRemaining = const Value.absent(),
                Value<bool> isPrescriptionActive = const Value.absent(),
                Value<DateTime?> appointmentDate = const Value.absent(),
                Value<String?> appointmentTime = const Value.absent(),
                Value<String?> doctorName = const Value.absent(),
                Value<String?> specialty = const Value.absent(),
                Value<String?> clinicName = const Value.absent(),
                Value<String?> clinicAddress = const Value.absent(),
                Value<String?> appointmentType = const Value.absent(),
                Value<String?> reasonForVisit = const Value.absent(),
                Value<String?> appointmentStatus = const Value.absent(),
                Value<String?> appointmentNotes = const Value.absent(),
                Value<bool> reminderSet = const Value.absent(),
                Value<int?> reminderMinutes = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => PrescriptionsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                prescriptionType: prescriptionType,
                medicationName: medicationName,
                dosage: dosage,
                frequency: frequency,
                instructions: instructions,
                prescribingDoctor: prescribingDoctor,
                pharmacy: pharmacy,
                startDate: startDate,
                endDate: endDate,
                refillsRemaining: refillsRemaining,
                isPrescriptionActive: isPrescriptionActive,
                appointmentDate: appointmentDate,
                appointmentTime: appointmentTime,
                doctorName: doctorName,
                specialty: specialty,
                clinicName: clinicName,
                clinicAddress: clinicAddress,
                appointmentType: appointmentType,
                reasonForVisit: reasonForVisit,
                appointmentStatus: appointmentStatus,
                appointmentNotes: appointmentNotes,
                reminderSet: reminderSet,
                reminderMinutes: reminderMinutes,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$PrescriptionsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $PrescriptionsTable,
      Prescription,
      $$PrescriptionsTableFilterComposer,
      $$PrescriptionsTableOrderingComposer,
      $$PrescriptionsTableAnnotationComposer,
      $$PrescriptionsTableCreateCompanionBuilder,
      $$PrescriptionsTableUpdateCompanionBuilder,
      (
        Prescription,
        BaseReferences<_$AppDatabase, $PrescriptionsTable, Prescription>,
      ),
      Prescription,
      PrefetchHooks Function()
    >;
typedef $$LabReportsTableCreateCompanionBuilder =
    LabReportsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String testName,
      Value<String?> testResults,
      Value<String?> referenceRange,
      Value<String?> orderingPhysician,
      Value<String?> labFacility,
      required String testStatus,
      Value<DateTime?> collectionDate,
      Value<bool> isCritical,
      Value<int> rowid,
    });
typedef $$LabReportsTableUpdateCompanionBuilder =
    LabReportsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> testName,
      Value<String?> testResults,
      Value<String?> referenceRange,
      Value<String?> orderingPhysician,
      Value<String?> labFacility,
      Value<String> testStatus,
      Value<DateTime?> collectionDate,
      Value<bool> isCritical,
      Value<int> rowid,
    });

class $$LabReportsTableFilterComposer
    extends Composer<_$AppDatabase, $LabReportsTable> {
  $$LabReportsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get testName => $composableBuilder(
    column: $table.testName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get testResults => $composableBuilder(
    column: $table.testResults,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get referenceRange => $composableBuilder(
    column: $table.referenceRange,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get orderingPhysician => $composableBuilder(
    column: $table.orderingPhysician,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get labFacility => $composableBuilder(
    column: $table.labFacility,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get testStatus => $composableBuilder(
    column: $table.testStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get collectionDate => $composableBuilder(
    column: $table.collectionDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isCritical => $composableBuilder(
    column: $table.isCritical,
    builder: (column) => ColumnFilters(column),
  );
}

class $$LabReportsTableOrderingComposer
    extends Composer<_$AppDatabase, $LabReportsTable> {
  $$LabReportsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get testName => $composableBuilder(
    column: $table.testName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get testResults => $composableBuilder(
    column: $table.testResults,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get referenceRange => $composableBuilder(
    column: $table.referenceRange,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get orderingPhysician => $composableBuilder(
    column: $table.orderingPhysician,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get labFacility => $composableBuilder(
    column: $table.labFacility,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get testStatus => $composableBuilder(
    column: $table.testStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get collectionDate => $composableBuilder(
    column: $table.collectionDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isCritical => $composableBuilder(
    column: $table.isCritical,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$LabReportsTableAnnotationComposer
    extends Composer<_$AppDatabase, $LabReportsTable> {
  $$LabReportsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get testName =>
      $composableBuilder(column: $table.testName, builder: (column) => column);

  GeneratedColumn<String> get testResults => $composableBuilder(
    column: $table.testResults,
    builder: (column) => column,
  );

  GeneratedColumn<String> get referenceRange => $composableBuilder(
    column: $table.referenceRange,
    builder: (column) => column,
  );

  GeneratedColumn<String> get orderingPhysician => $composableBuilder(
    column: $table.orderingPhysician,
    builder: (column) => column,
  );

  GeneratedColumn<String> get labFacility => $composableBuilder(
    column: $table.labFacility,
    builder: (column) => column,
  );

  GeneratedColumn<String> get testStatus => $composableBuilder(
    column: $table.testStatus,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get collectionDate => $composableBuilder(
    column: $table.collectionDate,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get isCritical => $composableBuilder(
    column: $table.isCritical,
    builder: (column) => column,
  );
}

class $$LabReportsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $LabReportsTable,
          LabReport,
          $$LabReportsTableFilterComposer,
          $$LabReportsTableOrderingComposer,
          $$LabReportsTableAnnotationComposer,
          $$LabReportsTableCreateCompanionBuilder,
          $$LabReportsTableUpdateCompanionBuilder,
          (
            LabReport,
            BaseReferences<_$AppDatabase, $LabReportsTable, LabReport>,
          ),
          LabReport,
          PrefetchHooks Function()
        > {
  $$LabReportsTableTableManager(_$AppDatabase db, $LabReportsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$LabReportsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$LabReportsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$LabReportsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> testName = const Value.absent(),
                Value<String?> testResults = const Value.absent(),
                Value<String?> referenceRange = const Value.absent(),
                Value<String?> orderingPhysician = const Value.absent(),
                Value<String?> labFacility = const Value.absent(),
                Value<String> testStatus = const Value.absent(),
                Value<DateTime?> collectionDate = const Value.absent(),
                Value<bool> isCritical = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => LabReportsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                testName: testName,
                testResults: testResults,
                referenceRange: referenceRange,
                orderingPhysician: orderingPhysician,
                labFacility: labFacility,
                testStatus: testStatus,
                collectionDate: collectionDate,
                isCritical: isCritical,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String testName,
                Value<String?> testResults = const Value.absent(),
                Value<String?> referenceRange = const Value.absent(),
                Value<String?> orderingPhysician = const Value.absent(),
                Value<String?> labFacility = const Value.absent(),
                required String testStatus,
                Value<DateTime?> collectionDate = const Value.absent(),
                Value<bool> isCritical = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => LabReportsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                testName: testName,
                testResults: testResults,
                referenceRange: referenceRange,
                orderingPhysician: orderingPhysician,
                labFacility: labFacility,
                testStatus: testStatus,
                collectionDate: collectionDate,
                isCritical: isCritical,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$LabReportsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $LabReportsTable,
      LabReport,
      $$LabReportsTableFilterComposer,
      $$LabReportsTableOrderingComposer,
      $$LabReportsTableAnnotationComposer,
      $$LabReportsTableCreateCompanionBuilder,
      $$LabReportsTableUpdateCompanionBuilder,
      (LabReport, BaseReferences<_$AppDatabase, $LabReportsTable, LabReport>),
      LabReport,
      PrefetchHooks Function()
    >;
typedef $$MedicationsTableCreateCompanionBuilder =
    MedicationsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String medicationName,
      required String dosage,
      required String frequency,
      required String schedule,
      required DateTime startDate,
      Value<DateTime?> endDate,
      Value<String?> instructions,
      Value<bool> reminderEnabled,
      Value<int?> pillCount,
      required String status,
      Value<int> rowid,
    });
typedef $$MedicationsTableUpdateCompanionBuilder =
    MedicationsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> medicationName,
      Value<String> dosage,
      Value<String> frequency,
      Value<String> schedule,
      Value<DateTime> startDate,
      Value<DateTime?> endDate,
      Value<String?> instructions,
      Value<bool> reminderEnabled,
      Value<int?> pillCount,
      Value<String> status,
      Value<int> rowid,
    });

class $$MedicationsTableFilterComposer
    extends Composer<_$AppDatabase, $MedicationsTable> {
  $$MedicationsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get medicationName => $composableBuilder(
    column: $table.medicationName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dosage => $composableBuilder(
    column: $table.dosage,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get frequency => $composableBuilder(
    column: $table.frequency,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get schedule => $composableBuilder(
    column: $table.schedule,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get startDate => $composableBuilder(
    column: $table.startDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get endDate => $composableBuilder(
    column: $table.endDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get instructions => $composableBuilder(
    column: $table.instructions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get reminderEnabled => $composableBuilder(
    column: $table.reminderEnabled,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get pillCount => $composableBuilder(
    column: $table.pillCount,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get status => $composableBuilder(
    column: $table.status,
    builder: (column) => ColumnFilters(column),
  );
}

class $$MedicationsTableOrderingComposer
    extends Composer<_$AppDatabase, $MedicationsTable> {
  $$MedicationsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get medicationName => $composableBuilder(
    column: $table.medicationName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dosage => $composableBuilder(
    column: $table.dosage,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get frequency => $composableBuilder(
    column: $table.frequency,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get schedule => $composableBuilder(
    column: $table.schedule,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get startDate => $composableBuilder(
    column: $table.startDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get endDate => $composableBuilder(
    column: $table.endDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get instructions => $composableBuilder(
    column: $table.instructions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get reminderEnabled => $composableBuilder(
    column: $table.reminderEnabled,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get pillCount => $composableBuilder(
    column: $table.pillCount,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get status => $composableBuilder(
    column: $table.status,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$MedicationsTableAnnotationComposer
    extends Composer<_$AppDatabase, $MedicationsTable> {
  $$MedicationsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get medicationName => $composableBuilder(
    column: $table.medicationName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dosage =>
      $composableBuilder(column: $table.dosage, builder: (column) => column);

  GeneratedColumn<String> get frequency =>
      $composableBuilder(column: $table.frequency, builder: (column) => column);

  GeneratedColumn<String> get schedule =>
      $composableBuilder(column: $table.schedule, builder: (column) => column);

  GeneratedColumn<DateTime> get startDate =>
      $composableBuilder(column: $table.startDate, builder: (column) => column);

  GeneratedColumn<DateTime> get endDate =>
      $composableBuilder(column: $table.endDate, builder: (column) => column);

  GeneratedColumn<String> get instructions => $composableBuilder(
    column: $table.instructions,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get reminderEnabled => $composableBuilder(
    column: $table.reminderEnabled,
    builder: (column) => column,
  );

  GeneratedColumn<int> get pillCount =>
      $composableBuilder(column: $table.pillCount, builder: (column) => column);

  GeneratedColumn<String> get status =>
      $composableBuilder(column: $table.status, builder: (column) => column);
}

class $$MedicationsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $MedicationsTable,
          Medication,
          $$MedicationsTableFilterComposer,
          $$MedicationsTableOrderingComposer,
          $$MedicationsTableAnnotationComposer,
          $$MedicationsTableCreateCompanionBuilder,
          $$MedicationsTableUpdateCompanionBuilder,
          (
            Medication,
            BaseReferences<_$AppDatabase, $MedicationsTable, Medication>,
          ),
          Medication,
          PrefetchHooks Function()
        > {
  $$MedicationsTableTableManager(_$AppDatabase db, $MedicationsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MedicationsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$MedicationsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$MedicationsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> medicationName = const Value.absent(),
                Value<String> dosage = const Value.absent(),
                Value<String> frequency = const Value.absent(),
                Value<String> schedule = const Value.absent(),
                Value<DateTime> startDate = const Value.absent(),
                Value<DateTime?> endDate = const Value.absent(),
                Value<String?> instructions = const Value.absent(),
                Value<bool> reminderEnabled = const Value.absent(),
                Value<int?> pillCount = const Value.absent(),
                Value<String> status = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => MedicationsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                medicationName: medicationName,
                dosage: dosage,
                frequency: frequency,
                schedule: schedule,
                startDate: startDate,
                endDate: endDate,
                instructions: instructions,
                reminderEnabled: reminderEnabled,
                pillCount: pillCount,
                status: status,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String medicationName,
                required String dosage,
                required String frequency,
                required String schedule,
                required DateTime startDate,
                Value<DateTime?> endDate = const Value.absent(),
                Value<String?> instructions = const Value.absent(),
                Value<bool> reminderEnabled = const Value.absent(),
                Value<int?> pillCount = const Value.absent(),
                required String status,
                Value<int> rowid = const Value.absent(),
              }) => MedicationsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                medicationName: medicationName,
                dosage: dosage,
                frequency: frequency,
                schedule: schedule,
                startDate: startDate,
                endDate: endDate,
                instructions: instructions,
                reminderEnabled: reminderEnabled,
                pillCount: pillCount,
                status: status,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$MedicationsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $MedicationsTable,
      Medication,
      $$MedicationsTableFilterComposer,
      $$MedicationsTableOrderingComposer,
      $$MedicationsTableAnnotationComposer,
      $$MedicationsTableCreateCompanionBuilder,
      $$MedicationsTableUpdateCompanionBuilder,
      (
        Medication,
        BaseReferences<_$AppDatabase, $MedicationsTable, Medication>,
      ),
      Medication,
      PrefetchHooks Function()
    >;
typedef $$VaccinationsTableCreateCompanionBuilder =
    VaccinationsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String vaccineName,
      Value<String?> manufacturer,
      Value<String?> batchNumber,
      required DateTime administrationDate,
      Value<String?> administeredBy,
      Value<String?> site,
      Value<DateTime?> nextDueDate,
      Value<int?> doseNumber,
      Value<bool> isComplete,
      Value<int> rowid,
    });
typedef $$VaccinationsTableUpdateCompanionBuilder =
    VaccinationsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> vaccineName,
      Value<String?> manufacturer,
      Value<String?> batchNumber,
      Value<DateTime> administrationDate,
      Value<String?> administeredBy,
      Value<String?> site,
      Value<DateTime?> nextDueDate,
      Value<int?> doseNumber,
      Value<bool> isComplete,
      Value<int> rowid,
    });

class $$VaccinationsTableFilterComposer
    extends Composer<_$AppDatabase, $VaccinationsTable> {
  $$VaccinationsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get vaccineName => $composableBuilder(
    column: $table.vaccineName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get manufacturer => $composableBuilder(
    column: $table.manufacturer,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get batchNumber => $composableBuilder(
    column: $table.batchNumber,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get administrationDate => $composableBuilder(
    column: $table.administrationDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get administeredBy => $composableBuilder(
    column: $table.administeredBy,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get nextDueDate => $composableBuilder(
    column: $table.nextDueDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get doseNumber => $composableBuilder(
    column: $table.doseNumber,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isComplete => $composableBuilder(
    column: $table.isComplete,
    builder: (column) => ColumnFilters(column),
  );
}

class $$VaccinationsTableOrderingComposer
    extends Composer<_$AppDatabase, $VaccinationsTable> {
  $$VaccinationsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get vaccineName => $composableBuilder(
    column: $table.vaccineName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get manufacturer => $composableBuilder(
    column: $table.manufacturer,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get batchNumber => $composableBuilder(
    column: $table.batchNumber,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get administrationDate => $composableBuilder(
    column: $table.administrationDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get administeredBy => $composableBuilder(
    column: $table.administeredBy,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get nextDueDate => $composableBuilder(
    column: $table.nextDueDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get doseNumber => $composableBuilder(
    column: $table.doseNumber,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isComplete => $composableBuilder(
    column: $table.isComplete,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$VaccinationsTableAnnotationComposer
    extends Composer<_$AppDatabase, $VaccinationsTable> {
  $$VaccinationsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get vaccineName => $composableBuilder(
    column: $table.vaccineName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get manufacturer => $composableBuilder(
    column: $table.manufacturer,
    builder: (column) => column,
  );

  GeneratedColumn<String> get batchNumber => $composableBuilder(
    column: $table.batchNumber,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get administrationDate => $composableBuilder(
    column: $table.administrationDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get administeredBy => $composableBuilder(
    column: $table.administeredBy,
    builder: (column) => column,
  );

  GeneratedColumn<String> get site =>
      $composableBuilder(column: $table.site, builder: (column) => column);

  GeneratedColumn<DateTime> get nextDueDate => $composableBuilder(
    column: $table.nextDueDate,
    builder: (column) => column,
  );

  GeneratedColumn<int> get doseNumber => $composableBuilder(
    column: $table.doseNumber,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get isComplete => $composableBuilder(
    column: $table.isComplete,
    builder: (column) => column,
  );
}

class $$VaccinationsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $VaccinationsTable,
          Vaccination,
          $$VaccinationsTableFilterComposer,
          $$VaccinationsTableOrderingComposer,
          $$VaccinationsTableAnnotationComposer,
          $$VaccinationsTableCreateCompanionBuilder,
          $$VaccinationsTableUpdateCompanionBuilder,
          (
            Vaccination,
            BaseReferences<_$AppDatabase, $VaccinationsTable, Vaccination>,
          ),
          Vaccination,
          PrefetchHooks Function()
        > {
  $$VaccinationsTableTableManager(_$AppDatabase db, $VaccinationsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$VaccinationsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$VaccinationsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$VaccinationsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> vaccineName = const Value.absent(),
                Value<String?> manufacturer = const Value.absent(),
                Value<String?> batchNumber = const Value.absent(),
                Value<DateTime> administrationDate = const Value.absent(),
                Value<String?> administeredBy = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<DateTime?> nextDueDate = const Value.absent(),
                Value<int?> doseNumber = const Value.absent(),
                Value<bool> isComplete = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => VaccinationsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                vaccineName: vaccineName,
                manufacturer: manufacturer,
                batchNumber: batchNumber,
                administrationDate: administrationDate,
                administeredBy: administeredBy,
                site: site,
                nextDueDate: nextDueDate,
                doseNumber: doseNumber,
                isComplete: isComplete,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String vaccineName,
                Value<String?> manufacturer = const Value.absent(),
                Value<String?> batchNumber = const Value.absent(),
                required DateTime administrationDate,
                Value<String?> administeredBy = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<DateTime?> nextDueDate = const Value.absent(),
                Value<int?> doseNumber = const Value.absent(),
                Value<bool> isComplete = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => VaccinationsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                vaccineName: vaccineName,
                manufacturer: manufacturer,
                batchNumber: batchNumber,
                administrationDate: administrationDate,
                administeredBy: administeredBy,
                site: site,
                nextDueDate: nextDueDate,
                doseNumber: doseNumber,
                isComplete: isComplete,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$VaccinationsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $VaccinationsTable,
      Vaccination,
      $$VaccinationsTableFilterComposer,
      $$VaccinationsTableOrderingComposer,
      $$VaccinationsTableAnnotationComposer,
      $$VaccinationsTableCreateCompanionBuilder,
      $$VaccinationsTableUpdateCompanionBuilder,
      (
        Vaccination,
        BaseReferences<_$AppDatabase, $VaccinationsTable, Vaccination>,
      ),
      Vaccination,
      PrefetchHooks Function()
    >;
typedef $$AllergiesTableCreateCompanionBuilder =
    AllergiesCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String allergen,
      required String severity,
      required String symptoms,
      Value<String?> treatment,
      Value<String?> notes,
      Value<bool> isAllergyActive,
      Value<DateTime?> firstReaction,
      Value<DateTime?> lastReaction,
      Value<int> rowid,
    });
typedef $$AllergiesTableUpdateCompanionBuilder =
    AllergiesCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> allergen,
      Value<String> severity,
      Value<String> symptoms,
      Value<String?> treatment,
      Value<String?> notes,
      Value<bool> isAllergyActive,
      Value<DateTime?> firstReaction,
      Value<DateTime?> lastReaction,
      Value<int> rowid,
    });

class $$AllergiesTableFilterComposer
    extends Composer<_$AppDatabase, $AllergiesTable> {
  $$AllergiesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get allergen => $composableBuilder(
    column: $table.allergen,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get severity => $composableBuilder(
    column: $table.severity,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get symptoms => $composableBuilder(
    column: $table.symptoms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get treatment => $composableBuilder(
    column: $table.treatment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get notes => $composableBuilder(
    column: $table.notes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isAllergyActive => $composableBuilder(
    column: $table.isAllergyActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get firstReaction => $composableBuilder(
    column: $table.firstReaction,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get lastReaction => $composableBuilder(
    column: $table.lastReaction,
    builder: (column) => ColumnFilters(column),
  );
}

class $$AllergiesTableOrderingComposer
    extends Composer<_$AppDatabase, $AllergiesTable> {
  $$AllergiesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get allergen => $composableBuilder(
    column: $table.allergen,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get severity => $composableBuilder(
    column: $table.severity,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get symptoms => $composableBuilder(
    column: $table.symptoms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get treatment => $composableBuilder(
    column: $table.treatment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get notes => $composableBuilder(
    column: $table.notes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isAllergyActive => $composableBuilder(
    column: $table.isAllergyActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get firstReaction => $composableBuilder(
    column: $table.firstReaction,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get lastReaction => $composableBuilder(
    column: $table.lastReaction,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$AllergiesTableAnnotationComposer
    extends Composer<_$AppDatabase, $AllergiesTable> {
  $$AllergiesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get allergen =>
      $composableBuilder(column: $table.allergen, builder: (column) => column);

  GeneratedColumn<String> get severity =>
      $composableBuilder(column: $table.severity, builder: (column) => column);

  GeneratedColumn<String> get symptoms =>
      $composableBuilder(column: $table.symptoms, builder: (column) => column);

  GeneratedColumn<String> get treatment =>
      $composableBuilder(column: $table.treatment, builder: (column) => column);

  GeneratedColumn<String> get notes =>
      $composableBuilder(column: $table.notes, builder: (column) => column);

  GeneratedColumn<bool> get isAllergyActive => $composableBuilder(
    column: $table.isAllergyActive,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get firstReaction => $composableBuilder(
    column: $table.firstReaction,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get lastReaction => $composableBuilder(
    column: $table.lastReaction,
    builder: (column) => column,
  );
}

class $$AllergiesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $AllergiesTable,
          Allergy,
          $$AllergiesTableFilterComposer,
          $$AllergiesTableOrderingComposer,
          $$AllergiesTableAnnotationComposer,
          $$AllergiesTableCreateCompanionBuilder,
          $$AllergiesTableUpdateCompanionBuilder,
          (Allergy, BaseReferences<_$AppDatabase, $AllergiesTable, Allergy>),
          Allergy,
          PrefetchHooks Function()
        > {
  $$AllergiesTableTableManager(_$AppDatabase db, $AllergiesTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AllergiesTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AllergiesTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AllergiesTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> allergen = const Value.absent(),
                Value<String> severity = const Value.absent(),
                Value<String> symptoms = const Value.absent(),
                Value<String?> treatment = const Value.absent(),
                Value<String?> notes = const Value.absent(),
                Value<bool> isAllergyActive = const Value.absent(),
                Value<DateTime?> firstReaction = const Value.absent(),
                Value<DateTime?> lastReaction = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => AllergiesCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                allergen: allergen,
                severity: severity,
                symptoms: symptoms,
                treatment: treatment,
                notes: notes,
                isAllergyActive: isAllergyActive,
                firstReaction: firstReaction,
                lastReaction: lastReaction,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String allergen,
                required String severity,
                required String symptoms,
                Value<String?> treatment = const Value.absent(),
                Value<String?> notes = const Value.absent(),
                Value<bool> isAllergyActive = const Value.absent(),
                Value<DateTime?> firstReaction = const Value.absent(),
                Value<DateTime?> lastReaction = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => AllergiesCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                allergen: allergen,
                severity: severity,
                symptoms: symptoms,
                treatment: treatment,
                notes: notes,
                isAllergyActive: isAllergyActive,
                firstReaction: firstReaction,
                lastReaction: lastReaction,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$AllergiesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $AllergiesTable,
      Allergy,
      $$AllergiesTableFilterComposer,
      $$AllergiesTableOrderingComposer,
      $$AllergiesTableAnnotationComposer,
      $$AllergiesTableCreateCompanionBuilder,
      $$AllergiesTableUpdateCompanionBuilder,
      (Allergy, BaseReferences<_$AppDatabase, $AllergiesTable, Allergy>),
      Allergy,
      PrefetchHooks Function()
    >;
typedef $$ChronicConditionsTableCreateCompanionBuilder =
    ChronicConditionsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String conditionName,
      required DateTime diagnosisDate,
      Value<String?> diagnosingProvider,
      required String severity,
      required String status,
      Value<String?> treatment,
      Value<String?> managementPlan,
      Value<String?> relatedMedications,
      Value<int> rowid,
    });
typedef $$ChronicConditionsTableUpdateCompanionBuilder =
    ChronicConditionsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> conditionName,
      Value<DateTime> diagnosisDate,
      Value<String?> diagnosingProvider,
      Value<String> severity,
      Value<String> status,
      Value<String?> treatment,
      Value<String?> managementPlan,
      Value<String?> relatedMedications,
      Value<int> rowid,
    });

class $$ChronicConditionsTableFilterComposer
    extends Composer<_$AppDatabase, $ChronicConditionsTable> {
  $$ChronicConditionsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get conditionName => $composableBuilder(
    column: $table.conditionName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get diagnosisDate => $composableBuilder(
    column: $table.diagnosisDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get diagnosingProvider => $composableBuilder(
    column: $table.diagnosingProvider,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get severity => $composableBuilder(
    column: $table.severity,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get status => $composableBuilder(
    column: $table.status,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get treatment => $composableBuilder(
    column: $table.treatment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get managementPlan => $composableBuilder(
    column: $table.managementPlan,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get relatedMedications => $composableBuilder(
    column: $table.relatedMedications,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ChronicConditionsTableOrderingComposer
    extends Composer<_$AppDatabase, $ChronicConditionsTable> {
  $$ChronicConditionsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get conditionName => $composableBuilder(
    column: $table.conditionName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get diagnosisDate => $composableBuilder(
    column: $table.diagnosisDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get diagnosingProvider => $composableBuilder(
    column: $table.diagnosingProvider,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get severity => $composableBuilder(
    column: $table.severity,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get status => $composableBuilder(
    column: $table.status,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get treatment => $composableBuilder(
    column: $table.treatment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get managementPlan => $composableBuilder(
    column: $table.managementPlan,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get relatedMedications => $composableBuilder(
    column: $table.relatedMedications,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ChronicConditionsTableAnnotationComposer
    extends Composer<_$AppDatabase, $ChronicConditionsTable> {
  $$ChronicConditionsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get conditionName => $composableBuilder(
    column: $table.conditionName,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get diagnosisDate => $composableBuilder(
    column: $table.diagnosisDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get diagnosingProvider => $composableBuilder(
    column: $table.diagnosingProvider,
    builder: (column) => column,
  );

  GeneratedColumn<String> get severity =>
      $composableBuilder(column: $table.severity, builder: (column) => column);

  GeneratedColumn<String> get status =>
      $composableBuilder(column: $table.status, builder: (column) => column);

  GeneratedColumn<String> get treatment =>
      $composableBuilder(column: $table.treatment, builder: (column) => column);

  GeneratedColumn<String> get managementPlan => $composableBuilder(
    column: $table.managementPlan,
    builder: (column) => column,
  );

  GeneratedColumn<String> get relatedMedications => $composableBuilder(
    column: $table.relatedMedications,
    builder: (column) => column,
  );
}

class $$ChronicConditionsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ChronicConditionsTable,
          ChronicCondition,
          $$ChronicConditionsTableFilterComposer,
          $$ChronicConditionsTableOrderingComposer,
          $$ChronicConditionsTableAnnotationComposer,
          $$ChronicConditionsTableCreateCompanionBuilder,
          $$ChronicConditionsTableUpdateCompanionBuilder,
          (
            ChronicCondition,
            BaseReferences<
              _$AppDatabase,
              $ChronicConditionsTable,
              ChronicCondition
            >,
          ),
          ChronicCondition,
          PrefetchHooks Function()
        > {
  $$ChronicConditionsTableTableManager(
    _$AppDatabase db,
    $ChronicConditionsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$ChronicConditionsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$ChronicConditionsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$ChronicConditionsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> conditionName = const Value.absent(),
                Value<DateTime> diagnosisDate = const Value.absent(),
                Value<String?> diagnosingProvider = const Value.absent(),
                Value<String> severity = const Value.absent(),
                Value<String> status = const Value.absent(),
                Value<String?> treatment = const Value.absent(),
                Value<String?> managementPlan = const Value.absent(),
                Value<String?> relatedMedications = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => ChronicConditionsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                conditionName: conditionName,
                diagnosisDate: diagnosisDate,
                diagnosingProvider: diagnosingProvider,
                severity: severity,
                status: status,
                treatment: treatment,
                managementPlan: managementPlan,
                relatedMedications: relatedMedications,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String conditionName,
                required DateTime diagnosisDate,
                Value<String?> diagnosingProvider = const Value.absent(),
                required String severity,
                required String status,
                Value<String?> treatment = const Value.absent(),
                Value<String?> managementPlan = const Value.absent(),
                Value<String?> relatedMedications = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => ChronicConditionsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                conditionName: conditionName,
                diagnosisDate: diagnosisDate,
                diagnosingProvider: diagnosingProvider,
                severity: severity,
                status: status,
                treatment: treatment,
                managementPlan: managementPlan,
                relatedMedications: relatedMedications,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ChronicConditionsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ChronicConditionsTable,
      ChronicCondition,
      $$ChronicConditionsTableFilterComposer,
      $$ChronicConditionsTableOrderingComposer,
      $$ChronicConditionsTableAnnotationComposer,
      $$ChronicConditionsTableCreateCompanionBuilder,
      $$ChronicConditionsTableUpdateCompanionBuilder,
      (
        ChronicCondition,
        BaseReferences<
          _$AppDatabase,
          $ChronicConditionsTable,
          ChronicCondition
        >,
      ),
      ChronicCondition,
      PrefetchHooks Function()
    >;
typedef $$SurgicalRecordsTableCreateCompanionBuilder =
    SurgicalRecordsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String procedureName,
      Value<String?> surgeonName,
      Value<String?> hospital,
      Value<String?> operatingRoom,
      required DateTime surgeryDate,
      Value<DateTime?> surgeryStartTime,
      Value<DateTime?> surgeryEndTime,
      Value<String?> anesthesiaType,
      Value<String?> anesthesiologist,
      Value<String?> indication,
      Value<String?> findings,
      Value<String?> complications,
      Value<String?> recoveryNotes,
      Value<String?> followUpPlan,
      Value<DateTime?> dischargeDate,
      Value<bool> isEmergency,
      Value<int> rowid,
    });
typedef $$SurgicalRecordsTableUpdateCompanionBuilder =
    SurgicalRecordsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> procedureName,
      Value<String?> surgeonName,
      Value<String?> hospital,
      Value<String?> operatingRoom,
      Value<DateTime> surgeryDate,
      Value<DateTime?> surgeryStartTime,
      Value<DateTime?> surgeryEndTime,
      Value<String?> anesthesiaType,
      Value<String?> anesthesiologist,
      Value<String?> indication,
      Value<String?> findings,
      Value<String?> complications,
      Value<String?> recoveryNotes,
      Value<String?> followUpPlan,
      Value<DateTime?> dischargeDate,
      Value<bool> isEmergency,
      Value<int> rowid,
    });

class $$SurgicalRecordsTableFilterComposer
    extends Composer<_$AppDatabase, $SurgicalRecordsTable> {
  $$SurgicalRecordsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get procedureName => $composableBuilder(
    column: $table.procedureName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get surgeonName => $composableBuilder(
    column: $table.surgeonName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hospital => $composableBuilder(
    column: $table.hospital,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get operatingRoom => $composableBuilder(
    column: $table.operatingRoom,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get surgeryDate => $composableBuilder(
    column: $table.surgeryDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get surgeryStartTime => $composableBuilder(
    column: $table.surgeryStartTime,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get surgeryEndTime => $composableBuilder(
    column: $table.surgeryEndTime,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get anesthesiaType => $composableBuilder(
    column: $table.anesthesiaType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get anesthesiologist => $composableBuilder(
    column: $table.anesthesiologist,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indication => $composableBuilder(
    column: $table.indication,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get findings => $composableBuilder(
    column: $table.findings,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get complications => $composableBuilder(
    column: $table.complications,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recoveryNotes => $composableBuilder(
    column: $table.recoveryNotes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get followUpPlan => $composableBuilder(
    column: $table.followUpPlan,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isEmergency => $composableBuilder(
    column: $table.isEmergency,
    builder: (column) => ColumnFilters(column),
  );
}

class $$SurgicalRecordsTableOrderingComposer
    extends Composer<_$AppDatabase, $SurgicalRecordsTable> {
  $$SurgicalRecordsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get procedureName => $composableBuilder(
    column: $table.procedureName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get surgeonName => $composableBuilder(
    column: $table.surgeonName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hospital => $composableBuilder(
    column: $table.hospital,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get operatingRoom => $composableBuilder(
    column: $table.operatingRoom,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get surgeryDate => $composableBuilder(
    column: $table.surgeryDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get surgeryStartTime => $composableBuilder(
    column: $table.surgeryStartTime,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get surgeryEndTime => $composableBuilder(
    column: $table.surgeryEndTime,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get anesthesiaType => $composableBuilder(
    column: $table.anesthesiaType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get anesthesiologist => $composableBuilder(
    column: $table.anesthesiologist,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indication => $composableBuilder(
    column: $table.indication,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get findings => $composableBuilder(
    column: $table.findings,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get complications => $composableBuilder(
    column: $table.complications,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recoveryNotes => $composableBuilder(
    column: $table.recoveryNotes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get followUpPlan => $composableBuilder(
    column: $table.followUpPlan,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isEmergency => $composableBuilder(
    column: $table.isEmergency,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$SurgicalRecordsTableAnnotationComposer
    extends Composer<_$AppDatabase, $SurgicalRecordsTable> {
  $$SurgicalRecordsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get procedureName => $composableBuilder(
    column: $table.procedureName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get surgeonName => $composableBuilder(
    column: $table.surgeonName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get hospital =>
      $composableBuilder(column: $table.hospital, builder: (column) => column);

  GeneratedColumn<String> get operatingRoom => $composableBuilder(
    column: $table.operatingRoom,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get surgeryDate => $composableBuilder(
    column: $table.surgeryDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get surgeryStartTime => $composableBuilder(
    column: $table.surgeryStartTime,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get surgeryEndTime => $composableBuilder(
    column: $table.surgeryEndTime,
    builder: (column) => column,
  );

  GeneratedColumn<String> get anesthesiaType => $composableBuilder(
    column: $table.anesthesiaType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get anesthesiologist => $composableBuilder(
    column: $table.anesthesiologist,
    builder: (column) => column,
  );

  GeneratedColumn<String> get indication => $composableBuilder(
    column: $table.indication,
    builder: (column) => column,
  );

  GeneratedColumn<String> get findings =>
      $composableBuilder(column: $table.findings, builder: (column) => column);

  GeneratedColumn<String> get complications => $composableBuilder(
    column: $table.complications,
    builder: (column) => column,
  );

  GeneratedColumn<String> get recoveryNotes => $composableBuilder(
    column: $table.recoveryNotes,
    builder: (column) => column,
  );

  GeneratedColumn<String> get followUpPlan => $composableBuilder(
    column: $table.followUpPlan,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get isEmergency => $composableBuilder(
    column: $table.isEmergency,
    builder: (column) => column,
  );
}

class $$SurgicalRecordsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $SurgicalRecordsTable,
          SurgicalRecord,
          $$SurgicalRecordsTableFilterComposer,
          $$SurgicalRecordsTableOrderingComposer,
          $$SurgicalRecordsTableAnnotationComposer,
          $$SurgicalRecordsTableCreateCompanionBuilder,
          $$SurgicalRecordsTableUpdateCompanionBuilder,
          (
            SurgicalRecord,
            BaseReferences<
              _$AppDatabase,
              $SurgicalRecordsTable,
              SurgicalRecord
            >,
          ),
          SurgicalRecord,
          PrefetchHooks Function()
        > {
  $$SurgicalRecordsTableTableManager(
    _$AppDatabase db,
    $SurgicalRecordsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$SurgicalRecordsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$SurgicalRecordsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$SurgicalRecordsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> procedureName = const Value.absent(),
                Value<String?> surgeonName = const Value.absent(),
                Value<String?> hospital = const Value.absent(),
                Value<String?> operatingRoom = const Value.absent(),
                Value<DateTime> surgeryDate = const Value.absent(),
                Value<DateTime?> surgeryStartTime = const Value.absent(),
                Value<DateTime?> surgeryEndTime = const Value.absent(),
                Value<String?> anesthesiaType = const Value.absent(),
                Value<String?> anesthesiologist = const Value.absent(),
                Value<String?> indication = const Value.absent(),
                Value<String?> findings = const Value.absent(),
                Value<String?> complications = const Value.absent(),
                Value<String?> recoveryNotes = const Value.absent(),
                Value<String?> followUpPlan = const Value.absent(),
                Value<DateTime?> dischargeDate = const Value.absent(),
                Value<bool> isEmergency = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => SurgicalRecordsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                procedureName: procedureName,
                surgeonName: surgeonName,
                hospital: hospital,
                operatingRoom: operatingRoom,
                surgeryDate: surgeryDate,
                surgeryStartTime: surgeryStartTime,
                surgeryEndTime: surgeryEndTime,
                anesthesiaType: anesthesiaType,
                anesthesiologist: anesthesiologist,
                indication: indication,
                findings: findings,
                complications: complications,
                recoveryNotes: recoveryNotes,
                followUpPlan: followUpPlan,
                dischargeDate: dischargeDate,
                isEmergency: isEmergency,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String procedureName,
                Value<String?> surgeonName = const Value.absent(),
                Value<String?> hospital = const Value.absent(),
                Value<String?> operatingRoom = const Value.absent(),
                required DateTime surgeryDate,
                Value<DateTime?> surgeryStartTime = const Value.absent(),
                Value<DateTime?> surgeryEndTime = const Value.absent(),
                Value<String?> anesthesiaType = const Value.absent(),
                Value<String?> anesthesiologist = const Value.absent(),
                Value<String?> indication = const Value.absent(),
                Value<String?> findings = const Value.absent(),
                Value<String?> complications = const Value.absent(),
                Value<String?> recoveryNotes = const Value.absent(),
                Value<String?> followUpPlan = const Value.absent(),
                Value<DateTime?> dischargeDate = const Value.absent(),
                Value<bool> isEmergency = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => SurgicalRecordsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                procedureName: procedureName,
                surgeonName: surgeonName,
                hospital: hospital,
                operatingRoom: operatingRoom,
                surgeryDate: surgeryDate,
                surgeryStartTime: surgeryStartTime,
                surgeryEndTime: surgeryEndTime,
                anesthesiaType: anesthesiaType,
                anesthesiologist: anesthesiologist,
                indication: indication,
                findings: findings,
                complications: complications,
                recoveryNotes: recoveryNotes,
                followUpPlan: followUpPlan,
                dischargeDate: dischargeDate,
                isEmergency: isEmergency,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$SurgicalRecordsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $SurgicalRecordsTable,
      SurgicalRecord,
      $$SurgicalRecordsTableFilterComposer,
      $$SurgicalRecordsTableOrderingComposer,
      $$SurgicalRecordsTableAnnotationComposer,
      $$SurgicalRecordsTableCreateCompanionBuilder,
      $$SurgicalRecordsTableUpdateCompanionBuilder,
      (
        SurgicalRecord,
        BaseReferences<_$AppDatabase, $SurgicalRecordsTable, SurgicalRecord>,
      ),
      SurgicalRecord,
      PrefetchHooks Function()
    >;
typedef $$RadiologyRecordsTableCreateCompanionBuilder =
    RadiologyRecordsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String studyType,
      Value<String?> bodyPart,
      Value<String?> radiologist,
      Value<String?> facility,
      required DateTime studyDate,
      Value<String?> technique,
      Value<String?> contrast,
      Value<String?> findings,
      Value<String?> impression,
      Value<String?> recommendation,
      required String urgency,
      Value<bool> isNormal,
      Value<String?> referringPhysician,
      Value<String?> protocolUsed,
      Value<int> rowid,
    });
typedef $$RadiologyRecordsTableUpdateCompanionBuilder =
    RadiologyRecordsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> studyType,
      Value<String?> bodyPart,
      Value<String?> radiologist,
      Value<String?> facility,
      Value<DateTime> studyDate,
      Value<String?> technique,
      Value<String?> contrast,
      Value<String?> findings,
      Value<String?> impression,
      Value<String?> recommendation,
      Value<String> urgency,
      Value<bool> isNormal,
      Value<String?> referringPhysician,
      Value<String?> protocolUsed,
      Value<int> rowid,
    });

class $$RadiologyRecordsTableFilterComposer
    extends Composer<_$AppDatabase, $RadiologyRecordsTable> {
  $$RadiologyRecordsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get studyType => $composableBuilder(
    column: $table.studyType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bodyPart => $composableBuilder(
    column: $table.bodyPart,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get radiologist => $composableBuilder(
    column: $table.radiologist,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get facility => $composableBuilder(
    column: $table.facility,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get studyDate => $composableBuilder(
    column: $table.studyDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get technique => $composableBuilder(
    column: $table.technique,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contrast => $composableBuilder(
    column: $table.contrast,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get findings => $composableBuilder(
    column: $table.findings,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get impression => $composableBuilder(
    column: $table.impression,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recommendation => $composableBuilder(
    column: $table.recommendation,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get urgency => $composableBuilder(
    column: $table.urgency,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isNormal => $composableBuilder(
    column: $table.isNormal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get protocolUsed => $composableBuilder(
    column: $table.protocolUsed,
    builder: (column) => ColumnFilters(column),
  );
}

class $$RadiologyRecordsTableOrderingComposer
    extends Composer<_$AppDatabase, $RadiologyRecordsTable> {
  $$RadiologyRecordsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get studyType => $composableBuilder(
    column: $table.studyType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bodyPart => $composableBuilder(
    column: $table.bodyPart,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get radiologist => $composableBuilder(
    column: $table.radiologist,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get facility => $composableBuilder(
    column: $table.facility,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get studyDate => $composableBuilder(
    column: $table.studyDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get technique => $composableBuilder(
    column: $table.technique,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contrast => $composableBuilder(
    column: $table.contrast,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get findings => $composableBuilder(
    column: $table.findings,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get impression => $composableBuilder(
    column: $table.impression,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recommendation => $composableBuilder(
    column: $table.recommendation,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get urgency => $composableBuilder(
    column: $table.urgency,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isNormal => $composableBuilder(
    column: $table.isNormal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get protocolUsed => $composableBuilder(
    column: $table.protocolUsed,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$RadiologyRecordsTableAnnotationComposer
    extends Composer<_$AppDatabase, $RadiologyRecordsTable> {
  $$RadiologyRecordsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get studyType =>
      $composableBuilder(column: $table.studyType, builder: (column) => column);

  GeneratedColumn<String> get bodyPart =>
      $composableBuilder(column: $table.bodyPart, builder: (column) => column);

  GeneratedColumn<String> get radiologist => $composableBuilder(
    column: $table.radiologist,
    builder: (column) => column,
  );

  GeneratedColumn<String> get facility =>
      $composableBuilder(column: $table.facility, builder: (column) => column);

  GeneratedColumn<DateTime> get studyDate =>
      $composableBuilder(column: $table.studyDate, builder: (column) => column);

  GeneratedColumn<String> get technique =>
      $composableBuilder(column: $table.technique, builder: (column) => column);

  GeneratedColumn<String> get contrast =>
      $composableBuilder(column: $table.contrast, builder: (column) => column);

  GeneratedColumn<String> get findings =>
      $composableBuilder(column: $table.findings, builder: (column) => column);

  GeneratedColumn<String> get impression => $composableBuilder(
    column: $table.impression,
    builder: (column) => column,
  );

  GeneratedColumn<String> get recommendation => $composableBuilder(
    column: $table.recommendation,
    builder: (column) => column,
  );

  GeneratedColumn<String> get urgency =>
      $composableBuilder(column: $table.urgency, builder: (column) => column);

  GeneratedColumn<bool> get isNormal =>
      $composableBuilder(column: $table.isNormal, builder: (column) => column);

  GeneratedColumn<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => column,
  );

  GeneratedColumn<String> get protocolUsed => $composableBuilder(
    column: $table.protocolUsed,
    builder: (column) => column,
  );
}

class $$RadiologyRecordsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $RadiologyRecordsTable,
          RadiologyRecord,
          $$RadiologyRecordsTableFilterComposer,
          $$RadiologyRecordsTableOrderingComposer,
          $$RadiologyRecordsTableAnnotationComposer,
          $$RadiologyRecordsTableCreateCompanionBuilder,
          $$RadiologyRecordsTableUpdateCompanionBuilder,
          (
            RadiologyRecord,
            BaseReferences<
              _$AppDatabase,
              $RadiologyRecordsTable,
              RadiologyRecord
            >,
          ),
          RadiologyRecord,
          PrefetchHooks Function()
        > {
  $$RadiologyRecordsTableTableManager(
    _$AppDatabase db,
    $RadiologyRecordsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$RadiologyRecordsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$RadiologyRecordsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$RadiologyRecordsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> studyType = const Value.absent(),
                Value<String?> bodyPart = const Value.absent(),
                Value<String?> radiologist = const Value.absent(),
                Value<String?> facility = const Value.absent(),
                Value<DateTime> studyDate = const Value.absent(),
                Value<String?> technique = const Value.absent(),
                Value<String?> contrast = const Value.absent(),
                Value<String?> findings = const Value.absent(),
                Value<String?> impression = const Value.absent(),
                Value<String?> recommendation = const Value.absent(),
                Value<String> urgency = const Value.absent(),
                Value<bool> isNormal = const Value.absent(),
                Value<String?> referringPhysician = const Value.absent(),
                Value<String?> protocolUsed = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => RadiologyRecordsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                studyType: studyType,
                bodyPart: bodyPart,
                radiologist: radiologist,
                facility: facility,
                studyDate: studyDate,
                technique: technique,
                contrast: contrast,
                findings: findings,
                impression: impression,
                recommendation: recommendation,
                urgency: urgency,
                isNormal: isNormal,
                referringPhysician: referringPhysician,
                protocolUsed: protocolUsed,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String studyType,
                Value<String?> bodyPart = const Value.absent(),
                Value<String?> radiologist = const Value.absent(),
                Value<String?> facility = const Value.absent(),
                required DateTime studyDate,
                Value<String?> technique = const Value.absent(),
                Value<String?> contrast = const Value.absent(),
                Value<String?> findings = const Value.absent(),
                Value<String?> impression = const Value.absent(),
                Value<String?> recommendation = const Value.absent(),
                required String urgency,
                Value<bool> isNormal = const Value.absent(),
                Value<String?> referringPhysician = const Value.absent(),
                Value<String?> protocolUsed = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => RadiologyRecordsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                studyType: studyType,
                bodyPart: bodyPart,
                radiologist: radiologist,
                facility: facility,
                studyDate: studyDate,
                technique: technique,
                contrast: contrast,
                findings: findings,
                impression: impression,
                recommendation: recommendation,
                urgency: urgency,
                isNormal: isNormal,
                referringPhysician: referringPhysician,
                protocolUsed: protocolUsed,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$RadiologyRecordsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $RadiologyRecordsTable,
      RadiologyRecord,
      $$RadiologyRecordsTableFilterComposer,
      $$RadiologyRecordsTableOrderingComposer,
      $$RadiologyRecordsTableAnnotationComposer,
      $$RadiologyRecordsTableCreateCompanionBuilder,
      $$RadiologyRecordsTableUpdateCompanionBuilder,
      (
        RadiologyRecord,
        BaseReferences<_$AppDatabase, $RadiologyRecordsTable, RadiologyRecord>,
      ),
      RadiologyRecord,
      PrefetchHooks Function()
    >;
typedef $$PathologyRecordsTableCreateCompanionBuilder =
    PathologyRecordsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String specimenType,
      Value<String?> specimenSite,
      Value<String?> pathologist,
      Value<String?> laboratory,
      required DateTime collectionDate,
      Value<DateTime?> reportDate,
      Value<String?> collectionMethod,
      Value<String?> grossDescription,
      Value<String?> microscopicFindings,
      Value<String?> diagnosis,
      Value<String?> stagingGrading,
      Value<String?> immunohistochemistry,
      Value<String?> molecularStudies,
      Value<String?> recommendation,
      required String urgency,
      Value<bool> isMalignant,
      Value<String?> referringPhysician,
      Value<int> rowid,
    });
typedef $$PathologyRecordsTableUpdateCompanionBuilder =
    PathologyRecordsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> specimenType,
      Value<String?> specimenSite,
      Value<String?> pathologist,
      Value<String?> laboratory,
      Value<DateTime> collectionDate,
      Value<DateTime?> reportDate,
      Value<String?> collectionMethod,
      Value<String?> grossDescription,
      Value<String?> microscopicFindings,
      Value<String?> diagnosis,
      Value<String?> stagingGrading,
      Value<String?> immunohistochemistry,
      Value<String?> molecularStudies,
      Value<String?> recommendation,
      Value<String> urgency,
      Value<bool> isMalignant,
      Value<String?> referringPhysician,
      Value<int> rowid,
    });

class $$PathologyRecordsTableFilterComposer
    extends Composer<_$AppDatabase, $PathologyRecordsTable> {
  $$PathologyRecordsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get specimenType => $composableBuilder(
    column: $table.specimenType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get specimenSite => $composableBuilder(
    column: $table.specimenSite,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get pathologist => $composableBuilder(
    column: $table.pathologist,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get laboratory => $composableBuilder(
    column: $table.laboratory,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get collectionDate => $composableBuilder(
    column: $table.collectionDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get reportDate => $composableBuilder(
    column: $table.reportDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get collectionMethod => $composableBuilder(
    column: $table.collectionMethod,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get grossDescription => $composableBuilder(
    column: $table.grossDescription,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get microscopicFindings => $composableBuilder(
    column: $table.microscopicFindings,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get diagnosis => $composableBuilder(
    column: $table.diagnosis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get stagingGrading => $composableBuilder(
    column: $table.stagingGrading,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get immunohistochemistry => $composableBuilder(
    column: $table.immunohistochemistry,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get molecularStudies => $composableBuilder(
    column: $table.molecularStudies,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recommendation => $composableBuilder(
    column: $table.recommendation,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get urgency => $composableBuilder(
    column: $table.urgency,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isMalignant => $composableBuilder(
    column: $table.isMalignant,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => ColumnFilters(column),
  );
}

class $$PathologyRecordsTableOrderingComposer
    extends Composer<_$AppDatabase, $PathologyRecordsTable> {
  $$PathologyRecordsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get specimenType => $composableBuilder(
    column: $table.specimenType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get specimenSite => $composableBuilder(
    column: $table.specimenSite,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get pathologist => $composableBuilder(
    column: $table.pathologist,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get laboratory => $composableBuilder(
    column: $table.laboratory,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get collectionDate => $composableBuilder(
    column: $table.collectionDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get reportDate => $composableBuilder(
    column: $table.reportDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get collectionMethod => $composableBuilder(
    column: $table.collectionMethod,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get grossDescription => $composableBuilder(
    column: $table.grossDescription,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get microscopicFindings => $composableBuilder(
    column: $table.microscopicFindings,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get diagnosis => $composableBuilder(
    column: $table.diagnosis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get stagingGrading => $composableBuilder(
    column: $table.stagingGrading,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get immunohistochemistry => $composableBuilder(
    column: $table.immunohistochemistry,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get molecularStudies => $composableBuilder(
    column: $table.molecularStudies,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recommendation => $composableBuilder(
    column: $table.recommendation,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get urgency => $composableBuilder(
    column: $table.urgency,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isMalignant => $composableBuilder(
    column: $table.isMalignant,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$PathologyRecordsTableAnnotationComposer
    extends Composer<_$AppDatabase, $PathologyRecordsTable> {
  $$PathologyRecordsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get specimenType => $composableBuilder(
    column: $table.specimenType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get specimenSite => $composableBuilder(
    column: $table.specimenSite,
    builder: (column) => column,
  );

  GeneratedColumn<String> get pathologist => $composableBuilder(
    column: $table.pathologist,
    builder: (column) => column,
  );

  GeneratedColumn<String> get laboratory => $composableBuilder(
    column: $table.laboratory,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get collectionDate => $composableBuilder(
    column: $table.collectionDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get reportDate => $composableBuilder(
    column: $table.reportDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get collectionMethod => $composableBuilder(
    column: $table.collectionMethod,
    builder: (column) => column,
  );

  GeneratedColumn<String> get grossDescription => $composableBuilder(
    column: $table.grossDescription,
    builder: (column) => column,
  );

  GeneratedColumn<String> get microscopicFindings => $composableBuilder(
    column: $table.microscopicFindings,
    builder: (column) => column,
  );

  GeneratedColumn<String> get diagnosis =>
      $composableBuilder(column: $table.diagnosis, builder: (column) => column);

  GeneratedColumn<String> get stagingGrading => $composableBuilder(
    column: $table.stagingGrading,
    builder: (column) => column,
  );

  GeneratedColumn<String> get immunohistochemistry => $composableBuilder(
    column: $table.immunohistochemistry,
    builder: (column) => column,
  );

  GeneratedColumn<String> get molecularStudies => $composableBuilder(
    column: $table.molecularStudies,
    builder: (column) => column,
  );

  GeneratedColumn<String> get recommendation => $composableBuilder(
    column: $table.recommendation,
    builder: (column) => column,
  );

  GeneratedColumn<String> get urgency =>
      $composableBuilder(column: $table.urgency, builder: (column) => column);

  GeneratedColumn<bool> get isMalignant => $composableBuilder(
    column: $table.isMalignant,
    builder: (column) => column,
  );

  GeneratedColumn<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => column,
  );
}

class $$PathologyRecordsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $PathologyRecordsTable,
          PathologyRecord,
          $$PathologyRecordsTableFilterComposer,
          $$PathologyRecordsTableOrderingComposer,
          $$PathologyRecordsTableAnnotationComposer,
          $$PathologyRecordsTableCreateCompanionBuilder,
          $$PathologyRecordsTableUpdateCompanionBuilder,
          (
            PathologyRecord,
            BaseReferences<
              _$AppDatabase,
              $PathologyRecordsTable,
              PathologyRecord
            >,
          ),
          PathologyRecord,
          PrefetchHooks Function()
        > {
  $$PathologyRecordsTableTableManager(
    _$AppDatabase db,
    $PathologyRecordsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$PathologyRecordsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$PathologyRecordsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$PathologyRecordsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> specimenType = const Value.absent(),
                Value<String?> specimenSite = const Value.absent(),
                Value<String?> pathologist = const Value.absent(),
                Value<String?> laboratory = const Value.absent(),
                Value<DateTime> collectionDate = const Value.absent(),
                Value<DateTime?> reportDate = const Value.absent(),
                Value<String?> collectionMethod = const Value.absent(),
                Value<String?> grossDescription = const Value.absent(),
                Value<String?> microscopicFindings = const Value.absent(),
                Value<String?> diagnosis = const Value.absent(),
                Value<String?> stagingGrading = const Value.absent(),
                Value<String?> immunohistochemistry = const Value.absent(),
                Value<String?> molecularStudies = const Value.absent(),
                Value<String?> recommendation = const Value.absent(),
                Value<String> urgency = const Value.absent(),
                Value<bool> isMalignant = const Value.absent(),
                Value<String?> referringPhysician = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => PathologyRecordsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                specimenType: specimenType,
                specimenSite: specimenSite,
                pathologist: pathologist,
                laboratory: laboratory,
                collectionDate: collectionDate,
                reportDate: reportDate,
                collectionMethod: collectionMethod,
                grossDescription: grossDescription,
                microscopicFindings: microscopicFindings,
                diagnosis: diagnosis,
                stagingGrading: stagingGrading,
                immunohistochemistry: immunohistochemistry,
                molecularStudies: molecularStudies,
                recommendation: recommendation,
                urgency: urgency,
                isMalignant: isMalignant,
                referringPhysician: referringPhysician,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String specimenType,
                Value<String?> specimenSite = const Value.absent(),
                Value<String?> pathologist = const Value.absent(),
                Value<String?> laboratory = const Value.absent(),
                required DateTime collectionDate,
                Value<DateTime?> reportDate = const Value.absent(),
                Value<String?> collectionMethod = const Value.absent(),
                Value<String?> grossDescription = const Value.absent(),
                Value<String?> microscopicFindings = const Value.absent(),
                Value<String?> diagnosis = const Value.absent(),
                Value<String?> stagingGrading = const Value.absent(),
                Value<String?> immunohistochemistry = const Value.absent(),
                Value<String?> molecularStudies = const Value.absent(),
                Value<String?> recommendation = const Value.absent(),
                required String urgency,
                Value<bool> isMalignant = const Value.absent(),
                Value<String?> referringPhysician = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => PathologyRecordsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                specimenType: specimenType,
                specimenSite: specimenSite,
                pathologist: pathologist,
                laboratory: laboratory,
                collectionDate: collectionDate,
                reportDate: reportDate,
                collectionMethod: collectionMethod,
                grossDescription: grossDescription,
                microscopicFindings: microscopicFindings,
                diagnosis: diagnosis,
                stagingGrading: stagingGrading,
                immunohistochemistry: immunohistochemistry,
                molecularStudies: molecularStudies,
                recommendation: recommendation,
                urgency: urgency,
                isMalignant: isMalignant,
                referringPhysician: referringPhysician,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$PathologyRecordsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $PathologyRecordsTable,
      PathologyRecord,
      $$PathologyRecordsTableFilterComposer,
      $$PathologyRecordsTableOrderingComposer,
      $$PathologyRecordsTableAnnotationComposer,
      $$PathologyRecordsTableCreateCompanionBuilder,
      $$PathologyRecordsTableUpdateCompanionBuilder,
      (
        PathologyRecord,
        BaseReferences<_$AppDatabase, $PathologyRecordsTable, PathologyRecord>,
      ),
      PathologyRecord,
      PrefetchHooks Function()
    >;
typedef $$DischargeSummariesTableCreateCompanionBuilder =
    DischargeSummariesCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String hospital,
      Value<String?> attendingPhysician,
      Value<String?> department,
      required DateTime admissionDate,
      required DateTime dischargeDate,
      Value<int?> lengthOfStay,
      Value<String?> admissionDiagnosis,
      Value<String?> dischargeDiagnosis,
      Value<String?> principalDiagnosis,
      Value<String?> secondaryDiagnoses,
      Value<String?> proceduresPerformed,
      Value<String?> hospitalCourse,
      Value<String?> dischargeCondition,
      Value<String?> dischargeDestination,
      Value<String?> dischargeMedications,
      Value<String?> followUpInstructions,
      Value<String?> dietInstructions,
      Value<String?> activityRestrictions,
      Value<DateTime?> followUpDate,
      Value<int> rowid,
    });
typedef $$DischargeSummariesTableUpdateCompanionBuilder =
    DischargeSummariesCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> hospital,
      Value<String?> attendingPhysician,
      Value<String?> department,
      Value<DateTime> admissionDate,
      Value<DateTime> dischargeDate,
      Value<int?> lengthOfStay,
      Value<String?> admissionDiagnosis,
      Value<String?> dischargeDiagnosis,
      Value<String?> principalDiagnosis,
      Value<String?> secondaryDiagnoses,
      Value<String?> proceduresPerformed,
      Value<String?> hospitalCourse,
      Value<String?> dischargeCondition,
      Value<String?> dischargeDestination,
      Value<String?> dischargeMedications,
      Value<String?> followUpInstructions,
      Value<String?> dietInstructions,
      Value<String?> activityRestrictions,
      Value<DateTime?> followUpDate,
      Value<int> rowid,
    });

class $$DischargeSummariesTableFilterComposer
    extends Composer<_$AppDatabase, $DischargeSummariesTable> {
  $$DischargeSummariesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hospital => $composableBuilder(
    column: $table.hospital,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get attendingPhysician => $composableBuilder(
    column: $table.attendingPhysician,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get department => $composableBuilder(
    column: $table.department,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get admissionDate => $composableBuilder(
    column: $table.admissionDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get lengthOfStay => $composableBuilder(
    column: $table.lengthOfStay,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get admissionDiagnosis => $composableBuilder(
    column: $table.admissionDiagnosis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dischargeDiagnosis => $composableBuilder(
    column: $table.dischargeDiagnosis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get principalDiagnosis => $composableBuilder(
    column: $table.principalDiagnosis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get secondaryDiagnoses => $composableBuilder(
    column: $table.secondaryDiagnoses,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get proceduresPerformed => $composableBuilder(
    column: $table.proceduresPerformed,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hospitalCourse => $composableBuilder(
    column: $table.hospitalCourse,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dischargeCondition => $composableBuilder(
    column: $table.dischargeCondition,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dischargeDestination => $composableBuilder(
    column: $table.dischargeDestination,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dischargeMedications => $composableBuilder(
    column: $table.dischargeMedications,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get followUpInstructions => $composableBuilder(
    column: $table.followUpInstructions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dietInstructions => $composableBuilder(
    column: $table.dietInstructions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get activityRestrictions => $composableBuilder(
    column: $table.activityRestrictions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get followUpDate => $composableBuilder(
    column: $table.followUpDate,
    builder: (column) => ColumnFilters(column),
  );
}

class $$DischargeSummariesTableOrderingComposer
    extends Composer<_$AppDatabase, $DischargeSummariesTable> {
  $$DischargeSummariesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hospital => $composableBuilder(
    column: $table.hospital,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get attendingPhysician => $composableBuilder(
    column: $table.attendingPhysician,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get department => $composableBuilder(
    column: $table.department,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get admissionDate => $composableBuilder(
    column: $table.admissionDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get lengthOfStay => $composableBuilder(
    column: $table.lengthOfStay,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get admissionDiagnosis => $composableBuilder(
    column: $table.admissionDiagnosis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dischargeDiagnosis => $composableBuilder(
    column: $table.dischargeDiagnosis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get principalDiagnosis => $composableBuilder(
    column: $table.principalDiagnosis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get secondaryDiagnoses => $composableBuilder(
    column: $table.secondaryDiagnoses,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get proceduresPerformed => $composableBuilder(
    column: $table.proceduresPerformed,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hospitalCourse => $composableBuilder(
    column: $table.hospitalCourse,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dischargeCondition => $composableBuilder(
    column: $table.dischargeCondition,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dischargeDestination => $composableBuilder(
    column: $table.dischargeDestination,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dischargeMedications => $composableBuilder(
    column: $table.dischargeMedications,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get followUpInstructions => $composableBuilder(
    column: $table.followUpInstructions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dietInstructions => $composableBuilder(
    column: $table.dietInstructions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get activityRestrictions => $composableBuilder(
    column: $table.activityRestrictions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get followUpDate => $composableBuilder(
    column: $table.followUpDate,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$DischargeSummariesTableAnnotationComposer
    extends Composer<_$AppDatabase, $DischargeSummariesTable> {
  $$DischargeSummariesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get hospital =>
      $composableBuilder(column: $table.hospital, builder: (column) => column);

  GeneratedColumn<String> get attendingPhysician => $composableBuilder(
    column: $table.attendingPhysician,
    builder: (column) => column,
  );

  GeneratedColumn<String> get department => $composableBuilder(
    column: $table.department,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get admissionDate => $composableBuilder(
    column: $table.admissionDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => column,
  );

  GeneratedColumn<int> get lengthOfStay => $composableBuilder(
    column: $table.lengthOfStay,
    builder: (column) => column,
  );

  GeneratedColumn<String> get admissionDiagnosis => $composableBuilder(
    column: $table.admissionDiagnosis,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dischargeDiagnosis => $composableBuilder(
    column: $table.dischargeDiagnosis,
    builder: (column) => column,
  );

  GeneratedColumn<String> get principalDiagnosis => $composableBuilder(
    column: $table.principalDiagnosis,
    builder: (column) => column,
  );

  GeneratedColumn<String> get secondaryDiagnoses => $composableBuilder(
    column: $table.secondaryDiagnoses,
    builder: (column) => column,
  );

  GeneratedColumn<String> get proceduresPerformed => $composableBuilder(
    column: $table.proceduresPerformed,
    builder: (column) => column,
  );

  GeneratedColumn<String> get hospitalCourse => $composableBuilder(
    column: $table.hospitalCourse,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dischargeCondition => $composableBuilder(
    column: $table.dischargeCondition,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dischargeDestination => $composableBuilder(
    column: $table.dischargeDestination,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dischargeMedications => $composableBuilder(
    column: $table.dischargeMedications,
    builder: (column) => column,
  );

  GeneratedColumn<String> get followUpInstructions => $composableBuilder(
    column: $table.followUpInstructions,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dietInstructions => $composableBuilder(
    column: $table.dietInstructions,
    builder: (column) => column,
  );

  GeneratedColumn<String> get activityRestrictions => $composableBuilder(
    column: $table.activityRestrictions,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get followUpDate => $composableBuilder(
    column: $table.followUpDate,
    builder: (column) => column,
  );
}

class $$DischargeSummariesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $DischargeSummariesTable,
          DischargeSummary,
          $$DischargeSummariesTableFilterComposer,
          $$DischargeSummariesTableOrderingComposer,
          $$DischargeSummariesTableAnnotationComposer,
          $$DischargeSummariesTableCreateCompanionBuilder,
          $$DischargeSummariesTableUpdateCompanionBuilder,
          (
            DischargeSummary,
            BaseReferences<
              _$AppDatabase,
              $DischargeSummariesTable,
              DischargeSummary
            >,
          ),
          DischargeSummary,
          PrefetchHooks Function()
        > {
  $$DischargeSummariesTableTableManager(
    _$AppDatabase db,
    $DischargeSummariesTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$DischargeSummariesTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$DischargeSummariesTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$DischargeSummariesTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> hospital = const Value.absent(),
                Value<String?> attendingPhysician = const Value.absent(),
                Value<String?> department = const Value.absent(),
                Value<DateTime> admissionDate = const Value.absent(),
                Value<DateTime> dischargeDate = const Value.absent(),
                Value<int?> lengthOfStay = const Value.absent(),
                Value<String?> admissionDiagnosis = const Value.absent(),
                Value<String?> dischargeDiagnosis = const Value.absent(),
                Value<String?> principalDiagnosis = const Value.absent(),
                Value<String?> secondaryDiagnoses = const Value.absent(),
                Value<String?> proceduresPerformed = const Value.absent(),
                Value<String?> hospitalCourse = const Value.absent(),
                Value<String?> dischargeCondition = const Value.absent(),
                Value<String?> dischargeDestination = const Value.absent(),
                Value<String?> dischargeMedications = const Value.absent(),
                Value<String?> followUpInstructions = const Value.absent(),
                Value<String?> dietInstructions = const Value.absent(),
                Value<String?> activityRestrictions = const Value.absent(),
                Value<DateTime?> followUpDate = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DischargeSummariesCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                hospital: hospital,
                attendingPhysician: attendingPhysician,
                department: department,
                admissionDate: admissionDate,
                dischargeDate: dischargeDate,
                lengthOfStay: lengthOfStay,
                admissionDiagnosis: admissionDiagnosis,
                dischargeDiagnosis: dischargeDiagnosis,
                principalDiagnosis: principalDiagnosis,
                secondaryDiagnoses: secondaryDiagnoses,
                proceduresPerformed: proceduresPerformed,
                hospitalCourse: hospitalCourse,
                dischargeCondition: dischargeCondition,
                dischargeDestination: dischargeDestination,
                dischargeMedications: dischargeMedications,
                followUpInstructions: followUpInstructions,
                dietInstructions: dietInstructions,
                activityRestrictions: activityRestrictions,
                followUpDate: followUpDate,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String hospital,
                Value<String?> attendingPhysician = const Value.absent(),
                Value<String?> department = const Value.absent(),
                required DateTime admissionDate,
                required DateTime dischargeDate,
                Value<int?> lengthOfStay = const Value.absent(),
                Value<String?> admissionDiagnosis = const Value.absent(),
                Value<String?> dischargeDiagnosis = const Value.absent(),
                Value<String?> principalDiagnosis = const Value.absent(),
                Value<String?> secondaryDiagnoses = const Value.absent(),
                Value<String?> proceduresPerformed = const Value.absent(),
                Value<String?> hospitalCourse = const Value.absent(),
                Value<String?> dischargeCondition = const Value.absent(),
                Value<String?> dischargeDestination = const Value.absent(),
                Value<String?> dischargeMedications = const Value.absent(),
                Value<String?> followUpInstructions = const Value.absent(),
                Value<String?> dietInstructions = const Value.absent(),
                Value<String?> activityRestrictions = const Value.absent(),
                Value<DateTime?> followUpDate = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DischargeSummariesCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                hospital: hospital,
                attendingPhysician: attendingPhysician,
                department: department,
                admissionDate: admissionDate,
                dischargeDate: dischargeDate,
                lengthOfStay: lengthOfStay,
                admissionDiagnosis: admissionDiagnosis,
                dischargeDiagnosis: dischargeDiagnosis,
                principalDiagnosis: principalDiagnosis,
                secondaryDiagnoses: secondaryDiagnoses,
                proceduresPerformed: proceduresPerformed,
                hospitalCourse: hospitalCourse,
                dischargeCondition: dischargeCondition,
                dischargeDestination: dischargeDestination,
                dischargeMedications: dischargeMedications,
                followUpInstructions: followUpInstructions,
                dietInstructions: dietInstructions,
                activityRestrictions: activityRestrictions,
                followUpDate: followUpDate,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$DischargeSummariesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $DischargeSummariesTable,
      DischargeSummary,
      $$DischargeSummariesTableFilterComposer,
      $$DischargeSummariesTableOrderingComposer,
      $$DischargeSummariesTableAnnotationComposer,
      $$DischargeSummariesTableCreateCompanionBuilder,
      $$DischargeSummariesTableUpdateCompanionBuilder,
      (
        DischargeSummary,
        BaseReferences<
          _$AppDatabase,
          $DischargeSummariesTable,
          DischargeSummary
        >,
      ),
      DischargeSummary,
      PrefetchHooks Function()
    >;
typedef $$HospitalAdmissionsTableCreateCompanionBuilder =
    HospitalAdmissionsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String hospital,
      Value<String?> admittingPhysician,
      Value<String?> department,
      required DateTime admissionDate,
      Value<DateTime?> dischargeDate,
      required String admissionType,
      Value<String?> chiefComplaint,
      Value<String?> reasonForAdmission,
      Value<String?> presentingSymptoms,
      Value<String?> vitalSigns,
      Value<String?> initialDiagnosis,
      Value<String?> workingDiagnosis,
      Value<String?> treatmentPlan,
      Value<String?> medicationsOnAdmission,
      Value<String?> allergiesNoted,
      Value<String?> emergencyContact,
      Value<String?> insuranceInformation,
      Value<bool> isEmergencyAdmission,
      Value<String?> referringPhysician,
      Value<String?> roomNumber,
      Value<int> rowid,
    });
typedef $$HospitalAdmissionsTableUpdateCompanionBuilder =
    HospitalAdmissionsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> hospital,
      Value<String?> admittingPhysician,
      Value<String?> department,
      Value<DateTime> admissionDate,
      Value<DateTime?> dischargeDate,
      Value<String> admissionType,
      Value<String?> chiefComplaint,
      Value<String?> reasonForAdmission,
      Value<String?> presentingSymptoms,
      Value<String?> vitalSigns,
      Value<String?> initialDiagnosis,
      Value<String?> workingDiagnosis,
      Value<String?> treatmentPlan,
      Value<String?> medicationsOnAdmission,
      Value<String?> allergiesNoted,
      Value<String?> emergencyContact,
      Value<String?> insuranceInformation,
      Value<bool> isEmergencyAdmission,
      Value<String?> referringPhysician,
      Value<String?> roomNumber,
      Value<int> rowid,
    });

class $$HospitalAdmissionsTableFilterComposer
    extends Composer<_$AppDatabase, $HospitalAdmissionsTable> {
  $$HospitalAdmissionsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hospital => $composableBuilder(
    column: $table.hospital,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get admittingPhysician => $composableBuilder(
    column: $table.admittingPhysician,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get department => $composableBuilder(
    column: $table.department,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get admissionDate => $composableBuilder(
    column: $table.admissionDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get admissionType => $composableBuilder(
    column: $table.admissionType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chiefComplaint => $composableBuilder(
    column: $table.chiefComplaint,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reasonForAdmission => $composableBuilder(
    column: $table.reasonForAdmission,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get presentingSymptoms => $composableBuilder(
    column: $table.presentingSymptoms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get vitalSigns => $composableBuilder(
    column: $table.vitalSigns,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get initialDiagnosis => $composableBuilder(
    column: $table.initialDiagnosis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get workingDiagnosis => $composableBuilder(
    column: $table.workingDiagnosis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get treatmentPlan => $composableBuilder(
    column: $table.treatmentPlan,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get medicationsOnAdmission => $composableBuilder(
    column: $table.medicationsOnAdmission,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get allergiesNoted => $composableBuilder(
    column: $table.allergiesNoted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get insuranceInformation => $composableBuilder(
    column: $table.insuranceInformation,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isEmergencyAdmission => $composableBuilder(
    column: $table.isEmergencyAdmission,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get roomNumber => $composableBuilder(
    column: $table.roomNumber,
    builder: (column) => ColumnFilters(column),
  );
}

class $$HospitalAdmissionsTableOrderingComposer
    extends Composer<_$AppDatabase, $HospitalAdmissionsTable> {
  $$HospitalAdmissionsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hospital => $composableBuilder(
    column: $table.hospital,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get admittingPhysician => $composableBuilder(
    column: $table.admittingPhysician,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get department => $composableBuilder(
    column: $table.department,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get admissionDate => $composableBuilder(
    column: $table.admissionDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get admissionType => $composableBuilder(
    column: $table.admissionType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chiefComplaint => $composableBuilder(
    column: $table.chiefComplaint,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reasonForAdmission => $composableBuilder(
    column: $table.reasonForAdmission,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get presentingSymptoms => $composableBuilder(
    column: $table.presentingSymptoms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get vitalSigns => $composableBuilder(
    column: $table.vitalSigns,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get initialDiagnosis => $composableBuilder(
    column: $table.initialDiagnosis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get workingDiagnosis => $composableBuilder(
    column: $table.workingDiagnosis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get treatmentPlan => $composableBuilder(
    column: $table.treatmentPlan,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get medicationsOnAdmission => $composableBuilder(
    column: $table.medicationsOnAdmission,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get allergiesNoted => $composableBuilder(
    column: $table.allergiesNoted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get insuranceInformation => $composableBuilder(
    column: $table.insuranceInformation,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isEmergencyAdmission => $composableBuilder(
    column: $table.isEmergencyAdmission,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get roomNumber => $composableBuilder(
    column: $table.roomNumber,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$HospitalAdmissionsTableAnnotationComposer
    extends Composer<_$AppDatabase, $HospitalAdmissionsTable> {
  $$HospitalAdmissionsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get hospital =>
      $composableBuilder(column: $table.hospital, builder: (column) => column);

  GeneratedColumn<String> get admittingPhysician => $composableBuilder(
    column: $table.admittingPhysician,
    builder: (column) => column,
  );

  GeneratedColumn<String> get department => $composableBuilder(
    column: $table.department,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get admissionDate => $composableBuilder(
    column: $table.admissionDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dischargeDate => $composableBuilder(
    column: $table.dischargeDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get admissionType => $composableBuilder(
    column: $table.admissionType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chiefComplaint => $composableBuilder(
    column: $table.chiefComplaint,
    builder: (column) => column,
  );

  GeneratedColumn<String> get reasonForAdmission => $composableBuilder(
    column: $table.reasonForAdmission,
    builder: (column) => column,
  );

  GeneratedColumn<String> get presentingSymptoms => $composableBuilder(
    column: $table.presentingSymptoms,
    builder: (column) => column,
  );

  GeneratedColumn<String> get vitalSigns => $composableBuilder(
    column: $table.vitalSigns,
    builder: (column) => column,
  );

  GeneratedColumn<String> get initialDiagnosis => $composableBuilder(
    column: $table.initialDiagnosis,
    builder: (column) => column,
  );

  GeneratedColumn<String> get workingDiagnosis => $composableBuilder(
    column: $table.workingDiagnosis,
    builder: (column) => column,
  );

  GeneratedColumn<String> get treatmentPlan => $composableBuilder(
    column: $table.treatmentPlan,
    builder: (column) => column,
  );

  GeneratedColumn<String> get medicationsOnAdmission => $composableBuilder(
    column: $table.medicationsOnAdmission,
    builder: (column) => column,
  );

  GeneratedColumn<String> get allergiesNoted => $composableBuilder(
    column: $table.allergiesNoted,
    builder: (column) => column,
  );

  GeneratedColumn<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => column,
  );

  GeneratedColumn<String> get insuranceInformation => $composableBuilder(
    column: $table.insuranceInformation,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get isEmergencyAdmission => $composableBuilder(
    column: $table.isEmergencyAdmission,
    builder: (column) => column,
  );

  GeneratedColumn<String> get referringPhysician => $composableBuilder(
    column: $table.referringPhysician,
    builder: (column) => column,
  );

  GeneratedColumn<String> get roomNumber => $composableBuilder(
    column: $table.roomNumber,
    builder: (column) => column,
  );
}

class $$HospitalAdmissionsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $HospitalAdmissionsTable,
          HospitalAdmission,
          $$HospitalAdmissionsTableFilterComposer,
          $$HospitalAdmissionsTableOrderingComposer,
          $$HospitalAdmissionsTableAnnotationComposer,
          $$HospitalAdmissionsTableCreateCompanionBuilder,
          $$HospitalAdmissionsTableUpdateCompanionBuilder,
          (
            HospitalAdmission,
            BaseReferences<
              _$AppDatabase,
              $HospitalAdmissionsTable,
              HospitalAdmission
            >,
          ),
          HospitalAdmission,
          PrefetchHooks Function()
        > {
  $$HospitalAdmissionsTableTableManager(
    _$AppDatabase db,
    $HospitalAdmissionsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$HospitalAdmissionsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$HospitalAdmissionsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$HospitalAdmissionsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> hospital = const Value.absent(),
                Value<String?> admittingPhysician = const Value.absent(),
                Value<String?> department = const Value.absent(),
                Value<DateTime> admissionDate = const Value.absent(),
                Value<DateTime?> dischargeDate = const Value.absent(),
                Value<String> admissionType = const Value.absent(),
                Value<String?> chiefComplaint = const Value.absent(),
                Value<String?> reasonForAdmission = const Value.absent(),
                Value<String?> presentingSymptoms = const Value.absent(),
                Value<String?> vitalSigns = const Value.absent(),
                Value<String?> initialDiagnosis = const Value.absent(),
                Value<String?> workingDiagnosis = const Value.absent(),
                Value<String?> treatmentPlan = const Value.absent(),
                Value<String?> medicationsOnAdmission = const Value.absent(),
                Value<String?> allergiesNoted = const Value.absent(),
                Value<String?> emergencyContact = const Value.absent(),
                Value<String?> insuranceInformation = const Value.absent(),
                Value<bool> isEmergencyAdmission = const Value.absent(),
                Value<String?> referringPhysician = const Value.absent(),
                Value<String?> roomNumber = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => HospitalAdmissionsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                hospital: hospital,
                admittingPhysician: admittingPhysician,
                department: department,
                admissionDate: admissionDate,
                dischargeDate: dischargeDate,
                admissionType: admissionType,
                chiefComplaint: chiefComplaint,
                reasonForAdmission: reasonForAdmission,
                presentingSymptoms: presentingSymptoms,
                vitalSigns: vitalSigns,
                initialDiagnosis: initialDiagnosis,
                workingDiagnosis: workingDiagnosis,
                treatmentPlan: treatmentPlan,
                medicationsOnAdmission: medicationsOnAdmission,
                allergiesNoted: allergiesNoted,
                emergencyContact: emergencyContact,
                insuranceInformation: insuranceInformation,
                isEmergencyAdmission: isEmergencyAdmission,
                referringPhysician: referringPhysician,
                roomNumber: roomNumber,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String hospital,
                Value<String?> admittingPhysician = const Value.absent(),
                Value<String?> department = const Value.absent(),
                required DateTime admissionDate,
                Value<DateTime?> dischargeDate = const Value.absent(),
                required String admissionType,
                Value<String?> chiefComplaint = const Value.absent(),
                Value<String?> reasonForAdmission = const Value.absent(),
                Value<String?> presentingSymptoms = const Value.absent(),
                Value<String?> vitalSigns = const Value.absent(),
                Value<String?> initialDiagnosis = const Value.absent(),
                Value<String?> workingDiagnosis = const Value.absent(),
                Value<String?> treatmentPlan = const Value.absent(),
                Value<String?> medicationsOnAdmission = const Value.absent(),
                Value<String?> allergiesNoted = const Value.absent(),
                Value<String?> emergencyContact = const Value.absent(),
                Value<String?> insuranceInformation = const Value.absent(),
                Value<bool> isEmergencyAdmission = const Value.absent(),
                Value<String?> referringPhysician = const Value.absent(),
                Value<String?> roomNumber = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => HospitalAdmissionsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                hospital: hospital,
                admittingPhysician: admittingPhysician,
                department: department,
                admissionDate: admissionDate,
                dischargeDate: dischargeDate,
                admissionType: admissionType,
                chiefComplaint: chiefComplaint,
                reasonForAdmission: reasonForAdmission,
                presentingSymptoms: presentingSymptoms,
                vitalSigns: vitalSigns,
                initialDiagnosis: initialDiagnosis,
                workingDiagnosis: workingDiagnosis,
                treatmentPlan: treatmentPlan,
                medicationsOnAdmission: medicationsOnAdmission,
                allergiesNoted: allergiesNoted,
                emergencyContact: emergencyContact,
                insuranceInformation: insuranceInformation,
                isEmergencyAdmission: isEmergencyAdmission,
                referringPhysician: referringPhysician,
                roomNumber: roomNumber,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$HospitalAdmissionsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $HospitalAdmissionsTable,
      HospitalAdmission,
      $$HospitalAdmissionsTableFilterComposer,
      $$HospitalAdmissionsTableOrderingComposer,
      $$HospitalAdmissionsTableAnnotationComposer,
      $$HospitalAdmissionsTableCreateCompanionBuilder,
      $$HospitalAdmissionsTableUpdateCompanionBuilder,
      (
        HospitalAdmission,
        BaseReferences<
          _$AppDatabase,
          $HospitalAdmissionsTable,
          HospitalAdmission
        >,
      ),
      HospitalAdmission,
      PrefetchHooks Function()
    >;
typedef $$DentalRecordsTableCreateCompanionBuilder =
    DentalRecordsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String procedureType,
      Value<String?> dentistName,
      Value<String?> dentalOffice,
      required DateTime appointmentDate,
      Value<String?> toothNumbers,
      Value<String?> treatmentArea,
      Value<String?> chiefComplaint,
      Value<String?> clinicalFindings,
      Value<String?> diagnosis,
      Value<String?> treatmentProvided,
      Value<String?> materialsUsed,
      Value<String?> anesthesiaUsed,
      Value<String?> postTreatmentInstructions,
      Value<String?> followUpRequired,
      Value<DateTime?> nextAppointment,
      Value<double?> cost,
      Value<String?> insuranceClaim,
      Value<bool> isEmergencyVisit,
      Value<int> rowid,
    });
typedef $$DentalRecordsTableUpdateCompanionBuilder =
    DentalRecordsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> procedureType,
      Value<String?> dentistName,
      Value<String?> dentalOffice,
      Value<DateTime> appointmentDate,
      Value<String?> toothNumbers,
      Value<String?> treatmentArea,
      Value<String?> chiefComplaint,
      Value<String?> clinicalFindings,
      Value<String?> diagnosis,
      Value<String?> treatmentProvided,
      Value<String?> materialsUsed,
      Value<String?> anesthesiaUsed,
      Value<String?> postTreatmentInstructions,
      Value<String?> followUpRequired,
      Value<DateTime?> nextAppointment,
      Value<double?> cost,
      Value<String?> insuranceClaim,
      Value<bool> isEmergencyVisit,
      Value<int> rowid,
    });

class $$DentalRecordsTableFilterComposer
    extends Composer<_$AppDatabase, $DentalRecordsTable> {
  $$DentalRecordsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get procedureType => $composableBuilder(
    column: $table.procedureType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dentistName => $composableBuilder(
    column: $table.dentistName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dentalOffice => $composableBuilder(
    column: $table.dentalOffice,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get appointmentDate => $composableBuilder(
    column: $table.appointmentDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get toothNumbers => $composableBuilder(
    column: $table.toothNumbers,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get treatmentArea => $composableBuilder(
    column: $table.treatmentArea,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chiefComplaint => $composableBuilder(
    column: $table.chiefComplaint,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get clinicalFindings => $composableBuilder(
    column: $table.clinicalFindings,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get diagnosis => $composableBuilder(
    column: $table.diagnosis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get treatmentProvided => $composableBuilder(
    column: $table.treatmentProvided,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get materialsUsed => $composableBuilder(
    column: $table.materialsUsed,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get anesthesiaUsed => $composableBuilder(
    column: $table.anesthesiaUsed,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get postTreatmentInstructions => $composableBuilder(
    column: $table.postTreatmentInstructions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get followUpRequired => $composableBuilder(
    column: $table.followUpRequired,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get nextAppointment => $composableBuilder(
    column: $table.nextAppointment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cost => $composableBuilder(
    column: $table.cost,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get insuranceClaim => $composableBuilder(
    column: $table.insuranceClaim,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isEmergencyVisit => $composableBuilder(
    column: $table.isEmergencyVisit,
    builder: (column) => ColumnFilters(column),
  );
}

class $$DentalRecordsTableOrderingComposer
    extends Composer<_$AppDatabase, $DentalRecordsTable> {
  $$DentalRecordsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get procedureType => $composableBuilder(
    column: $table.procedureType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dentistName => $composableBuilder(
    column: $table.dentistName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dentalOffice => $composableBuilder(
    column: $table.dentalOffice,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get appointmentDate => $composableBuilder(
    column: $table.appointmentDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get toothNumbers => $composableBuilder(
    column: $table.toothNumbers,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get treatmentArea => $composableBuilder(
    column: $table.treatmentArea,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chiefComplaint => $composableBuilder(
    column: $table.chiefComplaint,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get clinicalFindings => $composableBuilder(
    column: $table.clinicalFindings,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get diagnosis => $composableBuilder(
    column: $table.diagnosis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get treatmentProvided => $composableBuilder(
    column: $table.treatmentProvided,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get materialsUsed => $composableBuilder(
    column: $table.materialsUsed,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get anesthesiaUsed => $composableBuilder(
    column: $table.anesthesiaUsed,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get postTreatmentInstructions => $composableBuilder(
    column: $table.postTreatmentInstructions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get followUpRequired => $composableBuilder(
    column: $table.followUpRequired,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get nextAppointment => $composableBuilder(
    column: $table.nextAppointment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cost => $composableBuilder(
    column: $table.cost,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get insuranceClaim => $composableBuilder(
    column: $table.insuranceClaim,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isEmergencyVisit => $composableBuilder(
    column: $table.isEmergencyVisit,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$DentalRecordsTableAnnotationComposer
    extends Composer<_$AppDatabase, $DentalRecordsTable> {
  $$DentalRecordsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get procedureType => $composableBuilder(
    column: $table.procedureType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dentistName => $composableBuilder(
    column: $table.dentistName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dentalOffice => $composableBuilder(
    column: $table.dentalOffice,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get appointmentDate => $composableBuilder(
    column: $table.appointmentDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get toothNumbers => $composableBuilder(
    column: $table.toothNumbers,
    builder: (column) => column,
  );

  GeneratedColumn<String> get treatmentArea => $composableBuilder(
    column: $table.treatmentArea,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chiefComplaint => $composableBuilder(
    column: $table.chiefComplaint,
    builder: (column) => column,
  );

  GeneratedColumn<String> get clinicalFindings => $composableBuilder(
    column: $table.clinicalFindings,
    builder: (column) => column,
  );

  GeneratedColumn<String> get diagnosis =>
      $composableBuilder(column: $table.diagnosis, builder: (column) => column);

  GeneratedColumn<String> get treatmentProvided => $composableBuilder(
    column: $table.treatmentProvided,
    builder: (column) => column,
  );

  GeneratedColumn<String> get materialsUsed => $composableBuilder(
    column: $table.materialsUsed,
    builder: (column) => column,
  );

  GeneratedColumn<String> get anesthesiaUsed => $composableBuilder(
    column: $table.anesthesiaUsed,
    builder: (column) => column,
  );

  GeneratedColumn<String> get postTreatmentInstructions => $composableBuilder(
    column: $table.postTreatmentInstructions,
    builder: (column) => column,
  );

  GeneratedColumn<String> get followUpRequired => $composableBuilder(
    column: $table.followUpRequired,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get nextAppointment => $composableBuilder(
    column: $table.nextAppointment,
    builder: (column) => column,
  );

  GeneratedColumn<double> get cost =>
      $composableBuilder(column: $table.cost, builder: (column) => column);

  GeneratedColumn<String> get insuranceClaim => $composableBuilder(
    column: $table.insuranceClaim,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get isEmergencyVisit => $composableBuilder(
    column: $table.isEmergencyVisit,
    builder: (column) => column,
  );
}

class $$DentalRecordsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $DentalRecordsTable,
          DentalRecord,
          $$DentalRecordsTableFilterComposer,
          $$DentalRecordsTableOrderingComposer,
          $$DentalRecordsTableAnnotationComposer,
          $$DentalRecordsTableCreateCompanionBuilder,
          $$DentalRecordsTableUpdateCompanionBuilder,
          (
            DentalRecord,
            BaseReferences<_$AppDatabase, $DentalRecordsTable, DentalRecord>,
          ),
          DentalRecord,
          PrefetchHooks Function()
        > {
  $$DentalRecordsTableTableManager(_$AppDatabase db, $DentalRecordsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$DentalRecordsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$DentalRecordsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$DentalRecordsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> procedureType = const Value.absent(),
                Value<String?> dentistName = const Value.absent(),
                Value<String?> dentalOffice = const Value.absent(),
                Value<DateTime> appointmentDate = const Value.absent(),
                Value<String?> toothNumbers = const Value.absent(),
                Value<String?> treatmentArea = const Value.absent(),
                Value<String?> chiefComplaint = const Value.absent(),
                Value<String?> clinicalFindings = const Value.absent(),
                Value<String?> diagnosis = const Value.absent(),
                Value<String?> treatmentProvided = const Value.absent(),
                Value<String?> materialsUsed = const Value.absent(),
                Value<String?> anesthesiaUsed = const Value.absent(),
                Value<String?> postTreatmentInstructions = const Value.absent(),
                Value<String?> followUpRequired = const Value.absent(),
                Value<DateTime?> nextAppointment = const Value.absent(),
                Value<double?> cost = const Value.absent(),
                Value<String?> insuranceClaim = const Value.absent(),
                Value<bool> isEmergencyVisit = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DentalRecordsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                procedureType: procedureType,
                dentistName: dentistName,
                dentalOffice: dentalOffice,
                appointmentDate: appointmentDate,
                toothNumbers: toothNumbers,
                treatmentArea: treatmentArea,
                chiefComplaint: chiefComplaint,
                clinicalFindings: clinicalFindings,
                diagnosis: diagnosis,
                treatmentProvided: treatmentProvided,
                materialsUsed: materialsUsed,
                anesthesiaUsed: anesthesiaUsed,
                postTreatmentInstructions: postTreatmentInstructions,
                followUpRequired: followUpRequired,
                nextAppointment: nextAppointment,
                cost: cost,
                insuranceClaim: insuranceClaim,
                isEmergencyVisit: isEmergencyVisit,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String procedureType,
                Value<String?> dentistName = const Value.absent(),
                Value<String?> dentalOffice = const Value.absent(),
                required DateTime appointmentDate,
                Value<String?> toothNumbers = const Value.absent(),
                Value<String?> treatmentArea = const Value.absent(),
                Value<String?> chiefComplaint = const Value.absent(),
                Value<String?> clinicalFindings = const Value.absent(),
                Value<String?> diagnosis = const Value.absent(),
                Value<String?> treatmentProvided = const Value.absent(),
                Value<String?> materialsUsed = const Value.absent(),
                Value<String?> anesthesiaUsed = const Value.absent(),
                Value<String?> postTreatmentInstructions = const Value.absent(),
                Value<String?> followUpRequired = const Value.absent(),
                Value<DateTime?> nextAppointment = const Value.absent(),
                Value<double?> cost = const Value.absent(),
                Value<String?> insuranceClaim = const Value.absent(),
                Value<bool> isEmergencyVisit = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DentalRecordsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                procedureType: procedureType,
                dentistName: dentistName,
                dentalOffice: dentalOffice,
                appointmentDate: appointmentDate,
                toothNumbers: toothNumbers,
                treatmentArea: treatmentArea,
                chiefComplaint: chiefComplaint,
                clinicalFindings: clinicalFindings,
                diagnosis: diagnosis,
                treatmentProvided: treatmentProvided,
                materialsUsed: materialsUsed,
                anesthesiaUsed: anesthesiaUsed,
                postTreatmentInstructions: postTreatmentInstructions,
                followUpRequired: followUpRequired,
                nextAppointment: nextAppointment,
                cost: cost,
                insuranceClaim: insuranceClaim,
                isEmergencyVisit: isEmergencyVisit,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$DentalRecordsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $DentalRecordsTable,
      DentalRecord,
      $$DentalRecordsTableFilterComposer,
      $$DentalRecordsTableOrderingComposer,
      $$DentalRecordsTableAnnotationComposer,
      $$DentalRecordsTableCreateCompanionBuilder,
      $$DentalRecordsTableUpdateCompanionBuilder,
      (
        DentalRecord,
        BaseReferences<_$AppDatabase, $DentalRecordsTable, DentalRecord>,
      ),
      DentalRecord,
      PrefetchHooks Function()
    >;
typedef $$MentalHealthRecordsTableCreateCompanionBuilder =
    MentalHealthRecordsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String sessionType,
      Value<String?> providerName,
      Value<String?> providerType,
      Value<String?> facility,
      required DateTime sessionDate,
      Value<int?> sessionDuration,
      Value<String?> presentingConcerns,
      Value<String?> moodAssessment,
      Value<String?> thoughtProcess,
      Value<String?> riskAssessment,
      Value<String?> treatmentGoals,
      Value<String?> interventions,
      Value<String?> homework,
      Value<String?> medicationDiscussion,
      Value<String?> progressNotes,
      Value<String?> planForNextSession,
      Value<DateTime?> nextAppointment,
      Value<int?> moodRating,
      Value<int?> anxietyRating,
      Value<bool> isCrisisSession,
      Value<int> rowid,
    });
typedef $$MentalHealthRecordsTableUpdateCompanionBuilder =
    MentalHealthRecordsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> sessionType,
      Value<String?> providerName,
      Value<String?> providerType,
      Value<String?> facility,
      Value<DateTime> sessionDate,
      Value<int?> sessionDuration,
      Value<String?> presentingConcerns,
      Value<String?> moodAssessment,
      Value<String?> thoughtProcess,
      Value<String?> riskAssessment,
      Value<String?> treatmentGoals,
      Value<String?> interventions,
      Value<String?> homework,
      Value<String?> medicationDiscussion,
      Value<String?> progressNotes,
      Value<String?> planForNextSession,
      Value<DateTime?> nextAppointment,
      Value<int?> moodRating,
      Value<int?> anxietyRating,
      Value<bool> isCrisisSession,
      Value<int> rowid,
    });

class $$MentalHealthRecordsTableFilterComposer
    extends Composer<_$AppDatabase, $MentalHealthRecordsTable> {
  $$MentalHealthRecordsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get sessionType => $composableBuilder(
    column: $table.sessionType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get providerName => $composableBuilder(
    column: $table.providerName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get providerType => $composableBuilder(
    column: $table.providerType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get facility => $composableBuilder(
    column: $table.facility,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get sessionDate => $composableBuilder(
    column: $table.sessionDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get sessionDuration => $composableBuilder(
    column: $table.sessionDuration,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get presentingConcerns => $composableBuilder(
    column: $table.presentingConcerns,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get moodAssessment => $composableBuilder(
    column: $table.moodAssessment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get thoughtProcess => $composableBuilder(
    column: $table.thoughtProcess,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get riskAssessment => $composableBuilder(
    column: $table.riskAssessment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get treatmentGoals => $composableBuilder(
    column: $table.treatmentGoals,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get interventions => $composableBuilder(
    column: $table.interventions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get homework => $composableBuilder(
    column: $table.homework,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get medicationDiscussion => $composableBuilder(
    column: $table.medicationDiscussion,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get progressNotes => $composableBuilder(
    column: $table.progressNotes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get planForNextSession => $composableBuilder(
    column: $table.planForNextSession,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get nextAppointment => $composableBuilder(
    column: $table.nextAppointment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get moodRating => $composableBuilder(
    column: $table.moodRating,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get anxietyRating => $composableBuilder(
    column: $table.anxietyRating,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isCrisisSession => $composableBuilder(
    column: $table.isCrisisSession,
    builder: (column) => ColumnFilters(column),
  );
}

class $$MentalHealthRecordsTableOrderingComposer
    extends Composer<_$AppDatabase, $MentalHealthRecordsTable> {
  $$MentalHealthRecordsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get sessionType => $composableBuilder(
    column: $table.sessionType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get providerName => $composableBuilder(
    column: $table.providerName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get providerType => $composableBuilder(
    column: $table.providerType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get facility => $composableBuilder(
    column: $table.facility,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get sessionDate => $composableBuilder(
    column: $table.sessionDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get sessionDuration => $composableBuilder(
    column: $table.sessionDuration,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get presentingConcerns => $composableBuilder(
    column: $table.presentingConcerns,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get moodAssessment => $composableBuilder(
    column: $table.moodAssessment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get thoughtProcess => $composableBuilder(
    column: $table.thoughtProcess,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get riskAssessment => $composableBuilder(
    column: $table.riskAssessment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get treatmentGoals => $composableBuilder(
    column: $table.treatmentGoals,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get interventions => $composableBuilder(
    column: $table.interventions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get homework => $composableBuilder(
    column: $table.homework,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get medicationDiscussion => $composableBuilder(
    column: $table.medicationDiscussion,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get progressNotes => $composableBuilder(
    column: $table.progressNotes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get planForNextSession => $composableBuilder(
    column: $table.planForNextSession,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get nextAppointment => $composableBuilder(
    column: $table.nextAppointment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get moodRating => $composableBuilder(
    column: $table.moodRating,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get anxietyRating => $composableBuilder(
    column: $table.anxietyRating,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isCrisisSession => $composableBuilder(
    column: $table.isCrisisSession,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$MentalHealthRecordsTableAnnotationComposer
    extends Composer<_$AppDatabase, $MentalHealthRecordsTable> {
  $$MentalHealthRecordsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get sessionType => $composableBuilder(
    column: $table.sessionType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get providerName => $composableBuilder(
    column: $table.providerName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get providerType => $composableBuilder(
    column: $table.providerType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get facility =>
      $composableBuilder(column: $table.facility, builder: (column) => column);

  GeneratedColumn<DateTime> get sessionDate => $composableBuilder(
    column: $table.sessionDate,
    builder: (column) => column,
  );

  GeneratedColumn<int> get sessionDuration => $composableBuilder(
    column: $table.sessionDuration,
    builder: (column) => column,
  );

  GeneratedColumn<String> get presentingConcerns => $composableBuilder(
    column: $table.presentingConcerns,
    builder: (column) => column,
  );

  GeneratedColumn<String> get moodAssessment => $composableBuilder(
    column: $table.moodAssessment,
    builder: (column) => column,
  );

  GeneratedColumn<String> get thoughtProcess => $composableBuilder(
    column: $table.thoughtProcess,
    builder: (column) => column,
  );

  GeneratedColumn<String> get riskAssessment => $composableBuilder(
    column: $table.riskAssessment,
    builder: (column) => column,
  );

  GeneratedColumn<String> get treatmentGoals => $composableBuilder(
    column: $table.treatmentGoals,
    builder: (column) => column,
  );

  GeneratedColumn<String> get interventions => $composableBuilder(
    column: $table.interventions,
    builder: (column) => column,
  );

  GeneratedColumn<String> get homework =>
      $composableBuilder(column: $table.homework, builder: (column) => column);

  GeneratedColumn<String> get medicationDiscussion => $composableBuilder(
    column: $table.medicationDiscussion,
    builder: (column) => column,
  );

  GeneratedColumn<String> get progressNotes => $composableBuilder(
    column: $table.progressNotes,
    builder: (column) => column,
  );

  GeneratedColumn<String> get planForNextSession => $composableBuilder(
    column: $table.planForNextSession,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get nextAppointment => $composableBuilder(
    column: $table.nextAppointment,
    builder: (column) => column,
  );

  GeneratedColumn<int> get moodRating => $composableBuilder(
    column: $table.moodRating,
    builder: (column) => column,
  );

  GeneratedColumn<int> get anxietyRating => $composableBuilder(
    column: $table.anxietyRating,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get isCrisisSession => $composableBuilder(
    column: $table.isCrisisSession,
    builder: (column) => column,
  );
}

class $$MentalHealthRecordsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $MentalHealthRecordsTable,
          MentalHealthRecord,
          $$MentalHealthRecordsTableFilterComposer,
          $$MentalHealthRecordsTableOrderingComposer,
          $$MentalHealthRecordsTableAnnotationComposer,
          $$MentalHealthRecordsTableCreateCompanionBuilder,
          $$MentalHealthRecordsTableUpdateCompanionBuilder,
          (
            MentalHealthRecord,
            BaseReferences<
              _$AppDatabase,
              $MentalHealthRecordsTable,
              MentalHealthRecord
            >,
          ),
          MentalHealthRecord,
          PrefetchHooks Function()
        > {
  $$MentalHealthRecordsTableTableManager(
    _$AppDatabase db,
    $MentalHealthRecordsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$MentalHealthRecordsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$MentalHealthRecordsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer: () =>
              $$MentalHealthRecordsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> sessionType = const Value.absent(),
                Value<String?> providerName = const Value.absent(),
                Value<String?> providerType = const Value.absent(),
                Value<String?> facility = const Value.absent(),
                Value<DateTime> sessionDate = const Value.absent(),
                Value<int?> sessionDuration = const Value.absent(),
                Value<String?> presentingConcerns = const Value.absent(),
                Value<String?> moodAssessment = const Value.absent(),
                Value<String?> thoughtProcess = const Value.absent(),
                Value<String?> riskAssessment = const Value.absent(),
                Value<String?> treatmentGoals = const Value.absent(),
                Value<String?> interventions = const Value.absent(),
                Value<String?> homework = const Value.absent(),
                Value<String?> medicationDiscussion = const Value.absent(),
                Value<String?> progressNotes = const Value.absent(),
                Value<String?> planForNextSession = const Value.absent(),
                Value<DateTime?> nextAppointment = const Value.absent(),
                Value<int?> moodRating = const Value.absent(),
                Value<int?> anxietyRating = const Value.absent(),
                Value<bool> isCrisisSession = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => MentalHealthRecordsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                sessionType: sessionType,
                providerName: providerName,
                providerType: providerType,
                facility: facility,
                sessionDate: sessionDate,
                sessionDuration: sessionDuration,
                presentingConcerns: presentingConcerns,
                moodAssessment: moodAssessment,
                thoughtProcess: thoughtProcess,
                riskAssessment: riskAssessment,
                treatmentGoals: treatmentGoals,
                interventions: interventions,
                homework: homework,
                medicationDiscussion: medicationDiscussion,
                progressNotes: progressNotes,
                planForNextSession: planForNextSession,
                nextAppointment: nextAppointment,
                moodRating: moodRating,
                anxietyRating: anxietyRating,
                isCrisisSession: isCrisisSession,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String sessionType,
                Value<String?> providerName = const Value.absent(),
                Value<String?> providerType = const Value.absent(),
                Value<String?> facility = const Value.absent(),
                required DateTime sessionDate,
                Value<int?> sessionDuration = const Value.absent(),
                Value<String?> presentingConcerns = const Value.absent(),
                Value<String?> moodAssessment = const Value.absent(),
                Value<String?> thoughtProcess = const Value.absent(),
                Value<String?> riskAssessment = const Value.absent(),
                Value<String?> treatmentGoals = const Value.absent(),
                Value<String?> interventions = const Value.absent(),
                Value<String?> homework = const Value.absent(),
                Value<String?> medicationDiscussion = const Value.absent(),
                Value<String?> progressNotes = const Value.absent(),
                Value<String?> planForNextSession = const Value.absent(),
                Value<DateTime?> nextAppointment = const Value.absent(),
                Value<int?> moodRating = const Value.absent(),
                Value<int?> anxietyRating = const Value.absent(),
                Value<bool> isCrisisSession = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => MentalHealthRecordsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                sessionType: sessionType,
                providerName: providerName,
                providerType: providerType,
                facility: facility,
                sessionDate: sessionDate,
                sessionDuration: sessionDuration,
                presentingConcerns: presentingConcerns,
                moodAssessment: moodAssessment,
                thoughtProcess: thoughtProcess,
                riskAssessment: riskAssessment,
                treatmentGoals: treatmentGoals,
                interventions: interventions,
                homework: homework,
                medicationDiscussion: medicationDiscussion,
                progressNotes: progressNotes,
                planForNextSession: planForNextSession,
                nextAppointment: nextAppointment,
                moodRating: moodRating,
                anxietyRating: anxietyRating,
                isCrisisSession: isCrisisSession,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$MentalHealthRecordsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $MentalHealthRecordsTable,
      MentalHealthRecord,
      $$MentalHealthRecordsTableFilterComposer,
      $$MentalHealthRecordsTableOrderingComposer,
      $$MentalHealthRecordsTableAnnotationComposer,
      $$MentalHealthRecordsTableCreateCompanionBuilder,
      $$MentalHealthRecordsTableUpdateCompanionBuilder,
      (
        MentalHealthRecord,
        BaseReferences<
          _$AppDatabase,
          $MentalHealthRecordsTable,
          MentalHealthRecord
        >,
      ),
      MentalHealthRecord,
      PrefetchHooks Function()
    >;
typedef $$GeneralRecordsTableCreateCompanionBuilder =
    GeneralRecordsCompanion Function({
      required String id,
      required String profileId,
      Value<String> recordType,
      required String title,
      Value<String?> description,
      required DateTime recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      required String category,
      Value<String?> subcategory,
      Value<String?> providerName,
      Value<String?> institution,
      Value<DateTime?> documentDate,
      Value<String?> documentType,
      Value<String?> referenceNumber,
      Value<String?> relatedCondition,
      Value<String?> notes,
      Value<String?> followUpRequired,
      Value<DateTime?> expirationDate,
      Value<DateTime?> reminderDate,
      Value<String?> tags,
      Value<bool> isConfidential,
      Value<bool> requiresAction,
      Value<int> rowid,
    });
typedef $$GeneralRecordsTableUpdateCompanionBuilder =
    GeneralRecordsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> recordType,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> recordDate,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<String> category,
      Value<String?> subcategory,
      Value<String?> providerName,
      Value<String?> institution,
      Value<DateTime?> documentDate,
      Value<String?> documentType,
      Value<String?> referenceNumber,
      Value<String?> relatedCondition,
      Value<String?> notes,
      Value<String?> followUpRequired,
      Value<DateTime?> expirationDate,
      Value<DateTime?> reminderDate,
      Value<String?> tags,
      Value<bool> isConfidential,
      Value<bool> requiresAction,
      Value<int> rowid,
    });

class $$GeneralRecordsTableFilterComposer
    extends Composer<_$AppDatabase, $GeneralRecordsTable> {
  $$GeneralRecordsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get category => $composableBuilder(
    column: $table.category,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get subcategory => $composableBuilder(
    column: $table.subcategory,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get providerName => $composableBuilder(
    column: $table.providerName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get institution => $composableBuilder(
    column: $table.institution,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get documentDate => $composableBuilder(
    column: $table.documentDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get documentType => $composableBuilder(
    column: $table.documentType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get referenceNumber => $composableBuilder(
    column: $table.referenceNumber,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get relatedCondition => $composableBuilder(
    column: $table.relatedCondition,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get notes => $composableBuilder(
    column: $table.notes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get followUpRequired => $composableBuilder(
    column: $table.followUpRequired,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get expirationDate => $composableBuilder(
    column: $table.expirationDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get reminderDate => $composableBuilder(
    column: $table.reminderDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tags => $composableBuilder(
    column: $table.tags,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isConfidential => $composableBuilder(
    column: $table.isConfidential,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get requiresAction => $composableBuilder(
    column: $table.requiresAction,
    builder: (column) => ColumnFilters(column),
  );
}

class $$GeneralRecordsTableOrderingComposer
    extends Composer<_$AppDatabase, $GeneralRecordsTable> {
  $$GeneralRecordsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get category => $composableBuilder(
    column: $table.category,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get subcategory => $composableBuilder(
    column: $table.subcategory,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get providerName => $composableBuilder(
    column: $table.providerName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get institution => $composableBuilder(
    column: $table.institution,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get documentDate => $composableBuilder(
    column: $table.documentDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get documentType => $composableBuilder(
    column: $table.documentType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get referenceNumber => $composableBuilder(
    column: $table.referenceNumber,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get relatedCondition => $composableBuilder(
    column: $table.relatedCondition,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get notes => $composableBuilder(
    column: $table.notes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get followUpRequired => $composableBuilder(
    column: $table.followUpRequired,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get expirationDate => $composableBuilder(
    column: $table.expirationDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get reminderDate => $composableBuilder(
    column: $table.reminderDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tags => $composableBuilder(
    column: $table.tags,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isConfidential => $composableBuilder(
    column: $table.isConfidential,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get requiresAction => $composableBuilder(
    column: $table.requiresAction,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$GeneralRecordsTableAnnotationComposer
    extends Composer<_$AppDatabase, $GeneralRecordsTable> {
  $$GeneralRecordsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get recordType => $composableBuilder(
    column: $table.recordType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get recordDate => $composableBuilder(
    column: $table.recordDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<String> get category =>
      $composableBuilder(column: $table.category, builder: (column) => column);

  GeneratedColumn<String> get subcategory => $composableBuilder(
    column: $table.subcategory,
    builder: (column) => column,
  );

  GeneratedColumn<String> get providerName => $composableBuilder(
    column: $table.providerName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get institution => $composableBuilder(
    column: $table.institution,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get documentDate => $composableBuilder(
    column: $table.documentDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get documentType => $composableBuilder(
    column: $table.documentType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get referenceNumber => $composableBuilder(
    column: $table.referenceNumber,
    builder: (column) => column,
  );

  GeneratedColumn<String> get relatedCondition => $composableBuilder(
    column: $table.relatedCondition,
    builder: (column) => column,
  );

  GeneratedColumn<String> get notes =>
      $composableBuilder(column: $table.notes, builder: (column) => column);

  GeneratedColumn<String> get followUpRequired => $composableBuilder(
    column: $table.followUpRequired,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get expirationDate => $composableBuilder(
    column: $table.expirationDate,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get reminderDate => $composableBuilder(
    column: $table.reminderDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tags =>
      $composableBuilder(column: $table.tags, builder: (column) => column);

  GeneratedColumn<bool> get isConfidential => $composableBuilder(
    column: $table.isConfidential,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get requiresAction => $composableBuilder(
    column: $table.requiresAction,
    builder: (column) => column,
  );
}

class $$GeneralRecordsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $GeneralRecordsTable,
          GeneralRecord,
          $$GeneralRecordsTableFilterComposer,
          $$GeneralRecordsTableOrderingComposer,
          $$GeneralRecordsTableAnnotationComposer,
          $$GeneralRecordsTableCreateCompanionBuilder,
          $$GeneralRecordsTableUpdateCompanionBuilder,
          (
            GeneralRecord,
            BaseReferences<_$AppDatabase, $GeneralRecordsTable, GeneralRecord>,
          ),
          GeneralRecord,
          PrefetchHooks Function()
        > {
  $$GeneralRecordsTableTableManager(
    _$AppDatabase db,
    $GeneralRecordsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$GeneralRecordsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$GeneralRecordsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$GeneralRecordsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> recordType = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> recordDate = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<String> category = const Value.absent(),
                Value<String?> subcategory = const Value.absent(),
                Value<String?> providerName = const Value.absent(),
                Value<String?> institution = const Value.absent(),
                Value<DateTime?> documentDate = const Value.absent(),
                Value<String?> documentType = const Value.absent(),
                Value<String?> referenceNumber = const Value.absent(),
                Value<String?> relatedCondition = const Value.absent(),
                Value<String?> notes = const Value.absent(),
                Value<String?> followUpRequired = const Value.absent(),
                Value<DateTime?> expirationDate = const Value.absent(),
                Value<DateTime?> reminderDate = const Value.absent(),
                Value<String?> tags = const Value.absent(),
                Value<bool> isConfidential = const Value.absent(),
                Value<bool> requiresAction = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => GeneralRecordsCompanion(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                category: category,
                subcategory: subcategory,
                providerName: providerName,
                institution: institution,
                documentDate: documentDate,
                documentType: documentType,
                referenceNumber: referenceNumber,
                relatedCondition: relatedCondition,
                notes: notes,
                followUpRequired: followUpRequired,
                expirationDate: expirationDate,
                reminderDate: reminderDate,
                tags: tags,
                isConfidential: isConfidential,
                requiresAction: requiresAction,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                Value<String> recordType = const Value.absent(),
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime recordDate,
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                required String category,
                Value<String?> subcategory = const Value.absent(),
                Value<String?> providerName = const Value.absent(),
                Value<String?> institution = const Value.absent(),
                Value<DateTime?> documentDate = const Value.absent(),
                Value<String?> documentType = const Value.absent(),
                Value<String?> referenceNumber = const Value.absent(),
                Value<String?> relatedCondition = const Value.absent(),
                Value<String?> notes = const Value.absent(),
                Value<String?> followUpRequired = const Value.absent(),
                Value<DateTime?> expirationDate = const Value.absent(),
                Value<DateTime?> reminderDate = const Value.absent(),
                Value<String?> tags = const Value.absent(),
                Value<bool> isConfidential = const Value.absent(),
                Value<bool> requiresAction = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => GeneralRecordsCompanion.insert(
                id: id,
                profileId: profileId,
                recordType: recordType,
                title: title,
                description: description,
                recordDate: recordDate,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                category: category,
                subcategory: subcategory,
                providerName: providerName,
                institution: institution,
                documentDate: documentDate,
                documentType: documentType,
                referenceNumber: referenceNumber,
                relatedCondition: relatedCondition,
                notes: notes,
                followUpRequired: followUpRequired,
                expirationDate: expirationDate,
                reminderDate: reminderDate,
                tags: tags,
                isConfidential: isConfidential,
                requiresAction: requiresAction,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$GeneralRecordsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $GeneralRecordsTable,
      GeneralRecord,
      $$GeneralRecordsTableFilterComposer,
      $$GeneralRecordsTableOrderingComposer,
      $$GeneralRecordsTableAnnotationComposer,
      $$GeneralRecordsTableCreateCompanionBuilder,
      $$GeneralRecordsTableUpdateCompanionBuilder,
      (
        GeneralRecord,
        BaseReferences<_$AppDatabase, $GeneralRecordsTable, GeneralRecord>,
      ),
      GeneralRecord,
      PrefetchHooks Function()
    >;
typedef $$TagsTableCreateCompanionBuilder =
    TagsCompanion Function({
      required String id,
      required String name,
      required String color,
      Value<String?> description,
      Value<String?> category,
      Value<String?> icon,
      Value<bool> isSystem,
      Value<bool> isActive,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<int> usageCount,
      Value<int> rowid,
    });
typedef $$TagsTableUpdateCompanionBuilder =
    TagsCompanion Function({
      Value<String> id,
      Value<String> name,
      Value<String> color,
      Value<String?> description,
      Value<String?> category,
      Value<String?> icon,
      Value<bool> isSystem,
      Value<bool> isActive,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<int> usageCount,
      Value<int> rowid,
    });

class $$TagsTableFilterComposer extends Composer<_$AppDatabase, $TagsTable> {
  $$TagsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get color => $composableBuilder(
    column: $table.color,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get category => $composableBuilder(
    column: $table.category,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get icon => $composableBuilder(
    column: $table.icon,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isSystem => $composableBuilder(
    column: $table.isSystem,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usageCount => $composableBuilder(
    column: $table.usageCount,
    builder: (column) => ColumnFilters(column),
  );
}

class $$TagsTableOrderingComposer extends Composer<_$AppDatabase, $TagsTable> {
  $$TagsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get color => $composableBuilder(
    column: $table.color,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get category => $composableBuilder(
    column: $table.category,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get icon => $composableBuilder(
    column: $table.icon,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isSystem => $composableBuilder(
    column: $table.isSystem,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usageCount => $composableBuilder(
    column: $table.usageCount,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$TagsTableAnnotationComposer
    extends Composer<_$AppDatabase, $TagsTable> {
  $$TagsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get color =>
      $composableBuilder(column: $table.color, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<String> get category =>
      $composableBuilder(column: $table.category, builder: (column) => column);

  GeneratedColumn<String> get icon =>
      $composableBuilder(column: $table.icon, builder: (column) => column);

  GeneratedColumn<bool> get isSystem =>
      $composableBuilder(column: $table.isSystem, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<int> get usageCount => $composableBuilder(
    column: $table.usageCount,
    builder: (column) => column,
  );
}

class $$TagsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $TagsTable,
          Tag,
          $$TagsTableFilterComposer,
          $$TagsTableOrderingComposer,
          $$TagsTableAnnotationComposer,
          $$TagsTableCreateCompanionBuilder,
          $$TagsTableUpdateCompanionBuilder,
          (Tag, BaseReferences<_$AppDatabase, $TagsTable, Tag>),
          Tag,
          PrefetchHooks Function()
        > {
  $$TagsTableTableManager(_$AppDatabase db, $TagsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$TagsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$TagsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$TagsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> name = const Value.absent(),
                Value<String> color = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<String?> category = const Value.absent(),
                Value<String?> icon = const Value.absent(),
                Value<bool> isSystem = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<int> usageCount = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => TagsCompanion(
                id: id,
                name: name,
                color: color,
                description: description,
                category: category,
                icon: icon,
                isSystem: isSystem,
                isActive: isActive,
                createdAt: createdAt,
                updatedAt: updatedAt,
                usageCount: usageCount,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String name,
                required String color,
                Value<String?> description = const Value.absent(),
                Value<String?> category = const Value.absent(),
                Value<String?> icon = const Value.absent(),
                Value<bool> isSystem = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<int> usageCount = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => TagsCompanion.insert(
                id: id,
                name: name,
                color: color,
                description: description,
                category: category,
                icon: icon,
                isSystem: isSystem,
                isActive: isActive,
                createdAt: createdAt,
                updatedAt: updatedAt,
                usageCount: usageCount,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$TagsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $TagsTable,
      Tag,
      $$TagsTableFilterComposer,
      $$TagsTableOrderingComposer,
      $$TagsTableAnnotationComposer,
      $$TagsTableCreateCompanionBuilder,
      $$TagsTableUpdateCompanionBuilder,
      (Tag, BaseReferences<_$AppDatabase, $TagsTable, Tag>),
      Tag,
      PrefetchHooks Function()
    >;
typedef $$AttachmentsTableCreateCompanionBuilder =
    AttachmentsCompanion Function({
      required String id,
      required String recordId,
      required String fileName,
      required String filePath,
      required String fileType,
      Value<String?> mimeType,
      required int fileSize,
      Value<String?> description,
      Value<String?> thumbnailPath,
      Value<int> sortOrder,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<bool> isSynced,
      Value<bool> isConfidential,
      Value<int> rowid,
    });
typedef $$AttachmentsTableUpdateCompanionBuilder =
    AttachmentsCompanion Function({
      Value<String> id,
      Value<String> recordId,
      Value<String> fileName,
      Value<String> filePath,
      Value<String> fileType,
      Value<String?> mimeType,
      Value<int> fileSize,
      Value<String?> description,
      Value<String?> thumbnailPath,
      Value<int> sortOrder,
      Value<DateTime> createdAt,
      Value<DateTime> updatedAt,
      Value<bool> isActive,
      Value<bool> isSynced,
      Value<bool> isConfidential,
      Value<int> rowid,
    });

class $$AttachmentsTableFilterComposer
    extends Composer<_$AppDatabase, $AttachmentsTable> {
  $$AttachmentsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordId => $composableBuilder(
    column: $table.recordId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get fileName => $composableBuilder(
    column: $table.fileName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get filePath => $composableBuilder(
    column: $table.filePath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get fileType => $composableBuilder(
    column: $table.fileType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get mimeType => $composableBuilder(
    column: $table.mimeType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get fileSize => $composableBuilder(
    column: $table.fileSize,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get thumbnailPath => $composableBuilder(
    column: $table.thumbnailPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get sortOrder => $composableBuilder(
    column: $table.sortOrder,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isSynced => $composableBuilder(
    column: $table.isSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isConfidential => $composableBuilder(
    column: $table.isConfidential,
    builder: (column) => ColumnFilters(column),
  );
}

class $$AttachmentsTableOrderingComposer
    extends Composer<_$AppDatabase, $AttachmentsTable> {
  $$AttachmentsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordId => $composableBuilder(
    column: $table.recordId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get fileName => $composableBuilder(
    column: $table.fileName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get filePath => $composableBuilder(
    column: $table.filePath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get fileType => $composableBuilder(
    column: $table.fileType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get mimeType => $composableBuilder(
    column: $table.mimeType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get fileSize => $composableBuilder(
    column: $table.fileSize,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get thumbnailPath => $composableBuilder(
    column: $table.thumbnailPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get sortOrder => $composableBuilder(
    column: $table.sortOrder,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isSynced => $composableBuilder(
    column: $table.isSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isConfidential => $composableBuilder(
    column: $table.isConfidential,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$AttachmentsTableAnnotationComposer
    extends Composer<_$AppDatabase, $AttachmentsTable> {
  $$AttachmentsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get recordId =>
      $composableBuilder(column: $table.recordId, builder: (column) => column);

  GeneratedColumn<String> get fileName =>
      $composableBuilder(column: $table.fileName, builder: (column) => column);

  GeneratedColumn<String> get filePath =>
      $composableBuilder(column: $table.filePath, builder: (column) => column);

  GeneratedColumn<String> get fileType =>
      $composableBuilder(column: $table.fileType, builder: (column) => column);

  GeneratedColumn<String> get mimeType =>
      $composableBuilder(column: $table.mimeType, builder: (column) => column);

  GeneratedColumn<int> get fileSize =>
      $composableBuilder(column: $table.fileSize, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<String> get thumbnailPath => $composableBuilder(
    column: $table.thumbnailPath,
    builder: (column) => column,
  );

  GeneratedColumn<int> get sortOrder =>
      $composableBuilder(column: $table.sortOrder, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<DateTime> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<bool> get isSynced =>
      $composableBuilder(column: $table.isSynced, builder: (column) => column);

  GeneratedColumn<bool> get isConfidential => $composableBuilder(
    column: $table.isConfidential,
    builder: (column) => column,
  );
}

class $$AttachmentsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $AttachmentsTable,
          Attachment,
          $$AttachmentsTableFilterComposer,
          $$AttachmentsTableOrderingComposer,
          $$AttachmentsTableAnnotationComposer,
          $$AttachmentsTableCreateCompanionBuilder,
          $$AttachmentsTableUpdateCompanionBuilder,
          (
            Attachment,
            BaseReferences<_$AppDatabase, $AttachmentsTable, Attachment>,
          ),
          Attachment,
          PrefetchHooks Function()
        > {
  $$AttachmentsTableTableManager(_$AppDatabase db, $AttachmentsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$AttachmentsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$AttachmentsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$AttachmentsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> recordId = const Value.absent(),
                Value<String> fileName = const Value.absent(),
                Value<String> filePath = const Value.absent(),
                Value<String> fileType = const Value.absent(),
                Value<String?> mimeType = const Value.absent(),
                Value<int> fileSize = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<String?> thumbnailPath = const Value.absent(),
                Value<int> sortOrder = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<bool> isSynced = const Value.absent(),
                Value<bool> isConfidential = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => AttachmentsCompanion(
                id: id,
                recordId: recordId,
                fileName: fileName,
                filePath: filePath,
                fileType: fileType,
                mimeType: mimeType,
                fileSize: fileSize,
                description: description,
                thumbnailPath: thumbnailPath,
                sortOrder: sortOrder,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                isSynced: isSynced,
                isConfidential: isConfidential,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String recordId,
                required String fileName,
                required String filePath,
                required String fileType,
                Value<String?> mimeType = const Value.absent(),
                required int fileSize,
                Value<String?> description = const Value.absent(),
                Value<String?> thumbnailPath = const Value.absent(),
                Value<int> sortOrder = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<DateTime> updatedAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<bool> isSynced = const Value.absent(),
                Value<bool> isConfidential = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => AttachmentsCompanion.insert(
                id: id,
                recordId: recordId,
                fileName: fileName,
                filePath: filePath,
                fileType: fileType,
                mimeType: mimeType,
                fileSize: fileSize,
                description: description,
                thumbnailPath: thumbnailPath,
                sortOrder: sortOrder,
                createdAt: createdAt,
                updatedAt: updatedAt,
                isActive: isActive,
                isSynced: isSynced,
                isConfidential: isConfidential,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$AttachmentsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $AttachmentsTable,
      Attachment,
      $$AttachmentsTableFilterComposer,
      $$AttachmentsTableOrderingComposer,
      $$AttachmentsTableAnnotationComposer,
      $$AttachmentsTableCreateCompanionBuilder,
      $$AttachmentsTableUpdateCompanionBuilder,
      (
        Attachment,
        BaseReferences<_$AppDatabase, $AttachmentsTable, Attachment>,
      ),
      Attachment,
      PrefetchHooks Function()
    >;
typedef $$RemindersTableCreateCompanionBuilder =
    RemindersCompanion Function({
      required String id,
      Value<String?> recordId,
      Value<String?> medicationId,
      required String type,
      required String title,
      Value<String?> description,
      required DateTime scheduledTime,
      required String frequency,
      Value<String?> daysOfWeek,
      Value<String?> timeSlots,
      Value<bool> isActive,
      Value<DateTime?> lastSent,
      Value<DateTime?> nextScheduled,
      Value<int> snoozeMinutes,
      Value<int> rowid,
    });
typedef $$RemindersTableUpdateCompanionBuilder =
    RemindersCompanion Function({
      Value<String> id,
      Value<String?> recordId,
      Value<String?> medicationId,
      Value<String> type,
      Value<String> title,
      Value<String?> description,
      Value<DateTime> scheduledTime,
      Value<String> frequency,
      Value<String?> daysOfWeek,
      Value<String?> timeSlots,
      Value<bool> isActive,
      Value<DateTime?> lastSent,
      Value<DateTime?> nextScheduled,
      Value<int> snoozeMinutes,
      Value<int> rowid,
    });

class $$RemindersTableFilterComposer
    extends Composer<_$AppDatabase, $RemindersTable> {
  $$RemindersTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get recordId => $composableBuilder(
    column: $table.recordId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get medicationId => $composableBuilder(
    column: $table.medicationId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get type => $composableBuilder(
    column: $table.type,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get scheduledTime => $composableBuilder(
    column: $table.scheduledTime,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get frequency => $composableBuilder(
    column: $table.frequency,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get daysOfWeek => $composableBuilder(
    column: $table.daysOfWeek,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get timeSlots => $composableBuilder(
    column: $table.timeSlots,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get lastSent => $composableBuilder(
    column: $table.lastSent,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get nextScheduled => $composableBuilder(
    column: $table.nextScheduled,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get snoozeMinutes => $composableBuilder(
    column: $table.snoozeMinutes,
    builder: (column) => ColumnFilters(column),
  );
}

class $$RemindersTableOrderingComposer
    extends Composer<_$AppDatabase, $RemindersTable> {
  $$RemindersTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get recordId => $composableBuilder(
    column: $table.recordId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get medicationId => $composableBuilder(
    column: $table.medicationId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get type => $composableBuilder(
    column: $table.type,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get scheduledTime => $composableBuilder(
    column: $table.scheduledTime,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get frequency => $composableBuilder(
    column: $table.frequency,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get daysOfWeek => $composableBuilder(
    column: $table.daysOfWeek,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get timeSlots => $composableBuilder(
    column: $table.timeSlots,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get lastSent => $composableBuilder(
    column: $table.lastSent,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get nextScheduled => $composableBuilder(
    column: $table.nextScheduled,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get snoozeMinutes => $composableBuilder(
    column: $table.snoozeMinutes,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$RemindersTableAnnotationComposer
    extends Composer<_$AppDatabase, $RemindersTable> {
  $$RemindersTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get recordId =>
      $composableBuilder(column: $table.recordId, builder: (column) => column);

  GeneratedColumn<String> get medicationId => $composableBuilder(
    column: $table.medicationId,
    builder: (column) => column,
  );

  GeneratedColumn<String> get type =>
      $composableBuilder(column: $table.type, builder: (column) => column);

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get scheduledTime => $composableBuilder(
    column: $table.scheduledTime,
    builder: (column) => column,
  );

  GeneratedColumn<String> get frequency =>
      $composableBuilder(column: $table.frequency, builder: (column) => column);

  GeneratedColumn<String> get daysOfWeek => $composableBuilder(
    column: $table.daysOfWeek,
    builder: (column) => column,
  );

  GeneratedColumn<String> get timeSlots =>
      $composableBuilder(column: $table.timeSlots, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);

  GeneratedColumn<DateTime> get lastSent =>
      $composableBuilder(column: $table.lastSent, builder: (column) => column);

  GeneratedColumn<DateTime> get nextScheduled => $composableBuilder(
    column: $table.nextScheduled,
    builder: (column) => column,
  );

  GeneratedColumn<int> get snoozeMinutes => $composableBuilder(
    column: $table.snoozeMinutes,
    builder: (column) => column,
  );
}

class $$RemindersTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $RemindersTable,
          Reminder,
          $$RemindersTableFilterComposer,
          $$RemindersTableOrderingComposer,
          $$RemindersTableAnnotationComposer,
          $$RemindersTableCreateCompanionBuilder,
          $$RemindersTableUpdateCompanionBuilder,
          (Reminder, BaseReferences<_$AppDatabase, $RemindersTable, Reminder>),
          Reminder,
          PrefetchHooks Function()
        > {
  $$RemindersTableTableManager(_$AppDatabase db, $RemindersTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$RemindersTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$RemindersTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$RemindersTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String?> recordId = const Value.absent(),
                Value<String?> medicationId = const Value.absent(),
                Value<String> type = const Value.absent(),
                Value<String> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<DateTime> scheduledTime = const Value.absent(),
                Value<String> frequency = const Value.absent(),
                Value<String?> daysOfWeek = const Value.absent(),
                Value<String?> timeSlots = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<DateTime?> lastSent = const Value.absent(),
                Value<DateTime?> nextScheduled = const Value.absent(),
                Value<int> snoozeMinutes = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => RemindersCompanion(
                id: id,
                recordId: recordId,
                medicationId: medicationId,
                type: type,
                title: title,
                description: description,
                scheduledTime: scheduledTime,
                frequency: frequency,
                daysOfWeek: daysOfWeek,
                timeSlots: timeSlots,
                isActive: isActive,
                lastSent: lastSent,
                nextScheduled: nextScheduled,
                snoozeMinutes: snoozeMinutes,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                Value<String?> recordId = const Value.absent(),
                Value<String?> medicationId = const Value.absent(),
                required String type,
                required String title,
                Value<String?> description = const Value.absent(),
                required DateTime scheduledTime,
                required String frequency,
                Value<String?> daysOfWeek = const Value.absent(),
                Value<String?> timeSlots = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<DateTime?> lastSent = const Value.absent(),
                Value<DateTime?> nextScheduled = const Value.absent(),
                Value<int> snoozeMinutes = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => RemindersCompanion.insert(
                id: id,
                recordId: recordId,
                medicationId: medicationId,
                type: type,
                title: title,
                description: description,
                scheduledTime: scheduledTime,
                frequency: frequency,
                daysOfWeek: daysOfWeek,
                timeSlots: timeSlots,
                isActive: isActive,
                lastSent: lastSent,
                nextScheduled: nextScheduled,
                snoozeMinutes: snoozeMinutes,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$RemindersTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $RemindersTable,
      Reminder,
      $$RemindersTableFilterComposer,
      $$RemindersTableOrderingComposer,
      $$RemindersTableAnnotationComposer,
      $$RemindersTableCreateCompanionBuilder,
      $$RemindersTableUpdateCompanionBuilder,
      (Reminder, BaseReferences<_$AppDatabase, $RemindersTable, Reminder>),
      Reminder,
      PrefetchHooks Function()
    >;
typedef $$EmergencyCardsTableCreateCompanionBuilder =
    EmergencyCardsCompanion Function({
      required String id,
      required String profileId,
      required String criticalAllergies,
      required String currentMedications,
      required String medicalConditions,
      Value<String?> emergencyContact,
      Value<String?> secondaryContact,
      Value<String?> insuranceInfo,
      Value<String?> additionalNotes,
      Value<DateTime> lastUpdated,
      Value<bool> isActive,
      Value<int> rowid,
    });
typedef $$EmergencyCardsTableUpdateCompanionBuilder =
    EmergencyCardsCompanion Function({
      Value<String> id,
      Value<String> profileId,
      Value<String> criticalAllergies,
      Value<String> currentMedications,
      Value<String> medicalConditions,
      Value<String?> emergencyContact,
      Value<String?> secondaryContact,
      Value<String?> insuranceInfo,
      Value<String?> additionalNotes,
      Value<DateTime> lastUpdated,
      Value<bool> isActive,
      Value<int> rowid,
    });

class $$EmergencyCardsTableFilterComposer
    extends Composer<_$AppDatabase, $EmergencyCardsTable> {
  $$EmergencyCardsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get criticalAllergies => $composableBuilder(
    column: $table.criticalAllergies,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get currentMedications => $composableBuilder(
    column: $table.currentMedications,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get medicalConditions => $composableBuilder(
    column: $table.medicalConditions,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get secondaryContact => $composableBuilder(
    column: $table.secondaryContact,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get insuranceInfo => $composableBuilder(
    column: $table.insuranceInfo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get additionalNotes => $composableBuilder(
    column: $table.additionalNotes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get lastUpdated => $composableBuilder(
    column: $table.lastUpdated,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );
}

class $$EmergencyCardsTableOrderingComposer
    extends Composer<_$AppDatabase, $EmergencyCardsTable> {
  $$EmergencyCardsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get profileId => $composableBuilder(
    column: $table.profileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get criticalAllergies => $composableBuilder(
    column: $table.criticalAllergies,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get currentMedications => $composableBuilder(
    column: $table.currentMedications,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get medicalConditions => $composableBuilder(
    column: $table.medicalConditions,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get secondaryContact => $composableBuilder(
    column: $table.secondaryContact,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get insuranceInfo => $composableBuilder(
    column: $table.insuranceInfo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get additionalNotes => $composableBuilder(
    column: $table.additionalNotes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get lastUpdated => $composableBuilder(
    column: $table.lastUpdated,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$EmergencyCardsTableAnnotationComposer
    extends Composer<_$AppDatabase, $EmergencyCardsTable> {
  $$EmergencyCardsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get profileId =>
      $composableBuilder(column: $table.profileId, builder: (column) => column);

  GeneratedColumn<String> get criticalAllergies => $composableBuilder(
    column: $table.criticalAllergies,
    builder: (column) => column,
  );

  GeneratedColumn<String> get currentMedications => $composableBuilder(
    column: $table.currentMedications,
    builder: (column) => column,
  );

  GeneratedColumn<String> get medicalConditions => $composableBuilder(
    column: $table.medicalConditions,
    builder: (column) => column,
  );

  GeneratedColumn<String> get emergencyContact => $composableBuilder(
    column: $table.emergencyContact,
    builder: (column) => column,
  );

  GeneratedColumn<String> get secondaryContact => $composableBuilder(
    column: $table.secondaryContact,
    builder: (column) => column,
  );

  GeneratedColumn<String> get insuranceInfo => $composableBuilder(
    column: $table.insuranceInfo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get additionalNotes => $composableBuilder(
    column: $table.additionalNotes,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get lastUpdated => $composableBuilder(
    column: $table.lastUpdated,
    builder: (column) => column,
  );

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);
}

class $$EmergencyCardsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $EmergencyCardsTable,
          EmergencyCard,
          $$EmergencyCardsTableFilterComposer,
          $$EmergencyCardsTableOrderingComposer,
          $$EmergencyCardsTableAnnotationComposer,
          $$EmergencyCardsTableCreateCompanionBuilder,
          $$EmergencyCardsTableUpdateCompanionBuilder,
          (
            EmergencyCard,
            BaseReferences<_$AppDatabase, $EmergencyCardsTable, EmergencyCard>,
          ),
          EmergencyCard,
          PrefetchHooks Function()
        > {
  $$EmergencyCardsTableTableManager(
    _$AppDatabase db,
    $EmergencyCardsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$EmergencyCardsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$EmergencyCardsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$EmergencyCardsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> profileId = const Value.absent(),
                Value<String> criticalAllergies = const Value.absent(),
                Value<String> currentMedications = const Value.absent(),
                Value<String> medicalConditions = const Value.absent(),
                Value<String?> emergencyContact = const Value.absent(),
                Value<String?> secondaryContact = const Value.absent(),
                Value<String?> insuranceInfo = const Value.absent(),
                Value<String?> additionalNotes = const Value.absent(),
                Value<DateTime> lastUpdated = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => EmergencyCardsCompanion(
                id: id,
                profileId: profileId,
                criticalAllergies: criticalAllergies,
                currentMedications: currentMedications,
                medicalConditions: medicalConditions,
                emergencyContact: emergencyContact,
                secondaryContact: secondaryContact,
                insuranceInfo: insuranceInfo,
                additionalNotes: additionalNotes,
                lastUpdated: lastUpdated,
                isActive: isActive,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String profileId,
                required String criticalAllergies,
                required String currentMedications,
                required String medicalConditions,
                Value<String?> emergencyContact = const Value.absent(),
                Value<String?> secondaryContact = const Value.absent(),
                Value<String?> insuranceInfo = const Value.absent(),
                Value<String?> additionalNotes = const Value.absent(),
                Value<DateTime> lastUpdated = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => EmergencyCardsCompanion.insert(
                id: id,
                profileId: profileId,
                criticalAllergies: criticalAllergies,
                currentMedications: currentMedications,
                medicalConditions: medicalConditions,
                emergencyContact: emergencyContact,
                secondaryContact: secondaryContact,
                insuranceInfo: insuranceInfo,
                additionalNotes: additionalNotes,
                lastUpdated: lastUpdated,
                isActive: isActive,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$EmergencyCardsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $EmergencyCardsTable,
      EmergencyCard,
      $$EmergencyCardsTableFilterComposer,
      $$EmergencyCardsTableOrderingComposer,
      $$EmergencyCardsTableAnnotationComposer,
      $$EmergencyCardsTableCreateCompanionBuilder,
      $$EmergencyCardsTableUpdateCompanionBuilder,
      (
        EmergencyCard,
        BaseReferences<_$AppDatabase, $EmergencyCardsTable, EmergencyCard>,
      ),
      EmergencyCard,
      PrefetchHooks Function()
    >;
typedef $$RecordTagsTableCreateCompanionBuilder =
    RecordTagsCompanion Function({
      required String recordId,
      required String tagId,
      Value<DateTime> createdAt,
      Value<int> rowid,
    });
typedef $$RecordTagsTableUpdateCompanionBuilder =
    RecordTagsCompanion Function({
      Value<String> recordId,
      Value<String> tagId,
      Value<DateTime> createdAt,
      Value<int> rowid,
    });

class $$RecordTagsTableFilterComposer
    extends Composer<_$AppDatabase, $RecordTagsTable> {
  $$RecordTagsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get recordId => $composableBuilder(
    column: $table.recordId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tagId => $composableBuilder(
    column: $table.tagId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $$RecordTagsTableOrderingComposer
    extends Composer<_$AppDatabase, $RecordTagsTable> {
  $$RecordTagsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get recordId => $composableBuilder(
    column: $table.recordId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tagId => $composableBuilder(
    column: $table.tagId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$RecordTagsTableAnnotationComposer
    extends Composer<_$AppDatabase, $RecordTagsTable> {
  $$RecordTagsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get recordId =>
      $composableBuilder(column: $table.recordId, builder: (column) => column);

  GeneratedColumn<String> get tagId =>
      $composableBuilder(column: $table.tagId, builder: (column) => column);

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);
}

class $$RecordTagsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $RecordTagsTable,
          RecordTag,
          $$RecordTagsTableFilterComposer,
          $$RecordTagsTableOrderingComposer,
          $$RecordTagsTableAnnotationComposer,
          $$RecordTagsTableCreateCompanionBuilder,
          $$RecordTagsTableUpdateCompanionBuilder,
          (
            RecordTag,
            BaseReferences<_$AppDatabase, $RecordTagsTable, RecordTag>,
          ),
          RecordTag,
          PrefetchHooks Function()
        > {
  $$RecordTagsTableTableManager(_$AppDatabase db, $RecordTagsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$RecordTagsTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$RecordTagsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$RecordTagsTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> recordId = const Value.absent(),
                Value<String> tagId = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => RecordTagsCompanion(
                recordId: recordId,
                tagId: tagId,
                createdAt: createdAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String recordId,
                required String tagId,
                Value<DateTime> createdAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => RecordTagsCompanion.insert(
                recordId: recordId,
                tagId: tagId,
                createdAt: createdAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$RecordTagsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $RecordTagsTable,
      RecordTag,
      $$RecordTagsTableFilterComposer,
      $$RecordTagsTableOrderingComposer,
      $$RecordTagsTableAnnotationComposer,
      $$RecordTagsTableCreateCompanionBuilder,
      $$RecordTagsTableUpdateCompanionBuilder,
      (RecordTag, BaseReferences<_$AppDatabase, $RecordTagsTable, RecordTag>),
      RecordTag,
      PrefetchHooks Function()
    >;
typedef $$SearchHistoryTableCreateCompanionBuilder =
    SearchHistoryCompanion Function({
      required String id,
      required String searchTerm,
      required String searchType,
      Value<int> searchCount,
      Value<DateTime> lastSearched,
      Value<DateTime> createdAt,
      Value<bool> isActive,
      Value<int> rowid,
    });
typedef $$SearchHistoryTableUpdateCompanionBuilder =
    SearchHistoryCompanion Function({
      Value<String> id,
      Value<String> searchTerm,
      Value<String> searchType,
      Value<int> searchCount,
      Value<DateTime> lastSearched,
      Value<DateTime> createdAt,
      Value<bool> isActive,
      Value<int> rowid,
    });

class $$SearchHistoryTableFilterComposer
    extends Composer<_$AppDatabase, $SearchHistoryTable> {
  $$SearchHistoryTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get searchTerm => $composableBuilder(
    column: $table.searchTerm,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get searchType => $composableBuilder(
    column: $table.searchType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get searchCount => $composableBuilder(
    column: $table.searchCount,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get lastSearched => $composableBuilder(
    column: $table.lastSearched,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnFilters(column),
  );
}

class $$SearchHistoryTableOrderingComposer
    extends Composer<_$AppDatabase, $SearchHistoryTable> {
  $$SearchHistoryTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get searchTerm => $composableBuilder(
    column: $table.searchTerm,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get searchType => $composableBuilder(
    column: $table.searchType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get searchCount => $composableBuilder(
    column: $table.searchCount,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get lastSearched => $composableBuilder(
    column: $table.lastSearched,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<bool> get isActive => $composableBuilder(
    column: $table.isActive,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$SearchHistoryTableAnnotationComposer
    extends Composer<_$AppDatabase, $SearchHistoryTable> {
  $$SearchHistoryTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get searchTerm => $composableBuilder(
    column: $table.searchTerm,
    builder: (column) => column,
  );

  GeneratedColumn<String> get searchType => $composableBuilder(
    column: $table.searchType,
    builder: (column) => column,
  );

  GeneratedColumn<int> get searchCount => $composableBuilder(
    column: $table.searchCount,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get lastSearched => $composableBuilder(
    column: $table.lastSearched,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<bool> get isActive =>
      $composableBuilder(column: $table.isActive, builder: (column) => column);
}

class $$SearchHistoryTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $SearchHistoryTable,
          SearchHistoryData,
          $$SearchHistoryTableFilterComposer,
          $$SearchHistoryTableOrderingComposer,
          $$SearchHistoryTableAnnotationComposer,
          $$SearchHistoryTableCreateCompanionBuilder,
          $$SearchHistoryTableUpdateCompanionBuilder,
          (
            SearchHistoryData,
            BaseReferences<
              _$AppDatabase,
              $SearchHistoryTable,
              SearchHistoryData
            >,
          ),
          SearchHistoryData,
          PrefetchHooks Function()
        > {
  $$SearchHistoryTableTableManager(_$AppDatabase db, $SearchHistoryTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $$SearchHistoryTableFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $$SearchHistoryTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $$SearchHistoryTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String> id = const Value.absent(),
                Value<String> searchTerm = const Value.absent(),
                Value<String> searchType = const Value.absent(),
                Value<int> searchCount = const Value.absent(),
                Value<DateTime> lastSearched = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => SearchHistoryCompanion(
                id: id,
                searchTerm: searchTerm,
                searchType: searchType,
                searchCount: searchCount,
                lastSearched: lastSearched,
                createdAt: createdAt,
                isActive: isActive,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                required String id,
                required String searchTerm,
                required String searchType,
                Value<int> searchCount = const Value.absent(),
                Value<DateTime> lastSearched = const Value.absent(),
                Value<DateTime> createdAt = const Value.absent(),
                Value<bool> isActive = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => SearchHistoryCompanion.insert(
                id: id,
                searchTerm: searchTerm,
                searchType: searchType,
                searchCount: searchCount,
                lastSearched: lastSearched,
                createdAt: createdAt,
                isActive: isActive,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$SearchHistoryTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $SearchHistoryTable,
      SearchHistoryData,
      $$SearchHistoryTableFilterComposer,
      $$SearchHistoryTableOrderingComposer,
      $$SearchHistoryTableAnnotationComposer,
      $$SearchHistoryTableCreateCompanionBuilder,
      $$SearchHistoryTableUpdateCompanionBuilder,
      (
        SearchHistoryData,
        BaseReferences<_$AppDatabase, $SearchHistoryTable, SearchHistoryData>,
      ),
      SearchHistoryData,
      PrefetchHooks Function()
    >;

class $AppDatabaseManager {
  final _$AppDatabase _db;
  $AppDatabaseManager(this._db);
  $$FamilyMemberProfilesTableTableManager get familyMemberProfiles =>
      $$FamilyMemberProfilesTableTableManager(_db, _db.familyMemberProfiles);
  $$MedicalRecordsTableTableManager get medicalRecords =>
      $$MedicalRecordsTableTableManager(_db, _db.medicalRecords);
  $$PrescriptionsTableTableManager get prescriptions =>
      $$PrescriptionsTableTableManager(_db, _db.prescriptions);
  $$LabReportsTableTableManager get labReports =>
      $$LabReportsTableTableManager(_db, _db.labReports);
  $$MedicationsTableTableManager get medications =>
      $$MedicationsTableTableManager(_db, _db.medications);
  $$VaccinationsTableTableManager get vaccinations =>
      $$VaccinationsTableTableManager(_db, _db.vaccinations);
  $$AllergiesTableTableManager get allergies =>
      $$AllergiesTableTableManager(_db, _db.allergies);
  $$ChronicConditionsTableTableManager get chronicConditions =>
      $$ChronicConditionsTableTableManager(_db, _db.chronicConditions);
  $$SurgicalRecordsTableTableManager get surgicalRecords =>
      $$SurgicalRecordsTableTableManager(_db, _db.surgicalRecords);
  $$RadiologyRecordsTableTableManager get radiologyRecords =>
      $$RadiologyRecordsTableTableManager(_db, _db.radiologyRecords);
  $$PathologyRecordsTableTableManager get pathologyRecords =>
      $$PathologyRecordsTableTableManager(_db, _db.pathologyRecords);
  $$DischargeSummariesTableTableManager get dischargeSummaries =>
      $$DischargeSummariesTableTableManager(_db, _db.dischargeSummaries);
  $$HospitalAdmissionsTableTableManager get hospitalAdmissions =>
      $$HospitalAdmissionsTableTableManager(_db, _db.hospitalAdmissions);
  $$DentalRecordsTableTableManager get dentalRecords =>
      $$DentalRecordsTableTableManager(_db, _db.dentalRecords);
  $$MentalHealthRecordsTableTableManager get mentalHealthRecords =>
      $$MentalHealthRecordsTableTableManager(_db, _db.mentalHealthRecords);
  $$GeneralRecordsTableTableManager get generalRecords =>
      $$GeneralRecordsTableTableManager(_db, _db.generalRecords);
  $$TagsTableTableManager get tags => $$TagsTableTableManager(_db, _db.tags);
  $$AttachmentsTableTableManager get attachments =>
      $$AttachmentsTableTableManager(_db, _db.attachments);
  $$RemindersTableTableManager get reminders =>
      $$RemindersTableTableManager(_db, _db.reminders);
  $$EmergencyCardsTableTableManager get emergencyCards =>
      $$EmergencyCardsTableTableManager(_db, _db.emergencyCards);
  $$RecordTagsTableTableManager get recordTags =>
      $$RecordTagsTableTableManager(_db, _db.recordTags);
  $$SearchHistoryTableTableManager get searchHistory =>
      $$SearchHistoryTableTableManager(_db, _db.searchHistory);
}
